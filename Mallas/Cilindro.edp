///////////////
// FreeROM 
/////////////// 

// Mesh creation. Cilinder with N divisions on the circule, and Nz divisions. 

load "medit"
load "msh3"
load "iovtk"

// Parameters
int NR = 40; // Number of divisions of the cilinder
int Nz = 13; // Number of division on z

real z0 = 0;
real z1 = 10;



real Rx = 1;
real Ry = 1; // if Rx = Ry => Circle

int LabelTop = 2;
int LabelSurf = 3;
int LabelBottom = 4;    


border Circle(t=0, 2*pi){x=Rx*cos(t); y=Ry*sin(t); label=1;}

// 2D mesh
mesh Thc = buildmesh(Circle(NR));

// 3D mesh 
int[int] rup = [0, LabelTop], rdown= [0, LabelBottom];
int[int] rmid = [1, LabelSurf];
mesh3 Th = buildlayers(Thc, Nz, zbound=[z0,z1], labeldown = rdown, labelup = rup, labelmid = rmid);

int[int] lab = labels(Th);
cout << lab << endl;

savevtk("CilinderMesh.vtk", Th);
savemesh(Th, "Cilinder.mesh");

fespace VhP13D(Th, P1);
fespace VhP12D(Thc, P1);

varf Poisson(u,v) = int3d(Th)(dx(u)*dx(v) + dy(u)*dy(v) + dz(u)*dz(v)) + on(2, u = 1)+ on(4, u = 50) + on(3, u = 0) ;

matrix A = Poisson(VhP13D, VhP13D);
real[int] b = Poisson(0, VhP13D);

VhP13D usol3D;
VhP12D usol2D;

usol3D[] = A^-1*b;



// real[int][int] Vertices(Thc.nv);
//
// for (int i = 0; i< Thc.nv; i++){
// 		Vertices[i] = [Thc(i).x, Thc(i).y];
// 	}
//
//


real zHiMod = 1;
for (int i = 0; i<Thc.nv; i++){
	real solucion = usol3D(Thc(i).x,Thc(i).y, zHiMod);
	real xi = Thc(i).x, yi = Thc(i).y;
	
	usol2D(xi,yi) = solucion;
}

plot(usol2D, cmm="z="+zHiMod);
cout << "Sol2D = " << usol2D(0.4,0.4) << ", Sol3D = " << usol3D(0.4, 0.4, zHiMod) << endl;

zHiMod = 7;
for (int i = 0; i<Thc.nv; i++){
	// real solucion = 
	usol2D(0.4,0.4) = usol3D(Thc(i).x,Thc(i).y, zHiMod);
}

cout << "Sol2D = " << usol2D(0.4,0.4) << ", Sol3D = " << usol3D(0.4, 0.4, zHiMod) << endl;
plot(usol2D, cmm="z="+zHiMod);

int[int] fforder=[1];
savevtk("Poisson.vtk", Th, usol3D, order=fforder);





include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/macro_ddm.idp";
include "../auxiliary/auxPOD.idp";
include "../auxiliary/fourier.idp";
IFMACRO(prob,"Stokes")include "../auxiliary/EFStokes.idp";include "../auxiliary/BRStokes.idp";ENDIFMACRO
IFMACRO(prob,"NS")include "../auxiliary/EFNS.idp";include "../auxiliary/BRNS.idp";ENDIFMACRO
IFMACRO(prob,"Smago")include "../auxiliary/EFSmago.idp";include "../auxiliary/BRSmago.idp";ENDIFMACRO

infoparam;

int Nv,Np,N;
N=98;
//21 27 30 31 32 34
dtRe/=8;
write("Output"+N+".txt","Computing the online phase with N="+N,0,1);
readTh(NN);
readparameters(ReSta);
VhGP1dc nut;
nut[]=0;

write("Output"+N+".txt","Reading the RB...",1,1);
{ifstream read("../results/basisVel"+N+".txt");read >> Nv;}
{ifstream read("../results/basisPres"+N+".txt");read >> Np;}
VhGVel[int] defVel(baseVel)(Nv+Np);
{ifstream read("../results/basisVel"+N+".txt");read >> Nv;
for(int s=0;s<Nv+Np;s++)read >> baseVel[s][];}
{ifstream read("../results/basisPres"+N+".txt");read >> Np;}
VhGP1[int] basePres(Np);
{ifstream read("../results/basisPres"+N+".txt");read >> Np;
for(int s=0;s<Np;s++)read >> basePres[s][];}

write("Output"+N+".txt","   "+Nv+" basis for Vel",1,1);
write("Output"+N+".txt","   "+Np+" basis for Pres",1,1);

IFMACRO(prob,"Smago")
write("Output"+N+".txt","Reading the EIM...",1,1);
include "../auxiliary/auxEIMsta.idp";
readEIM;
real[int,int][int] gradbaseVel(M);real[int][int] auxgrad(M);
{real[int,int] aux(dimension^2,Nv+Np);aux=0;for(int s=0;s<M;s++)gradbaseVel[s]=aux(0:dimension^2-1,0:Nv+Np-1);}
ini(VhGP1dc,GradX)
ini(VhGP1dc,GradY)
ini(VhGP1dc,GradZ)
macrogradinter(VhG,matrixD);
ini(VhGP2,w0);
VhGP1dc gradw0;
for(int ii=0;ii<Nv+Np;ii++)
{
	ini(VhGP2,auxbase);
	VeltoP2(VhG,baseVel[ii],auxbase);
	gradEIM(auxbase,auxgrad,EIMx,Grad);
	for(int ss=0;ss<M;ss++)gradbaseVel[ss](:,ii)=auxgrad[ss];
}
// {ifstream read("../solutions/txt/nut.txt");
// read >> nut[];}
// plot(nut,value=1,fill=1);
ENDIFMACRO
write("Output"+N+".txt","initializing Reduced Matrixes..."+N,1,1);
initialization(StoN,NSN,SmaN,N);
IFMACRO(prob,"Stokes"){readStoN(N,StoN);}ENDIFMACRO
IFMACRO(prob,"NS"){readStoN(N,StoN);readNSN(N,NSN);}ENDIFMACRO
IFMACRO(prob,"Smago"){readStoN(N,StoN);readNSN(N,NSN);readSmaN(N,SmaN);}ENDIFMACRO
//Nv-=Np;
real[int] uNb(N);
matrixprodVP(prodVP);matrixprodV(prodV);
VhGVP[int] defVP(uEF)(nEF+1),defVP(uBR)(nEF+1);
VhGVP defVP(errorexacto);

niRe=(Remax-Remin)/dtRe+1.;
real [int] vtrain(niRe);
for (int ig=0; ig<niRe; ig++)vtrain(ig)=Remin+ig*dtRe;
real[int] delta(niRe),estiEF(niRe),estiBR(niRe);
for(int inRe=0;inRe<niRe;inRe++)
{
	Re=vtrain(inRe);
	// selected(0:numparam-1,cont)=Re;
	write("Output"+N+".txt","   - Reynold="+Re[0],1,1);
	BRSta(uBR,uNb,Re,StoN,NSN,SmaN);
	if(1) // uso del error exacto
	{
		EFSta(uEF,Re);
		errorexacto[]=uEF[nEF][]-uBR[nEF][];
		estimate(uEF[nEF],uEFY[nEF],estiEF(inRe));
		errorexacto[]=abs(errorexacto[]);
		delta(inRe)=normL2(errorexacto[],prodVP);
//		delta(inRe)/=normL2(uEF[nEF][],prodVP);
		// plot([uEF[nEF-1],uEFY[nEF-1]],value=1);
		// plot(defVel(uBR),value=1);
		// plot(defVel(errorexacto),value=1);
		// plot(errorexactoP,value=1);
		write("Output"+N+".txt","    - Exact error= "+delta(inRe),1,1);
	}
	if(1)
	{
		EFSta(uEF,Re);
		estimate(uEF[nEF],uEFY[nEF],estiEF(inRe));
		write("Output"+N+".txt","    - estimate EF= "+estiEF(inRe),1,1);
		estimate(uBR[nEF],uBRY[nEF],estiBR(inRe));
		write("Output"+N+".txt","    - estimate BR= "+estiBR(inRe),1,1);
	}
	if(0)
	{
		VhGP1 uP1,uP1Y,energyhat;
		VhGP1 <complex> uhat,uhatY,auxbar;
		uP1=uBR[nEF];uP1Y=uBRY[nEF];
		uhat[]=DFFT2d(uP1[],-1,NN/2);
		uhatY[]=DFFT2d(uP1Y[],-1,NN/2);		
		energyhat[]=energycomputation(uhat[],uhatY[]);
		real [int] energykk=energyk(energyhat[],NN);
        write("energyspectrumN"+N+"/energyk"+prob+"NN"+NN+"Reynold"+Re[0]+"alpha"+alpha+"t"+T+".txt",energykk,0,0,0);
	}
	if(0)
	{
		EFSta(uEF,Re);
		VhGP1 uP1,uP1Y,energyhat;
		VhGP1 <complex> uhat,uhatY,auxbar;
		uP1=uEF[nEF];uP1Y=uEFY[nEF];
		uhat[]=DFFT2d(uP1[],-1,NN/2);
		uhatY[]=DFFT2d(uP1Y[],-1,NN/2);		
		energyhat[]=energycomputation(uhat[],uhatY[]);
		real [int] energykk=energyk(energyhat[],NN);
        write("energyspectrumEF/energyk"+prob+"NN"+NN+"Reynold"+Re[0]+"alpha"+alpha+"t"+T+".txt",energykk,0,0,0);
	}

}
write("errores/delta"+prob+"NN"+NN+"N"+N+".txt",delta,0,0);
write("errores/estiBRN"+N+".txt",estiBR,0,0);
write("errores/estiEFN"+N+".txt",estiEF,0,0);

write("Output"+N+".txt","Done.",1,1);

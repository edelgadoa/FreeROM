include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/ortho.idp";
IFMACRO(prob,"Stokes")include "../auxiliary/EFStokes.idp";include "../auxiliary/BRStokes.idp";ENDIFMACRO
IFMACRO(prob,"NS")include "../auxiliary/EFNS.idp";include "../auxiliary/BRNS.idp";ENDIFMACRO
IFMACRO(prob,"Smago")include "../auxiliary/EFSmago.idp";include "../auxiliary/BRSmago.idp";ENDIFMACRO

// Greedy
int Nmax,Nvmax,Npmax,Nv,Np,N,nbasis;
Npmax=nih*niw+1;
Npmax=23;
Nvmax=2*Npmax;Nmax=Nvmax+Npmax;nbasis=Npmax;
real[int] errGreedy(Npmax);errGreedy(0)=10.;real epsGreedy=1.e-4;
real[int,int] whBest(numparam,Nmax);whBest=0;
whBest(0:numparam,0)=[wmin,hmin];
// cout << ReBest(0) << endl;
real[int]  ResMax(Nmax),tau(niw*nih),delta(niw*nih),resnorm(niw*nih);
ResMax(0)=1.;
real CSobolev;

write("Output.txt","Computing the offline phase solutions with "+mpisize+" processors for h=",0,1);
write("Output.txt",vh,1,1);
write("Output.txt","and for w=",1,1);
write("Output.txt",vw,1,1);
wh=[wref,href];
readTh(NN,wh);
// //plot(Th);

readlift(NN,wh);
// plot(GVel);
omegas(omega,wh);
real[int,int] parameters(numparam,niw*nih);
readparameters(whSta);

VhGVel[int] defVel(baseVel)(Nvmax);
VhGP1[int] basePres(Npmax);
VhGP1dc nut;

IFMACRO(prob,"Smago")
write("Output.txt","Reading the EIM...",1,1);
include "../auxiliary/auxEIMsta.idp";
readEIM;
real[int,int][int] gradbaseVel(M);real[int][int] auxgrad(M);
{real[int,int] aux(dimension^2,Nvmax);aux=0;for(int s=0;s<M;s++)gradbaseVel[s]=aux(0:dimension^2-1,0:Nvmax-1);}
ini(VhGP1dc,GradX)
ini(VhGP1dc,GradY)
ini(VhGP1dc,GradZ)
macrogradinter(VhG,matrixD);
ini(VhGP2,w0);
VhGP1dc gradw0;
real[int][int] gradG(M);
gradEIM(GP2,gradG,EIMx,Grad);
{ifstream read("../solutions/txt/nut.txt");
read >> nut[];}
// plot(nut,value=1,fill=1);
ENDIFMACRO
write("Output.txt","Generating matrixes...",1,1);
matrixgeneration;
// matrixprodV(prodV);matrixprodP(prodP);matrixprodVP(prodVP);


nbasis=23;
{
	real[int,int] param(numparam,nbasis);
	ifstream read("../results/selectedparam.txt");
	read >> param;
	whBest=param;
}
cout << whBest << endl;
write("Output.txt","initializing Reduced Matrixes...",1,1);
initialization(StoN,NSN,SmaN,nbasis*3);

// if(readbasis)
// {
// 	{ifstream read("./results/nbasis.txt");read >> nbasis0;}
// 	{
// 		real[int,int] aux(numparam,nbasis0);
// 		ifstream read("./results/whBest.txt");read >> aux;
// 		whBest=aux(0:numparam-1,0:nbasis0-1);
// 		cout << whBest(0:numparam-1,0:nbasis0-1) << endl;
// 	}
// 	{ifstream read("./results/basisVel.txt");read >> Nv;
// 	for(int s=0;s<Nv;s++)read >> baseVel[s][];}
// 	{ifstream read("./results/basisPres.txt");read >> Np;
// 	for(int s=0;s<Np;s++)read >> basePres[s][];}
// 	int ip=nbasis0-1;
// 	for(int ii=0;ii<2*ip+2;ii++)
// 	{
// 		ini(VhGP2,auxbase);
// 		VeltoP2(VhG,baseVel[ii],auxbase);
// 		gradEIM(auxbase,auxgrad,EIMx,Grad);
// 		for(int ss=0;ss<M;ss++)gradbaseVel[ss](:,ii)=auxgrad[ss];
// 	}
// 	N=3*(ip+1);Nv=2*(ip+1);Np=ip+1;
// 	IFMACRO(prob,"Stokes"){readStoN(N,StoN);}ENDIFMACRO
// 	IFMACRO(prob,"NS"){readStoN(N,StoN);readNSN(N,NSN);}ENDIFMACRO
// 	IFMACRO(prob,"Smago"){readStoN(N,StoN);readNSN(N,NSN);readSmaN(N,SmaN);}ENDIFMACRO
// 	include "./greedy.idp";
// }

// nbasis=1;
for(int ip=0;ip<nbasis;ip++)
{
	wh=whBest(0:numparam-1,ip);
	write("Output.txt","------------------------  ITERATION: " +ip+", actual error= "+errGreedy(ip)+ "  ----------------------------------",1,1);
	write("Output.txt","Computing of the snapshots for w = " + wh[0]+", h = "+wh[1] ,1,1);
	pause;
	VhGVP defVP(uEF);
	EFSta(uEF,wh);
	pause;
	N=3*(ip+1);Nv=2*(ip+1);Np=ip+1;
//	cout << "N=" << N << endl;
//	cout << "Nv=" << Nv << endl;
//	cout << "Np=" << Np << endl;
	[baseVel[Nv-2],baseVelY[Nv-2]]=defVel(uEF);
	basePres[Np-1]=uEFP;
	// plot([baseVel[2*ip],baseVelY[2*ip]],value=1,wait=1);
	// plot(basePres[ip],value=1,wait=1,fill=1);
	write("Output.txt","Ok.",1,1);
	write("Output.txt","Supremizer construction...",1,1);
	pause;
	VhGVel defVel(supEF);
	supremizer(uEF,wh,supEF);
	baseVel[Nv-1][]=supEF[];
	// plot([baseVel[2*ip+1],baseVelY[2*ip+1]],value=1,wait=1,cmm="sup");
	pause;
	write("Output.txt","Ok.",1,1);
	if(GS)
	{
		write("Output.txt","Orthonormalization...",1,1);
		orthoVel(Nv);
		orthoPres(Np);
		orthoVel(Nv);
		orthoPres(Np);
		normalization(baseVel,Nv,prodV);
		normalization(basePres,Np,prodP);
		int[int] check=[1,1];
		orthocheck(Np,check)
		if(check[0]==0)write("Output.txt","Bad ortho Vel...",1,1);
		if(check[1]==0)write("Output.txt","Bad ortho Pres...",1,1);
	}
	IFMACRO(prob,"Smago")
	for(int ii=Nv-2;ii<Nv;ii++)
	{
		ini(VhGP2,auxbase);
		VeltoP2(VhG,baseVel[ii],auxbase);
		gradEIM(auxbase,auxgrad,EIMx,Grad);
		for(int ss=0;ss<M;ss++)gradbaseVel[ss](:,ii)=auxgrad[ss];
	}
	ENDIFMACRO
	write("Output.txt","Ok.",1,1);
	write("Output.txt","Building the RB matrixes...",1,1);
	matrixBR(ip);
	// wh=[wmin,hmin];
	// VhGVP defVP(uBR);
	// BRSta(uBR,wh,StoN,NSN,SmaN);
	// plot(defVel(uBR),value=1,wait=1);
	// {
	// 	VhGVP defVP(residual);
	// 	residualb(uBR,wh,residual);
	// // plot(defVel(residual),value=1,wait=1);
	// 	real aux=normL2(residual[],prodVP);
	// 	cout << aux << endl;
	// }
}
write("Output.txt","----------------------------------------------------------------------------------------------------------------------",1,1);
write("Output.txt","Greedy algorithm finished with "+Np+" basis.",1,1);
write("Output.txt", "Writing the basis..." ,1,1);
write("../results/basisVel.txt",Nv,0,0);
for(int it=0;it<Nv;it++)write("../results/basisVel.txt",baseVel[it][],1,0);
write("../results/basisPres.txt",Np,0,0);
for(int it=0;it<Np;it++)write("../results/basisPres.txt",basePres[it][],1,0);
write("Output.txt", "Ok, writing the matrixes..." ,1,1);
IFMACRO(prob,"Stokes"){writeStoN(N,StoN);}ENDIFMACRO
IFMACRO(prob,"NS"){writeStoN(N,StoN);writeNSN(N,NSN);}ENDIFMACRO
IFMACRO(prob,"Smago"){writeStoN(N,StoN);writeNSN(N,NSN);writeSmaN(N,SmaN);}ENDIFMACRO


write("Output.txt","Done.",1,1);

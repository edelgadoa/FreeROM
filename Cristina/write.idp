/////////////////////////////////////////////////////////////////////////////////////////
// Archivo auxiliar para la escritura de archivos txt a través de una única función write.
// Input:
// - filename: nombre del archivo en string con extension
// - towrite: variable to write
// - ind: 1 para anexar a archivo existente, 0 cc
// - show: 1 para mostrar por pantalla, 0 cc 
// Input opcional:
// - proces: procesador de escritura
// - preci: precision de escritura
/////////////////////////////////////////////////////////////////////////////////////////

// Escalar
func int write(string filename,string towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
func int write(string filename,string towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
func int write(string filename,int towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
func int write(string filename,int towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
func int write(string filename,real towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
func int write(string filename,real towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
func int write(string filename,real towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file.precision(preci);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file.precision(preci);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
func int write(string filename,complex towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
func int write(string filename,complex towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
func int write(string filename,complex towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file.precision(preci);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file.precision(preci);
		file << towrite << endl;
	}
	if(show==1) cout <<towrite << endl;}
	return 1;
}
// Vectores
func int write(string filename,int[int] towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,int[int] towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,real[int] towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,real[int] towrite,int ind,bool show,int proces)
{       
        if(mpirank==proces){
        if(ind==0)
        {       
                ofstream file(filename);
                file << towrite << endl;
        }
        else
        {       
                ofstream file(filename,append);
                file << towrite << endl;
        }
        if(show==1) cout << towrite << endl;}
        return 1;
}
func int write(string filename,real[int] towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file.precision(preci);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file.precision(preci);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,complex[int] towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,complex[int] towrite,int ind,bool show,int proces)
{       
        if(mpirank==proces){
        if(ind==0)
        {       
                ofstream file(filename);
                file << towrite << endl;
        }
        else
        {       
                ofstream file(filename,append);
                file << towrite << endl;
        }
        if(show==1) cout << towrite << endl;}
        return 1;
}
func int write(string filename,complex[int] towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file.precision(preci);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file.precision(preci);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}

// Matrices llenas
func int write(string filename,int[int,int] towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,int[int,int] towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,int[int,int] towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file.precision(preci);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file.precision(preci);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,real[int,int] towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,real[int,int] towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,real[int,int] towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file.precision(preci);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file.precision(preci);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,complex[int,int] towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,complex[int,int] towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,complex[int,int] towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file.precision(preci);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file.precision(preci);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}

// Matrices sparse
func int write(string filename,matrix towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,matrix towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,matrix towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file.precision(preci);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file.precision(preci);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,matrix <complex> towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,matrix <complex> towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,matrix <complex> towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		ofstream file(filename);
		file.precision(preci);
		file << towrite << endl;
	}
	else
	{
		ofstream file(filename,append);
		file.precision(preci);
		file << towrite << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}

// Tensores
func int write(string filename,int[int,int][int] towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		int n=towrite.n;
		{ofstream file(filename);
		file << n << endl;}
		ofstream file(filename,append);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	else
	{
		int n=towrite.n;
		ofstream file(filename,append);
		file << n << endl;
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,int[int,int][int]towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		int n=towrite.n;
		{ofstream file(filename);
		file << n << endl;}
		ofstream file(filename,append);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	else
	{
		int n=towrite.n;
		ofstream file(filename,append);
		file << n << endl;
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,int[int,int][int]towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		int n=towrite.n;
		{ofstream file(filename);
		file << n << endl;}
		ofstream file(filename,append);
		file.precision(preci);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	else
	{
		int n=towrite.n;
		ofstream file(filename,append);
		file << n << endl;
		file.precision(preci);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,real[int,int][int] towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		int n=towrite.n;
		{ofstream file(filename);
		file << n << endl;}
		ofstream file(filename,append);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	else
	{
		int n=towrite.n;
		ofstream file(filename,append);
		file << n << endl;
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,real[int,int][int]towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		int n=towrite.n;
		{ofstream file(filename);
		file << n << endl;}
		ofstream file(filename,append);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	else
	{
		int n=towrite.n;
		ofstream file(filename,append);
		file << n << endl;
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,real[int,int][int]towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		int n=towrite.n;
		{ofstream file(filename);
		file << n << endl;}
		ofstream file(filename,append);
		file.precision(preci);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	else
	{
		int n=towrite.n;
		ofstream file(filename,append);
		file << n << endl;
		file.precision(preci);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,complex[int,int][int] towrite,int ind,bool show)
{
	if(mpirank==0){
	if(ind==0)
	{
		int n=towrite.n;
		{ofstream file(filename);
		file << n << endl;}
		ofstream file(filename,append);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	else
	{
		int n=towrite.n;
		ofstream file(filename,append);
		file << n << endl;
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,complex[int,int][int]towrite,int ind,bool show,int proces)
{
	if(mpirank==proces){
	if(ind==0)
	{
		int n=towrite.n;
		{ofstream file(filename);
		file << n << endl;}
		ofstream file(filename,append);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	else
	{
		int n=towrite.n;
		ofstream file(filename,append);
		file << n << endl;
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
func int write(string filename,complex[int,int][int]towrite,int ind,bool show,int proces,int preci)
{
	if(mpirank==proces){
	if(ind==0)
	{
		int n=towrite.n;
		{ofstream file(filename);
		file << n << endl;}
		ofstream file(filename,append);
		file.precision(preci);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	else
	{
		int n=towrite.n;
		ofstream file(filename,append);
		file << n << endl;
		file.precision(preci);
		for(int i=0;i<n;i++)file << towrite[i] << endl;
	}
	if(show==1) cout << towrite << endl;}
	return 1;
}
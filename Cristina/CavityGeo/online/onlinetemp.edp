include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/ortho.idp";
IFMACRO(prob,"Stokes")include "../auxiliary/EFStokes.idp";include "../auxiliary/BRStokes.idp";ENDIFMACRO
IFMACRO(prob,"NS")include "../auxiliary/EFNS.idp";include "../auxiliary/BRNS.idp";ENDIFMACRO
IFMACRO(prob,"Smago")include "../auxiliary/EFSmago.idp";include "../auxiliary/BRSmago.idp";ENDIFMACRO

int case=2;
string name="Output"+case+"temp.txt";

// Greedy
int Nv,Np,N,nbasis,Nt;
// cout << ReBest(0) << endl;
real CSobolev,resnorm;


write(name,"Computing the online phase solutions with "+mpisize+" processors...",0,1);
real executiontime;
wh=[wref,href];
readTh(NN,wh);
// //plot(Th);

readlift(NN,wh);
readlifttemp(NN,wh);
// plot(GVel);
omegas(omega,wh);
// real[int,int] parameters(numparam,niw*nih);
// readparameters(whSta);
real[int,int] whSta(numparam,1),whStatemp(numparam,1);
whSta(0:numparam-1,0)=[-1,1];whStatemp(0:numparam-1,0)=[-1,1];
VhGP1dc nut;
VhGP2 thetaEF,thetaBR;

write(name,"Reading the RB...",1,1);
{ifstream read("../results/basisVel.txt");read >> Nv;}
VhGVel[int] defVel(baseVel)(Nv);
{ifstream read("../results/basisVel.txt");read >> Nv;
for(int s=0;s<Nv;s++)read >> baseVel[s][];}
{ifstream read("../results/basisPres.txt");read >> Np;}
VhGP1[int] basePres(Np);
{ifstream read("../results/basisPres.txt");read >> Np;
for(int s=0;s<Np;s++)read >> basePres[s][];}
{ifstream read("../results/basisTemp.txt");read >> Nt;}
VhGP2[int] baseTemp(Nt);
{ifstream read("../results/basisTemp.txt");read >> Nt;
for(int s=0;s<Nt;s++)read >> baseTemp[s][];}
N=Np+Nv;

write(name,"Basis constructed by "+Np+" snapshots for velocity and "+Nt+" for temperature.",1,1);
if(0)
{
	string DataName="Vel";
	int[int] Order=[1];
	bool Bin=true;
	for(int s=0;s<Nv;s++)
	{
		string FileName="./vtu/BaseVel"+s+".vtu";
		savevtk(FileName, Th, [baseVel[s],baseVelY[s],0], dataname=DataName, order=Order,append=true);//,bin=Bin);
	}
	DataName="Pres";
	for(int s=0;s<Np;s++)
	{
		string FileName="./vtu/BasePres"+s+".vtu";
		savevtk(FileName, Th, basePres[s], dataname=DataName, order=Order,append=true);//,bin=Bin);
	}
	DataName="Temp";
	for(int s=0;s<Nt;s++)
	{
		string FileName="./vtu/BaseTemp"+s+".vtu";
		savevtk(FileName, Th, baseTemp[s], dataname=DataName, order=Order,append=true);//,bin=Bin);
	}
}

IFMACRO(prob,"Smago")
ini(VhGP1dc,GradX)
ini(VhGP1dc,GradY)
ini(VhGP1dc,GradZ)
macrogradinter(VhG,matrixD);
ini(VhGP2,w0)
VhGP1dc gradw0;
write(name,"Reading the EIM...",1,1);
include "../auxiliary/auxEIMsta.idp";
readEIM;
real[int,int][int] gradbaseVel(M);real[int][int] auxgrad(M);
{real[int,int] aux(dimension^2,Nv);aux=0;for(int s=0;s<M;s++)gradbaseVel[s]=aux(0:dimension^2-1,0:Nv-1);}
for(int ii=0;ii<Nv;ii++)
{
	ini(VhGP2,auxbase);
	VeltoP2(VhG,baseVel[ii],auxbase);
	gradEIM(auxbase,auxgrad,EIMx,Grad);
	for(int ss=0;ss<M;ss++)gradbaseVel[ss](:,ii)=auxgrad[ss];
}
real[int][int] gradG(M);
gradEIM(GP2,gradG,EIMx,Grad);
{ifstream read("../solutions/txt/nut.txt");
read >> nut[];}
// plot(nut,value=1,fill=1);
write(name,"Reading the RBF...",1,1);
readRBFtemp;
include "../auxiliary/betas.idp";
real etamax,gammamax,phimax,phimin,rhoT;
write(name,"Computing the inyection constant...",1,1);
{
	ifstream aux("../offline/CS.txt");
	aux >> CSobolev;
}
write(name, " - Sobolev constant: " + CSobolev,1,1);
real tau,delta,deltatemp,resnormtemp;
ENDIFMACRO


write(name,"initializing Reduced Matrixes..."+N,1,1);
initialization(StoN,NSN,SmaN,N);
initializationTemp(BouN,Nt);
IFMACRO(prob,"Stokes"){readStoN(N,StoN);}ENDIFMACRO
IFMACRO(prob,"NS"){readStoN(N,StoN);readNSN(N,NSN);}ENDIFMACRO
IFMACRO(prob,"Smago"){readStoN(N,StoN);readNSN(N,NSN);readSmaN(N,SmaN);}ENDIFMACRO
readBouN(Nt,BouN);

if(case==1)wh=[2.891,2.734];
if(case==2)wh=[2.649,2.65];
if(case==3)wh=[2.469,2.923];
// wh=[wmin,hmin];
wh/=Longcarac;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
write(name,"Computing the Finite Element problem...",1,1);
write(name,"Please, write w=",1,1);
// cin >> wh[0];
write(name,"Please, write h=",1,1);
// cin >> wh[1];
write(name,"w="+wh[0]+", h="+wh[1],1,1);
real executiontimeEF=mpiWtime();
EFStaTemp(thetaEF,wh);
executiontimeEF=mpiWtime()-executiontimeEF;
write(name,"FE problem time="+executiontimeEF,1,1);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

write(name,"Computing the Reduced Basis problem...",1,1);
write(name,"Please, write w=",1,1);
// cin >> wh[0];
write(name,"Please, write h=",1,1);
// in >> wh[1];
write(name,"w="+wh[0]+", h="+wh[1],1,1);
real executiontimeBR=mpiWtime();
BRStaTemp(thetaBR,wh,BouN);
executiontimeBR=mpiWtime()-executiontimeBR;
write(name,"RB problem time="+executiontimeBR,1,1);
matrixprodTemp(prod)
write(name,"Computing the estimator...",1,1);
{
	{
		VhGP2 residual;
		residualbTemp(thetaBR,wh,residual);
		resnormtemp=normL2(residual[],prodgradTemp);
		write(name,"    - Residual="+resnormtemp,1,1);
	}
	IFMACRO(prob,"Smago");
		include "../auxiliary/search.idp";
		real betah=fbeta(RBFgamma,RBFmu,wh);
		write("Output.txt","    - betah="+betah,1,1);
		write(name,"    - betah="+betah,1,1);

		deltatemp=resnormtemp/betah;
		write(name,"    - Delta="+deltatemp,1,1);
	ENDIFMACRO
	
	{
		VhGVP defVP(uBR);
		real[int] uNb(N);
		BRSta(uBR,uNb,wh,StoN,NSN,SmaN);
	// funcgeo(wh);
// 	nut=(CS*hTri)^2*sqrt(phix*gradx(uBR,uBR)+phiy*grady(uBR,uBR));
// 	VhGP2 residual;
// 	residualbTemp(thetaBR,wh,residual);
// 	real beta=1./Pe+nut[].min/Pr;
		write("../solutions/txt/SolBR"+prob+"NN"+NN+"w"+wh[0]+"h"+wh[1]+".txt",uBR[],0,0,0,20);
		write("../solutions/txt/SolBR"+prob+"BoussinesqNN"+NN+"w"+wh[0]+"h"+wh[1]+".txt",thetaBR[],0,0,0,20);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

write(name,"Computing the exact error between FE and RB solutions...",1,1);
VhGP2 exacterror;
exacterror[]=thetaEF[]-thetaBR[];
plot(thetaEF,value=1,cmm="EF temp",wait=0);
plot(thetaBR,value=1,cmm="BR temp",wait=0);
plot(exacterror,value=1,cmm="Error temp");
real errornormL2=normL2(exacterror[],prodTemp);
real errornormH1=normL2(exacterror[],prodgradTemp);
exacterror[]=abs(exacterror[]);
real errornormLinf=exacterror[].max;

write(name, "L2 error="+errornormL2,1,1);
write(name, "H1 error="+errornormH1,1,1);
write(name, "Linf error="+errornormLinf,1,1);

real speedup=executiontimeEF/executiontimeBR;
write(name,"speedup="+speedup,1,1);

write("case"+case+".txt",errornormH1,1,0);
write("case"+case+".txt",deltatemp,1,0);
write("case"+case+".txt",speedup,1,0);


write(name,"Done.",1,1);

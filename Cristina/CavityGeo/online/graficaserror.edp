include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/ortho.idp";
IFMACRO(prob,"Stokes")include "../auxiliary/EFStokes.idp";include "../auxiliary/BRStokes.idp";ENDIFMACRO
IFMACRO(prob,"NS")include "../auxiliary/EFNS.idp";include "../auxiliary/BRNS.idp";ENDIFMACRO
IFMACRO(prob,"Smago")include "../auxiliary/EFSmago.idp";include "../auxiliary/BRSmago.idp";ENDIFMACRO

int case=3;
// Greedy
int Nv,Np,N,nbasis;
// cout << ReBest(0) << endl;
real CSobolev,resnorm;


write("Output.txt","Computing the online phase solutions with "+mpisize+" processors...",0,1);
real executiontime;
wh=[wref,href];
readTh(NN,wh);
// //plot(Th);

readlift(NN,wh);
// plot(GVel);
omegas(omega,wh);
real[int,int] parameters(numparam,niw*nih);
readparameters(whSta);
VhGP1dc nut;
VhGVP defVP(uEF),defVP(uBR);

write("Output.txt","Reading the RB...",1,1);
{ifstream read("../results/basisVel.txt");read >> Nv;}
VhGVel[int] defVel(baseVel)(Nv);
{ifstream read("../results/basisVel.txt");read >> Nv;
for(int s=0;s<Nv;s++)read >> baseVel[s][];}
{ifstream read("../results/basisPres.txt");read >> Np;}
VhGP1[int] basePres(Np);
{ifstream read("../results/basisPres.txt");read >> Np;
for(int s=0;s<Np;s++)read >> basePres[s][];}
N=Np+Nv;

write("Output.txt","Basis constructed by "+Np+" snapshots.",1,1);
if(0)
{
	string DataName="Vel";
	int[int] Order=[1];
	bool Bin=true;
	for(int s=0;s<Nv;s++)
	{
		string FileName="./vtu/BaseVel"+s+".vtu";
		savevtk(FileName, Th, [baseVel[s],baseVelY[s],0], dataname=DataName, order=Order,append=true);//,bin=Bin);
	}
	DataName="Pres";
	for(int s=0;s<Np;s++)
	{
		string FileName="./vtu/BasePres"+s+".vtu";
		savevtk(FileName, Th, basePres[s], dataname=DataName, order=Order,append=true);//,bin=Bin);
	}
}

IFMACRO(prob,"Smago")
ini(VhGP1dc,GradX)
ini(VhGP1dc,GradY)
ini(VhGP1dc,GradZ)
macrogradinter(VhG,matrixD);
ini(VhGP2,w0)
VhGP1dc gradw0;
write("Output.txt","Reading the EIM...",1,1);
include "../auxiliary/auxEIMsta.idp";
readEIM;
real[int,int][int] gradbaseVel(M);real[int][int] auxgrad(M);
{real[int,int] aux(dimension^2,Nv);aux=0;for(int s=0;s<M;s++)gradbaseVel[s]=aux(0:dimension^2-1,0:Nv-1);}
for(int ii=0;ii<Nv;ii++)
{
	ini(VhGP2,auxbase);
	VeltoP2(VhG,baseVel[ii],auxbase);
	gradEIM(auxbase,auxgrad,EIMx,Grad);
	for(int ss=0;ss<M;ss++)gradbaseVel[ss](:,ii)=auxgrad[ss];
}
real[int][int] gradG(M);
gradEIM(GP2,gradG,EIMx,Grad);
{ifstream read("../solutions/txt/nut.txt");
read >> nut[];}
// plot(nut,value=1,fill=1);
write("Output.txt","Reading the RBF...",1,1);
readRBF;
include "../auxiliary/betas.idp";
real etamax,gammamax,phimax,phimin,rhoT;
write("Output.txt","Computing the inyection constant...",1,1);
{
	ifstream aux("../offline/CS.txt");
	aux >> CSobolev;
}
write("Output.txt", " - Sobolev constant: " + CSobolev,1,1);
real tau,delta;
ENDIFMACRO


write("Output.txt","initializing Reduced Matrixes..."+N,1,1);
initialization(StoN,NSN,SmaN,N);
IFMACRO(prob,"Stokes"){readStoN(N,StoN);}ENDIFMACRO
IFMACRO(prob,"NS"){readStoN(N,StoN);readNSN(N,NSN);}ENDIFMACRO
IFMACRO(prob,"Smago"){readStoN(N,StoN);readNSN(N,NSN);readSmaN(N,SmaN);}ENDIFMACRO

matrix prodVP;
{
	varf a(defVP(u),defVP(v))=intN(Th)((1./Refijo+nut)*gradgrad(u,v)+uP*vP);
	prodVP=a(VhGVP,VhGVP);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
write("Output.txt","Computing the Reduced Basis problem...",1,1);
real[int] uNb(N);
VhGVP defVP(residual);
real[int,int] estimadorL(niw,nih),estimador(niw,nih),errorL2L(niw,nih),errorL2(niw,nih),errorH1L(niw,nih),errorH1(niw,nih),errorTL(niw,nih),errorT(niw,nih),errorLinfL(niw,nih),errorLinf(niw,nih);
estimadorL=0;estimador=0;errorL2L=0;errorL2=0;errorH1L=0;errorH1=0;errorTL=0;errorT=0;errorLinfL=0;errorLinf=0;
int cont=0;
pause;
for(int iw=0;iw<niw;iw++)
{
	for(int ih=0;ih<nih;ih++)
	{
		if(petsc==0 && mpirank==cont%mpisize)
		{
			cout << cont << endl;
			wh=[vw[iw],vh[ih]];
			uNb=0;
			BRSta(uBR,uNb,wh,StoN,NSN,SmaN);
			// -------------------------------------------------------------------------
			write("Output.txt","Computing the estimator...",1,1,mpirank);
			{
				residual[]=0;
				residualb(uBR,wh,residual);
				// plot(defVel(residual),value=1,wait=1);
				resnorm=normL2(residual[],prodVP);
			}
			// write("Output.txt","    - Residual= "+resnorm,1,1,mpirank);
			IFMACRO(prob,"Smago");
				include "../auxiliary/search.idp";
				funcgeo(wh);
				etamax=maxmax(etax[],etay[]);
				gammamax=maxmax(gammax[],gammay[]);
				phimax=maxmax(phix[],phiy[]);
				phimin=minmin(phix[],phiy[]);
				rhoT=2.*etamax*CSobolev+(gammamax*sqrt(phimax)+3.*gammamax*phimax/sqrt(phimin))*CS^2*hTri[].max^(2-dimension/2);
				// cout << "rhoT=" << rhoT << endl;
				real betah=fbeta(RBFgamma,RBFmu,wh);
				// write("Output.txt","    - Beta_N("+wh[0]+","+wh[1]+"): "+betah,1,1);
				tau=4.*resnorm*rhoT/betah^2;
				delta=betah/(2.*rhoT)*(1.-sqrt(1.-tau));
				write("Output.txt","    - delta_N("+wh[0]+","+wh[1]+"): "+delta,1,1,mpirank);
			ENDIFMACRO
			estimadorL(iw,ih)=delta;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// {EFSta(uEF,wh);}
			{
				ifstream fileRe("../solutions/txt/SolEF"+prob+"NN"+NN+"w"+wh[0]+"h"+wh[1]+".txt");
				fileRe >> uEF[];
			}
			// -------------------------------------------------------------------------
			write("Output.txt","Computing the exact error between FE and RB solutions...",1,1);
			VhGVP defVP(exacterror);
			exacterror[]=uEF[]-uBR[];
			// plot(defVel(uEF),value=1,cmm="EF vel",wait=0);
		// 	plot(defVel(uBR),value=1,cmm="BR vel",wait=0);
		// 	plot(defVel(exacterror),value=1,cmm="Error vel");
		// 	plot(exacterrorP,value=1,fill=1,cmm="Error pres");
			matrixprodL2(prodL2); matrixprodH1(prodH1); matrixprodVP(prodVP);
			real errornormL2=normL2(exacterror[],prodL2);
			real errornormH1=normL2(exacterror[],prodH1);
			real errornormT=normL2(exacterror[],prodVP);
			exacterror[]=abs(exacterror[]);
			real errornormLinf=exacterror[].max;
			errorL2L(iw,ih)=errornormL2;
			errorH1L(iw,ih)=errornormH1;
			errorTL(iw,ih)=errornormT;
			errorLinfL(iw,ih)=errornormLinf;

			// write("Output.txt", "L2 error="+errornormL2,1,1);
			// write("Output.txt", "H1 error="+errornormH1,1,1);
			write("Output.txt", "    - normT("+wh[0]+","+wh[1]+"): "+errornormT,1,1,mpirank);
			// write("Output.txt", "Linf error="+errornormLinf,1,1);
		}
		cont++;
	}
}
pause;
mpiAllReduce(estimadorL,estimador,mpiCommWorld,mpiSUM);
mpiAllReduce(errorL2L,errorL2,mpiCommWorld,mpiSUM);
mpiAllReduce(errorH1L,errorH1,mpiCommWorld,mpiSUM);
mpiAllReduce(errorTL,errorT,mpiCommWorld,mpiSUM);
mpiAllReduce(errorLinfL,errorLinf,mpiCommWorld,mpiSUM);
pause;
write("estimador.txt", estimador,0,0);
write("errorL2.txt", errorL2,0,0);
write("errorH1.txt", errorH1,0,0);
write("errorT.txt", errorT,0,0);
write("errorLinf.txt", errorLinf,0,0);

write("Output.txt","Done.",1,1);

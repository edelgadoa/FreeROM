include "../auxiliary/powermethod.idp";
matrix T,Zu;
T=prodV;
{
	varf a(defVel(u),defVel(v))=BC(u,cero);
	matrix BCmatrix=a(VhGVel,VhGVel);
	T=T+BCmatrix;
}
macro normsup(vh) intN(Th)(vh^2)//EOM
real CSerror=10,CSeps=1.e-5;

real rhok0=20,rhok1;
//func funcion=sin(pi*x)*sin(pi*y);
wh=[wref,href];
pause;
VhGVP defVP(uEF);
EFSta(uEF,wh);
pause;
ini(VhGP2,u0);
VhGP2 zuk;
equ(u0,uEF);
// Fix point
for(int ir=0;ir<1000 && CSerror>CSeps;ir++)
{
	zuk=uporv(u0,u0);
	zuk[]/=sqrt(intN(Th)(zuk^2));
	// {real normL2=intN(Th)(zuk^2);
	// cout<<"norm u: "<<normL2<<endl;} // Debe ser parecido a 1

	varf prodzu(defVel(u),defVel(v))=intN(Th)(zuk*uporv(u,v))
									// +BC(u,cero)
		;
	Zu=prodzu(VhGVel,VhGVel);
	real[int] autovec = powermethod(Zu,T);
	rhok1=autovec(0);
	u0[]=autovec(1:autovec.n-1);
	// plot(defVel(u0),value=1,wait=1);
	CSerror=abs((rhok1-rhok0)/rhok1);
	cout << "PM: " << CSerror<< endl;
	rhok0=rhok1;
}
CSobolev=rhok1;

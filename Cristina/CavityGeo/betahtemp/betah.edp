include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
IFMACRO(prob,"Stokes")include "../auxiliary/EFStokes.idp";include "../auxiliary/BRStokes.idp";ENDIFMACRO
IFMACRO(prob,"NS")include "../auxiliary/EFNS.idp";include "../auxiliary/BRNS.idp";ENDIFMACRO
IFMACRO(prob,"Smago")include "../auxiliary/EFSmago.idp";include "../auxiliary/BRSmago.idp";ENDIFMACRO
include "../auxiliary/powermethod.idp";

infoparam;

write("Output.txt","Starting the betah computation...",0,0);
// nih=niw;
real RBFnih=nih; // numero inicial de puntos de interpolacion
real RBFniw=niw; // numero inicial de puntos de interpolacion
real RBFnihfina=RBFnih*3; // numero maximo de puntos de interpolacion
real RBFniwfina=RBFniw*3; // numero maximo de puntos de interpolacion
int RBFnimax=RBFnihfina*RBFniwfina;
int RBFcont=0;
real[int] betaILocal(RBFnimax+1),betaI(RBFnimax+1); //vector donde guardo los valores de beta de los ptos de interpolacion
betaILocal=0;betaI=0;
real[int] gamma(RBFnimax+numparam+1); //vector donde guardo los coeficientes del RBF
real RBFeps=1.e-4; // test de para para el mÃ©todo de la potencia

wh=[wref,href];
readTh(NN,wh);
write("Output.txt","Reading the lift...",1,1);
readlift(NN,wh);
readlifttemp(NN,wh);
omegas(omega,wh);
readparameters(whSta);

write("Output.txt","Reading the RB...",1,1);
int Nv,Np,N;
{ifstream read("../results/basisVel.txt");read >> Nv;}
VhGVel[int] defVel(baseVel)(Nv);
{ifstream read("../results/basisVel.txt");read >> Nv;
for(int s=0;s<Nv;s++)read >> baseVel[s][];}
{ifstream read("../results/basisPres.txt");read >> Np;}
VhGP1[int] basePres(Np);
{ifstream read("../results/basisPres.txt");read >> Np;
for(int s=0;s<Np;s++)read >> basePres[s][];}
N=Np+Nv;

IFMACRO(prob,"Smago")
VhGP1dc nut;
ini(VhGP1dc,GradX)
ini(VhGP1dc,GradY)
ini(VhGP1dc,GradZ)
macrogradinter(VhG,matrixD);
ini(VhGP2,w0)
VhGP1dc gradw0;
write("Output.txt","Reading the EIM...",1,1);
include "../auxiliary/auxEIMsta.idp";
readEIM;
real[int,int][int] gradbaseVel(M);real[int][int] auxgrad(M);
{real[int,int] aux(dimension^2,Nv);aux=0;for(int s=0;s<M;s++)gradbaseVel[s]=aux(0:dimension^2-1,0:Nv-1);}
for(int ii=0;ii<Nv;ii++)
{
	ini(VhGP2,auxbase);
	VeltoP2(VhG,baseVel[ii],auxbase);
	gradEIM(auxbase,auxgrad,EIMx,Grad);
	for(int ss=0;ss<M;ss++)gradbaseVel[ss](:,ii)=auxgrad[ss];
}
real[int][int] gradG(M);
gradEIM(GP2,gradG,EIMx,Grad);
{ifstream read("../solutions/txt/nut.txt");
read >> nut[];}
ENDIFMACRO

write("Output.txt","initializing Reduced Matrixes..."+N,1,1);
initialization(StoN,NSN,SmaN,N);
IFMACRO(prob,"Stokes"){readStoN(N,StoN);}ENDIFMACRO
IFMACRO(prob,"NS"){readStoN(N,StoN);readNSN(N,NSN);}ENDIFMACRO
IFMACRO(prob,"Smago"){readStoN(N,StoN);readNSN(N,NSN);readSmaN(N,SmaN);}ENDIFMACRO

// plot(nut,value=1,fill=1);
real[int] RBFvh(RBFnih),RBFvw(RBFniw);
real[int] RBFvhfina(RBFnihfina),RBFvwfina(RBFniwfina);
real[int,int] RBFvwh(numparam,RBFnimax),RBFvwhfina(numparam,RBFnihfina*RBFniwfina);
RBFvh=0;RBFvw=0;RBFvwhfina=0;RBFvwh=0;
for (int i=0;i<RBFnih;i++)RBFvh(i)=hmin+i*(hmax-hmin)/(RBFnih-1.);
for (int i=0;i<RBFniw;i++)RBFvw(i)=wmin+i*(wmax-wmin)/(RBFniw-1.);
for (int i=0;i<RBFnihfina;i++)RBFvhfina(i)=hmin+i*(hmax-hmin)/(RBFnihfina-1.);
for (int i=0;i<RBFniwfina;i++)RBFvwfina(i)=wmin+i*(wmax-wmin)/(RBFniwfina-1.);

write("Output.txt","w=",1,1);
write("Output.txt",RBFvw,1,1);
write("Output.txt","h=",1,1);
write("Output.txt",RBFvh,1,1);

int cont=0;
for (int i=0;i<RBFniwfina;i++){for(int j=0;j<RBFnihfina;j++){RBFvwhfina(0:numparam-1,cont)=[RBFvwfina(i),RBFvhfina(j)];cont++;}}
cont=0;
for (int i=0;i<RBFniw;i++){for(int j=0;j<RBFnih;j++){RBFvwh(0:numparam-1,cont)=[RBFvw(i),RBFvh(j)];cont++;}}
RBFcont=cont;

pause;
if(1)
{
	write("Output.txt","Computing Bh...",1,1);
	cont = 0;
	real lambdamin;
	for(int iw=0; iw<RBFniw; iw++)
	{
		for(int ih=0; ih<RBFnih; ih++)
		{
			if(mpirank==cont%mpisize)
			{
				wh=[RBFvw(iw),RBFvh(ih)];
				// wh=[wref,href];
				//write("Output.txt"," - w="+wh[0]+", h="+wh[1],1,1,mpirank);
				include "./Bhcompute.idp";
				betaILocal(cont)=lambdamin;
				write("Output.txt","--------------------- betah("+wh[0]+","+wh[1]+") = " +betaILocal(cont)+"----------------------",1,1,mpirank);
			}
			cont++;
		}
	}
	pause;
	mpiAllReduce(betaILocal,betaI,mpiCommWorld,mpiSUM);
	pause;
	write("./results/betaIk.txt",betaI(0:RBFcont-1),0,0);
	write("./results/vparam.txt",RBFvwh(0:numparam-1,0:RBFcont-1),0,0);
}
else
{
	ifstream aux("./results/betaIk.txt");
	real[int] aux1(RBFcont);
	aux >> aux1;
	betaI(0:RBFcont-1)=aux1;
}
cout << betaI(0:RBFcont-1) << endl;
include "./RBF.idp";
write("Output.txt","Writing the results...",1,1);
real [int] gammaf=gamma(0:RBFcont+numparam);
real [int,int] RBFvwhIf=RBFvwh(0:numparam-1,0:RBFcont-1);
real [int] betaIf=betaI(0:RBFcont-1);
write("./results/gammaI.txt",gammaf,0,0);
write("./results/vparam.txt",RBFvwhIf,0,0);
write("./results/betamuI.txt",betaIf,0,0);
write("./results/betaTSmago.txt",Betak,0,0);
write("Output.txt","Done",1,1);

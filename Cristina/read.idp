///////////////////////////////////////////////////////////
// Archivo auxiliar para la lectura de archivos txt
// Funciones dependiendo del tipo de lectura:
// - readscalar
// - readvector
// - readmatrix
// - readsparse
// - readtensor
// Input:
// - filename: nombre del archivo en string con extension
// - type: string, int, real, complex
// - result: nombre de variable final
// - show: 1 para mostrar por pantalla, 0 cc
///////////////////////////////////////////////////////////

macro readscalar(filename,type,result,show)
type result;
{
	ifstream file(filename);
	file >> result;
	if(show==1)cout << result << endl;
}
//
NewMacro readvector(filename,type,result,show)
int result#n; // necesitamos definir esta variable pero que no se repita en el codigo
{
	ifstream file(filename);
	file >> result#n;
}
type [int] result(result#n);
{
	ifstream file(filename);
	file >> result;
	if(show==1)cout << result << endl;
}
EndMacro

NewMacro readmatrix(filename,type,result,show)
int result#n,result#m;
{
	ifstream file(filename);
	file >> result#n;
	file >> result#m;
}
type[int,int] result(result#n,result#m);
{
	ifstream file(filename);
	file >> result;
	if(show==1)cout << result << endl;
}
EndMacro

NewMacro readsparse(filename,type,result,show)
matrix <type> result;
{
	ifstream file(filename);
	file >> result;
	if(show==1)cout << result << endl;
}
EndMacro

NewMacro readtensor(filename,type,result,show)
int result#s,result#n,result#m;
{
	ifstream file(filename);
	file >> result#s;
	file >> result#n;
	file >> result#m;
}
type[int,int][int] result(result#s);
{
	type[int,int] result#aux(result#n,result#m);
	ifstream file(filename);
	file >> result#s;
	for(int i=0;i<result#s;i++)
	{
		file >> result#aux;
		result[i]=result#aux(0:result#n-1,0:result#m-1);
	}
	if(show==1)cout << result << endl;
}
EndMacro
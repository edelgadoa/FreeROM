include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/fourier.idp";

infoparam;
readTh(NN);

// plot(Th);
write("Output.txt","Starting...",0,1);
VhGP1 <complex> ZZ,zz,ZZY,ZZ2,err;
int cont=0;
real module;
for(int k=-NN/2;k<=NN/2;k++)
{
	for(int l=-NN/2;l<=NN/2;l++)
	{
        for(int m=-NN/2;m<=NN/2;m++)
        {
            module=sqrt(k^2+l^2+m^2);
            if(sqrt(module)<1)
            {
                ZZ[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)]=0.;
            }
            else
            {
                ZZ[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)]=module^(-(alpha+2)/2);
                // The exponent is -(alpha+dim-1)/2, dim-1 is the dimensions "added by the integral"
            }
        }
		
	}
}
zz[]=DFFT3d(ZZ[],1,NN/2);
zz[]/=zz[].max;

VhGP1 <complex> u0,u0Y,u0Z,u0P;
u0P[]=0;
u0=zz;
plot(u0,value=1,fill=1,wait=1);
u0Y=zz(y,z,x);
// plot(u0Y,value=1,fill=1,wait=1);
u0Z=zz(z,x,y);
//plot(u0Z,value=1,fill=1,wait=1);

// Computation of the energy of each node
VhGP1 <complex> uh0,uh0Y,uh0Z;
uh0[] = DFFT3d(u0[],-1,NN/2);
plot(uh0,wait=1);
real[int] energyhat(u0.n);

for(int ii=0;ii<energyhat.n;ii++){
    energyhat[ii]=(uporu(uh0[][ii]))/2.; // +uporu(u0Z[][ii]))/2.; // no hay que sumar y dividir ya que se irÃ­an
}

int LN = sqrt(3./4)*NN;

real[int] energykbycrowns(LN+1);energykbycrowns=0;
int l;
for(int k1=-NN/2;k1<=NN/2;k1++)
{
    for(int k2=-NN/2;k2<=NN/2;k2++)
    {
        for(int k3=-NN/2;k3<=NN/2;k3++)
        {
            module=sqrt(k1^2+k2^2+k3^2);
            l=module;
            energykbycrowns[l]+=energyhat[(k1+NN/2)+(NN+1)*(k2+NN/2)+(NN+1)^2*(k3+NN/2)];
        }
    }
}

ofstream file("EnergyNN"+NN+".txt");
for(int ii=0; ii<LN+1; ii++){
    file << energykbycrowns(ii) << endl;
}
cout << "HOLA" << endl;


complex[int,int] AA = matrixDFFT(-1,NN/2);
complex[int] wvec = vectorDFFT(-1,NN/2);


ofstream fileM("MatrixFT.txt");
fileM << AA << endl; 
ofstream fileV("VectorFT.txt");
fileV << wvec << endl;
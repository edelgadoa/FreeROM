// A try on the substraction of the boundary conditions

// Miscelaneous
load "dfft"
load "msh3" 
load "iovtk"

func complex conjugate(complex v){
	complex result=real(v)-1i*imag(v);
	return result;
}

func real uporu(complex & v){
	complex vcon=conjugate(v);
	real result=real(v*vcon);
	return result;
}

macro Grad(u) [dx(u),dy(u)]// EOM
macro div(u1,u2) (dx(u1)+dy(u2)) //EOM

func CCo = (x+1)*(1-x); // Condiciones de contorno

macro ugradvw(ux,uy,vx,vy,wx,wy) ([[ux,uy]'*[dx(vx),dy(vx)],
						[ux,uy]'*[dx(vy),dy(vy)]]'*[wx,wy])//EOM
macro antisimetric(ux,uy,vx,vy,wx,wy)(0.5*(ugradvw(ux,uy,vx,vy,wx,wy)-ugradvw(ux,uy,wx,wy,vx,vy))) // EOM
real CS = 0.18;
real Re = 1.e3;

///////////////////////////////////////////////////////////////////////////////
// Definition of the domain
int mexp = 4;
int NN = 2^mexp;
real length2 = 1;
mesh Th = square(NN,NN,[x*2*length2-length2, y*2*length2-length2]); // Cube with center in the origin
// Labels of the cube are 1: South 2: East 3: North 4: West 5: Floor 6: Top
// plot(Th);

///////////////////////////////////////////////////////////////////////////////
// We solve a Stokes problem with boundary conditions equal to the value of u
int m = NN;
mesh ThStokes = square(m,m,[x*2*length2-length2, y*2*length2-length2]); // Cube with center in the origin

// Fespace
fespace Uh(ThStokes, P2);
Uh wxSto, wySto, vxSto, vySto;
fespace Ph(ThStokes, P1);
Ph pSto, qSto;

solve stokes([wxSto, wySto, pSto], [vxSto, vySto, qSto], solver=sparsesolver)
  = int2d(ThStokes,qforder=3)(
        (Grad(wxSto)'*Grad(vxSto) +  Grad(wySto)'*Grad(vySto))*1./1e6 //)';
		       - div(wxSto,wySto)*qSto - div(vxSto,vySto)*pSto + 1e-10*qSto*pSto 
  )
  + on(1, 2, 3, wxSto=0, wySto=0)
  + on(4, wxSto=CCo, wySto=0)
;
real memused = storageused();
real memtotal = storagetotal();
cout << "memused " << memused/(1024^2) << endl;
cout << "memtotal " << memtotal/(1024^2) << endl;
/*

///////////////////////////////////////////////////////////////////////////////
// Definition of the initial condition in the frequency space
fespace VhP1(Th,P1);
VhP1<complex> ZZ,zz;

real alpha = 5./3; // Kolmogorov law
real module;
for(int k=-NN/2;k<=NN/2;k++)
{
	for(int l=-NN/2;l<=NN/2;l++)
	{
        for(int m=-NN/2;m<=NN/2;m++)
        {
            module=sqrt(k^2+l^2+m^2);
            if(sqrt(module)<1)
            {
                ZZ[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)]=0.;
            }
            else
            {
                ZZ[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)]=module^(-(alpha+2)/2);
                // The exponent is -(alpha+dim-1)/2, dim-1 is the dimensions "added by the integral"
            }
        }
		
	}
}

///////////////////////////////////////////////////////////////////////////////
// Apply the Fourier Transform to have the initial condition in the physical space
zz[]=dfft(ZZ[],NN+1,+1);
zz[]/=zz[].max; // Normalize
VhP1 uPx, uPy, uPz;
uPx = real(zz);
uPy = real(zz(y,z,x));
uPz = real(zz(z,x,y));
// plot([uPx,uPy,uPz],value=1,fill=1,wait=1); // Plot to see the velocity profile
int[int] Order = [1,1,1];
savevtk("ic.vtu", Th, [uPx,uPy,uPz], order=Order);	


///////////////////////////////////////////////////////////////////////////////
// We calculate the energy spectrum to check if we get the k-5/3 profile
VhP1 <complex> uhat;
uhat[]=dfft(zz[],NN+1,-1);
uhat[]*=1/sqrt(uhat.n); // Normalizar la transformada

// Computation of the energy of each node
real[int] energyhat(uhat.n);
for(int ii=0;ii<energyhat.n;ii++){
    energyhat[ii]=uporu(uhat[][ii]); // no hay que sumar y dividir ya que se irían
}

int LN = sqrt(3./4)*NN;

real[int] energykbycrowns(LN+1);energykbycrowns=0;
int l;
for(int k1=-NN/2;k1<=NN/2;k1++)
{
    for(int k2=-NN/2;k2<=NN/2;k2++)
    {
        for(int k3=-NN/2;k3<=NN/2;k3++)
        {
            module=sqrt(k1^2+k2^2+k3^2);
            l=module;
            energykbycrowns[l]+=energyhat[(k1+NN/2)+(NN+1)*(k2+NN/2)+(NN+1)^2*(k3+NN/2)];
        }
    }
}

ofstream file("EnergyNN"+NN+".txt");
for(int ii=0; ii<LN+1; ii++){
    file << energykbycrowns(ii) << endl;
}


///////////////////////////////////////////////////////////////////////////////
// We solve Smagorinsky 
real dt = 1;
int ms = NN;
mesh3 ThSmago = square(ms,ms,[x*2*length2-length2, y*2*length2-length2]); // Cube with center in the origin

fespace USh(ThSmago, P2);
USh wsx, wsy, vsx, vsy;

matrix ISmag = interpolate(USh, VhP1);
USh w0x, w0y;
w0x[] = ISmag*uPx[];
w0y[] = ISmag*uPy[];

USh hTri = hTriangle;
USh gradw0;
gradw0 = sqrt(dx(wxSto)^2+dy(wxSto)^2+dz(wxSto)^2+dx(wySto)^2+dy(wySto)^2+dz(wySto)^2+dx(wzSto)^2+dy(wzSto)^2+dz(wzSto)^2);
fespace PSh(ThSmago, P1);
PSh ps, qs;

real T = 1;
for(real t=0; t<T; t+=dt){

solve smago([wsx, wsy, ps], [vsx, vsy, qs],solver = sparsesolver)
    = int3d(ThSmago,qforder=3)(
        1./dt*(wsx*vsx+wsy*vsy)
        + 1./Re*(Grad(wsx)'*Grad(vsx)+Grad(wsy)'*Grad(vsy)) //)';
		+ div(wsx,wsy)*qs - div(vsx,vsy)*ps + 1e-10*qs*ps 
        + antisimetric(w0x,w0y,wsx,wsy,vsx,vsy)
        + antisimetric(wsx,wsy,wxSto,wySto,vsx,vsy)
        + antisimetric(wxSto,wySto,wsx,wsy,vsx,vsy)
        + (CS*hTri)^2*gradw0*(Grad(wsx)'*Grad(vsx)+Grad(wsy)'*Grad(vsy))
    )
    + int3d(ThSmago,qforder=3)(
        - 1./dt*(w0x*vsx+w0y*vsy)
        + 1./Re*(Grad(wxSto)'*Grad(vsx)+Grad(wySto)'*Grad(vsy)) //)';
        + qs*div(wxSto,wySto) 
        + antisimetric(wxSto,wySto,wxSto,wySto,vsx,vsy)
        + (CS*hTri)^2*gradw0*(Grad(wxSto)'*Grad(vsx)+Grad(wySto)'*Grad(vsy))
    )
    + on(1, 2, 3, 4, wsx=0, wsy=0, wsz=0)
;

plot(ps,value=1);
USh modw;
modw = sqrt(wsx^2+wsy^2);
// plot([wsx,wsy],wait=1);
plot(modw,value=1);

// Actualización
w0x = wsx;
w0y = wsy;
}

int kmodes = 5;
int akdim = (2*kmodes+1)^3;
complex[int,int] ak(akdim);
func fexp = 0.;
for(int kk1=-kmodes; kk1<=kmodes; kk1++){
    for(int kk2=-kmodes; kk2<=kmodes; kk2++){
            fexp = exp(-1i*(kk1*x+kk2*y));
            ak(kk1+kmodes,kk2+kmodes) = int3d(Th)(wsx*fexp);
    }
}

///////////////////////////////////////////////////////////////////////////////
/*
matrix IReturn = interpolate(VhP1, USh);
VhP1 uSx, uSy, uSz;
uSx[] = IReturn*wsx[];
uSy[] = IReturn*wsy[];
uSz[] = IReturn*wsz[];

VhP1 <complex> ux,uy,uz;
ux = 0; ux = ux + uSx;
uy = 0; uy = uy + uSy;
uz = 0; uz = uz + uSz;

// We compute its spectrum
VhP1 <complex> uhatx, uhaty, uhatz;
uhatx[]=dfft(ux[],NN+1,-1);
uhatx[]*=1/sqrt(uhatx.n); // Normalizar la transformada
uhaty[]=dfft(uy[],NN+1,-1);
uhaty[]*=1/sqrt(uhaty.n); // Normalizar la transformada
uhatz[]=dfft(uz[],NN+1,-1);
uhatz[]*=1/sqrt(uhatz.n); // Normalizar la transformada

VhP1 uhx, uhy, uhz;
uhx = real(uhatx);
uhy = real(uhaty);
uhz = real(uhatz);
// plot(uhz,fill=true,wait=1);
// savevtk("Freg.vtu", Th, [uhx, uhy, uhz], order=Order);	

// Computation of the energy of each node
energyhat=0;
for(int ii=0;ii<energyhat.n;ii++){
    energyhat[ii]=uporu(uhatx[][ii])+uporu(uhaty[][ii])+uporu(uhatz[][ii])/3.;
}

LN = sqrt(3./4)*NN;

energykbycrowns=0;

for(int k1=-NN/2+1;k1<=NN/2-1;k1++)
{
    for(int k2=-NN/2+1;k2<=NN/2-1;k2++)
    {
        for(int k3=-NN/2+1;k3<=NN/2-1;k3++)
        {
            module=sqrt(k1^2+k2^2+k3^2);
            l=module;
            energykbycrowns[l]+=energyhat[(k1+NN/2)+(NN+1)*(k2+NN/2)+(NN+1)^2*(k3+NN/2)];
        }
    }
}

ofstream fileR("EnergyNN"+NN+"_ConRegular.txt");
for(int ii=0; ii<LN+1; ii++){
    fileR << energykbycrowns(ii) << endl;
}


///////////////////////////////////////////////////////////////////////////////
matrix I = interpolate(VhP1, Uh);
VhP1 wux, wuy, wuz;
wux[] = I*wxSto[];
wuy[] = I*wySto[];
wuz[] = I*wzSto[];

VhP1 <complex> uux, uuy, uuz;
uux = ux+wux;
uuy = uy+wuy;
uuz = uz+wuz;

///////////////////////////////////////////////////////////////////////////////
// We compute its spectrum
uhatx[]=dfft(uux[],NN+1,-1);
uhatx[]*=1/sqrt(uhatx.n); // Normalizar la transformada
uhaty[]=dfft(uuy[],NN+1,-1);
uhaty[]*=1/sqrt(uhaty.n); // Normalizar la transformada
uhatz[]=dfft(uuz[],NN+1,-1);
uhatz[]*=1/sqrt(uhatz.n); // Normalizar la transformada

uhx = real(uhatx);
uhy = real(uhaty);
uhz = real(uhatz);

// Computation of the energy of each node
energyhat=0;
for(int ii=0;ii<energyhat.n;ii++){
    energyhat[ii]=uporu(uhatx[][ii])+uporu(uhaty[][ii])+uporu(uhatz[][ii])/3.;
}

LN = sqrt(3./4)*NN;
energykbycrowns=0;
for(int k1=-NN/2+1;k1<=NN/2-1;k1++)
{
    for(int k2=-NN/2+1;k2<=NN/2-1;k2++)
    {
        for(int k3=-NN/2+1;k3<=NN/2-1;k3++)
        {
            module=sqrt(k1^2+k2^2+k3^2);
            l=module;
            energykbycrowns[l]+=energyhat[(k1+NN/2)+(NN+1)*(k2+NN/2)+(NN+1)^2*(k3+NN/2)];
        }
    }
}

ofstream fileS("EnergyNN"+NN+"_ConRegularSustraida.txt");
for(int ii=0; ii<LN+1; ii++){
    fileS << energykbycrowns(ii) << endl;
}
*/
// FFT prueba en 3D
///////////////////////////////////////////////////////////////////////////////
load "msh3";
load "dfft";

///////////////////////////////////////////////////////////////////////////////
// Definition of the domain
int mexp = 5;
int NN = 2^mexp;
real length2 = 1;
mesh Th = square(NN,NN,[x*2*length2-length2, y*2*length2-length2]); // square with center in the origin
// Labels of the cube are 1: South 2: East 3: North 4: West 5: Floor 6: Top

///////////////////////////////////////////////////////////////////////////////
// Definicion de la función test
fespace Vh(Th,P1);
Vh<complex> uc, ukc;
Vh u, uk;
func f = exp(-(x^2+y^2)/2);
uc = f;
u = real(uc);
plot(u,wait = true);


///////////////////////////////////////////////////////////////////////////////
// Paso de vector a matriz 3D
// Realmente es una matriz 2D con más columnas
complex[int,int] Uc(NN+1,NN+1);
complex meanUc=0;
for(int k=-NN/2;k<=NN/2;k++){
	for(int l=-NN/2;l<=NN/2;l++){
        Uc(k+NN/2,l+NN/2) = uc[][(k+NN/2)+(NN+1)*(l+NN/2)];	
	}
}

// ofstream file("Uc.txt"); file << Uc << endl;

///////////////////////////////////////////////////////////////////////////////
// Aplicacion de la transformada
// La aplicación directa de la transformada no es posible en FreeFem++
complex w = exp(-2*pi*1i/(NN+1));
complex[int,int] Ukc(NN+1,NN+1);
Ukc = 0.;

for(int k=-NN/2;k<=NN/2;k++){
	for(int l=-NN/2;l<=NN/2;l++){ 
        cout << "Para k1=" << k << ", k2=" << l << endl;
        for(int kk=-NN/2;kk<=NN/2;kk++){
            for(int ll=-NN/2;ll<=NN/2;ll++){
                cout << "(kk,ll)=(" << kk << "," << ll << "), " << w^(k*kk+l*ll) << endl;
                Ukc(k+NN/2,l+NN/2) += w^(k*kk+l*ll)*Uc(kk+NN/2,ll+NN/2);	
            }
        }
        cout << "Ukc(" << k+NN/2 << "," << l+NN/2 << ")=" << Ukc(k+NN/2,l+NN/2);
	}
}
// Ukc /= (NN+1)^2;

// ofstream filek("Ukc.txt"); filek << Ukc << endl;


for(int k=-NN/2;k<=NN/2;k++){
	for(int l=-NN/2;l<=NN/2;l++){
        ukc[][(k+NN/2)+(NN+1)*(l+NN/2)] = Ukc(k+NN/2,l+NN/2);
	}
}


uk = real(ukc);
cout << uk[].max << endl;
plot(uk,wait=1);

/*
Vh ek;
ek = uk-u;
plot(ek,wait=1);
*/
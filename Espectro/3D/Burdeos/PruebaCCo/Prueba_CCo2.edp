// A try on the substraction of the boundary conditions

// Miscelaneous
load "dfft"
load "msh3" 
load "iovtk"

func complex conjugate(complex v){
	complex result=real(v)-1i*imag(v);
	return result;
}

func real uporu(complex & v){
	complex vcon=conjugate(v);
	real result=real(v*vcon);
	return result;
}

macro grad(u)[dx(u),dy(u),dy(u)] // EOM


///////////////////////////////////////////////////////////////////////////////
// Definition of the domain
int mexp = 6;
int NN = 2^mexp;
real length2 = 1;
mesh3 Th = cube(NN,NN,NN,[x*2*length2-length2, y*2*length2-length2, z*2*length2-length2]); // Cube with center in the origin
// Labels of the cube are 1: South 2: East 3: North 4: West 5: Floor 6: Top
// plot(Th);

///////////////////////////////////////////////////////////////////////////////
// Definition of the initial condition in the frequency space
fespace VhP1(Th,P1);
VhP1<complex> ZZ,zz;

real alpha = 5./3; // Kolmogorov law
real module;
complex[int] vect((NN/2+1)^3);
for(int k=-NN/4;k<=NN/4;k++)
{
	for(int l=-NN/4;l<=NN/4;l++)
	{
        for(int m=-NN/4;m<=NN/4;m++)
        {
            module=sqrt(k^2+l^2+m^2);
            if(sqrt(module)<1)
            {
                vect[(k+NN/4)+(NN/2+1)*(l+NN/4)+(NN/2+1)^2*(m+NN/4)]=0.;
            }
            else
            {
                vect[(k+NN/4)+(NN/2+1)*(l+NN/4)+(NN/2+1)^2*(m+NN/4)] = module^(-(alpha+2)/2);
                // The exponent is -(alpha+dim-1)/2, dim-1 is the dimensions "added by the integral"
            }
        }
	}
}

// Computation of the energy of each node
real[int] energyhatp(vect.n);
for(int ii=0;ii<energyhatp.n;ii++){
    energyhatp[ii]=uporu(vect[ii]); // no hay que sumar y dividir ya que se irían
}

int LNp = sqrt(3./4)*NN;

real[int] energykbycrownsp(LNp+1);energykbycrownsp=0;
int lp;
for(int k1=-NN/4;k1<=NN/4;k1++)
{
    for(int k2=-NN/4;k2<=NN/4;k2++)
    {
        for(int k3=-NN/4;k3<=NN/4;k3++)
        {
            module=sqrt(k1^2+k2^2+k3^2);
            lp=module;
            energykbycrownsp[lp]+=energyhatp[(k1+NN/4)+(NN/2+1)*(k2+NN/4)+(NN/2+1)^2*(k3+NN/4)];
        }
    }
}

ofstream filep("EnergyNNp"+NN+".txt");
for(int ii=0; ii<LNp+1; ii++){
    filep << energykbycrownsp(ii) << endl;
}

VhP1 uuu;
uuu[] = 0;
for(int k=-NN/4;k<=NN/4;k++)
{
	for(int l=-NN/4;l<=NN/4;l++)
	{
        for(int m=-NN/4;m<=NN/4;m++)
        {
            module=sqrt(k^2+l^2+m^2);
            uuu[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)] = real(vect[(k+NN/4)+(NN/2+1)*(l+NN/4)+(NN/2+1)^2*(m+NN/4)]);
        }
	}
}
// plot(uuu,wait=1);

///////////////////////////////////////////////////////////////////////////////
// Apply the Fourier Transform to have the initial condition in the physical space
complex[int] vectfis((NN/2+1)^3);
vectfis=dfft(vect,NN/2+1,+1);
vectfis/=vectfis.max; // Normalize
VhP1 <complex> uup;
uup[]=0;
VhP1 uPx, uPy, uPz;

for(int k=-NN/4;k<=NN/4;k++)
{
	for(int l=-NN/4;l<=NN/4;l++)
	{
        for(int m=-NN/4;m<=NN/4;m++)
        {
            module=sqrt(k^2+l^2+m^2);
            uup[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)] = vectfis[(k+NN/4)+(NN/2+1)*(l+NN/4)+(NN/2+1)^2*(m+NN/4)];
        }
	}
}

uPx = real(uup);
uPy = real(uup(y,z,x));
uPz = real(uup(z,x,y));
// plot([uPx,uPy,uPz],value=1,fill=1,wait=1); // Plot to see the velocity profile
int[int] Order = [1,1,1];
savevtk("ic.vtu", Th, [uPx,uPy,uPz], order=Order);	

///////////////////////////////////////////////////////////////////////////////
// We calculate the energy spectrum to check if we get the k-5/3 profile
VhP1 <complex> uhat;
uhat[]=dfft(uup[],NN+1,-1);
uhat[]*=1/sqrt(uhat.n); // Normalizar la transformada

// Computation of the energy of each node
real[int] energyhat(uhat.n);
for(int ii=0;ii<energyhat.n;ii++){
    energyhat[ii]=uporu(uhat[][ii]); // no hay que sumar y dividir ya que se irían
}

int LN = sqrt(3./4)*NN;

real[int] energykbycrowns(LN+1);energykbycrowns=0;
int l;
for(int k1=-NN/2;k1<=NN/2;k1++)
{
    for(int k2=-NN/2;k2<=NN/2;k2++)
    {
        for(int k3=-NN/2;k3<=NN/2;k3++)
        {
            module=sqrt(k1^2+k2^2+k3^2);
            l=module;
            energykbycrowns[l]+=energyhat[(k1+NN/2)+(NN+1)*(k2+NN/2)+(NN+1)^2*(k3+NN/2)];
        }
    }
}

ofstream file("EnergyNN"+NN+".txt");
for(int ii=0; ii<LN+1; ii++){
    file << energykbycrowns(ii) << endl;
}
/*
///////////////////////////////////////////////////////////////////////////////
// Addition of a regular function

VhP1 <complex> uRx,uRy,uRz;

uRx = (z+1./2)*(x+1./2)*(1./2-x)*(1./2+y)*(1./2-y);
uRy = 0;
uRz = 0;
func g = 0*((1+x)*(1-x)*(1+y)*(1-y)*(1+z)*(1-z))^(1/20);

VhP1 <complex> ux,uy,uz;
ux = uRx+uPx;
uy = uRy+uPy;
uz = uRz+uPz;

ux = ux*g;

// We compute its spectrum
VhP1 <complex> uhatx, uhaty, uhatz;
uhatx[]=dfft(ux[],NN+1,-1);
uhatx[]*=1/sqrt(uhatx.n); // Normalizar la transformada
uhaty[]=dfft(uy[],NN+1,-1);
uhaty[]*=1/sqrt(uhaty.n); // Normalizar la transformada
uhatz[]=dfft(uz[],NN+1,-1);
uhatz[]*=1/sqrt(uhatz.n); // Normalizar la transformada

VhP1 uhx, uhy, uhz;
uhx = real(uhatx);
uhy = real(uhaty);
uhz = real(uhatz);
// plot(uhz,fill=true,wait=1);
// savevtk("Freg.vtu", Th, [uhx, uhy, uhz], order=Order);	

// Computation of the energy of each node
energyhat=0;
for(int ii=0;ii<energyhat.n;ii++){
    energyhat[ii]=uporu(uhatx[][ii])+uporu(uhaty[][ii])+uporu(uhatz[][ii])/3.;
}

LN = sqrt(3./4)*NN;

energykbycrowns=0;

for(int k1=-NN/2;k1<=NN/2;k1++)
{
    for(int k2=-NN/2;k2<=NN/2;k2++)
    {
        for(int k3=-NN/2;k3<=NN/2;k3++)
        {
            module=sqrt(k1^2+k2^2+k3^2);
            l=module;
            energykbycrowns[l]+=energyhat[(k1+NN/2)+(NN+1)*(k2+NN/2)+(NN+1)^2*(k3+NN/2)];
        }
    }
}

ofstream fileR("EnergyNN"+NN+"_ConRegular.txt");
for(int ii=0; ii<LN+1; ii++){
    fileR << energykbycrowns(ii) << endl;
}

/*
///////////////////////////////////////////////////////////////////////////////
// We solve a Stokes problem with boundary conditions equal to the value of u
VhP1 uCo;
uCo = real(u);

// Fespace
fespace Uh(Th, P2);
Uh wx, wy, wz, vx, vy, vz;
fespace Ph(Th, P1);
Ph p, pp;

solve stokes([wx, wy, wz, p], [vx, vy, vz, pp])
  = int2d(Th)(
        dx(wx)*dx(vx)+dy(wx)*dy(vx)+dz(wx)*dz(vx) +
        dx(wy)*dx(vy)+dy(wy)*dy(vy)+dz(wy)*dz(vy) + 
        dx(wz)*dx(vz)+dy(wz)*dy(vz)+dz(wz)*dz(vz) +
        dx(p)*vx+dy(p)*vy+dx(p)*vz +
        pp*(dx(wx)+dy(wy)+dz(wz))
        -1e-10*p*pp
  )
  + on(1, 2, 3, 4, 5, 6, wx=uCo, wy=uCo, wz=uCo)
  ;

///////////////////////////////////////////////////////////////////////////////

*/
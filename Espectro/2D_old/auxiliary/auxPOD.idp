NewMacro readsol(snaps,t0,tf,Re0,Ref)
{
        VhGVP defVP(usol);
        VhGVel defVel(usolVel);VhGP1 usolPres;
        int cont=0;
        matrix VPtou12,VPtou3;
        {
                int[int] cs2=[2];
                VPtou3 = interpolate(VhGP1,VhGVP,U2Vc=cs2);
        }
        {
                int[int] cs2=[0,1];
                VPtou12 = interpolate(VhGVel,VhGVP,U2Vc=cs2);
        }
        {
                VhGVP defVP(u0VP);
                if(T0>0)
                {
                        ifstream fileRe("../solutions"+esquema+"/txt/SolEF"+prob+"NN"+NN+"Reynold"+Refijo+"t"+T0+".txt");
                        fileRe >> u0VP[];
                }
                else
                {
                        readic(16,alpha);
                }
                usolVel[]=VPtou12*u0VP[];
                snapsVel(:,0)=usolVel[];
        }
        for(real Rey=Re0;Rey<Ref+dtRe/2;Rey+=dtRe)
        {
                // write("Output.txt"," - Reynold="+Rey,1,1);
                for(real t=t0;t<tf+dtsave/2;t+=dtsave)
                {
                        // write("Output.txt","   - t="+t,1,1);
                        {
                                ifstream fileRe("../solutions"+esquema+"/txt/SolEF"+prob+"NN"+NN+"Reynold"+Rey+"t"+t+".txt");
                                fileRe >> usol[];
                        }
                        usolVel[]=VPtou12*usol[];
                        usolPres[]=VPtou3*usol[];
                        snaps#Vel(:,cont+1)=usolVel[];
                        snaps#Pres(:,cont)=usolPres[];
                        cont++;
                }
        }
}
EndMacro
// ------------------------ FORMACION DE MATRIZ DE CORRELACIONES -------------------------
NewMacro matrixcorrelacion(snaps,C,prod)
{
	real[int,int] CL=C;
	C=0;CL=0;
	int contmc=0;
	real[int] auxii(snaps.n),auxjj(snaps.n);
	for(int ii=0;ii<C.n;ii++)
	{
		//for(int jj=ii;jj<C.m;jj++)
		//{
			if(mpirank==ii%mpisize)
			{
				real[int] aux=prod*snaps(:,ii);
				for(int jj=ii;jj<C.m;jj++)
				{
					CL(ii,jj) = snaps(:,jj)'*aux;
					if(ii!=jj)CL(jj,ii)=CL(ii,jj);
				}
			}
			contmc++;
		//}
	}
	pause;
	mpiAllReduce(CL,C,mpiCommWorld,mpiSUM);
	// C/=C.m;
	write("verify/correlation.txt",C,0,0);
}
EndMacro
// NewMacro matrixcorrelacion(snaps,C,prod)
// {
// 	real[int,int] CL=C;
// 	C=0;CL=0;
// 	int contmc=0;
// 	real[int] auxii(snaps.n),auxjj(snaps.n);
// 	for(int ii=0;ii<C.n;ii++)
// 	{
// 		real[int] aux=prod*snaps(:,ii);
// 		for(int jj=ii;jj<C.m;jj++)
// 		{
// 			if(mpirank==contmc%mpisize)
// 			{
// 				// for(int jj=ii;jj<C.m;jj++)
// 				// {
// 					CL(ii,jj) = snaps(:,jj)'*aux;//innerprod(snaps(:,jj),snaps(:,ii),prod);
// 					if(ii!=jj)CL(jj,ii)=CL(ii,jj);
// 				// }
// 			}
// 			contmc++;
// 		}
// 	}
// 	pause;
// 	mpiAllReduce(CL,C,mpiCommWorld,mpiSUM);
// 	C/=C.m;
// 	write("verify/correlation.txt",C,0,0);
// }
// EndMacro
// ----------------------------- CALCULO DE AUTOVALORES -----------------------------------
NewMacro eigenvaluescompute(C,autoval,autovect)
{
	autovect=0;
	autoval=0;
	real[int,int] I(C.n,C.m);I=0;
	for(int ii=0;ii<I.n;ii++)I(ii,ii)=1;
	// int k = dsygvd(C,I,autoval,autovect); // Cv=lambda*I*v
	// int k = dgesdd(C,autovect,autoval,I);
	//int k = ComputeEV(ns,C,5.e-16,autoval,autovect);
	int k = dsyev(C,autoval,autovect); // devuelve los autovalores en forma ascendente
	// write("Output.txt","    k: "+ k,1,1);
	// autoval*=C.m;
	// write("verify/autovalores"+C.m+".txt",autoval,0,1);
//	write("verify/autovectores"+C.m+".txt",autovect,0,0);
}
EndMacro
NewMacro howmanybasis(autoval,nPOD)
{
	if(0)
	{
		nPOD=autoval.n;
		for(int ii=autoval.n-1;ii>=0;ii--)
		{
			if(abs(autoval(ii))<epsPOD)
			{
				nPOD=autoval.n-ii;
				break;
			}
		}
		if(mpirank==0)cout << "    from " << autoval.n << " to " << nPOD <<" basis, with error=" << abs(autoval(autoval.n-nPOD)) << endl;
	}
	if(1)
	{
		nPOD=1;
		real[int] In(autoval.n);In=0;
		real[int] autovalsave=abs(autoval);
		real totalsum=autovalsave.sum;//autoval'*autoval;
		for(int ii=0;ii<In.n;ii++)
		{
			In(In.n-ii-1)=autovalsave.sum;//autoval'*autoval;
			autovalsave(ii)=0;
			// if(mpirank==0)cout << autovalsave << endl;
		}
		In/=totalsum;
		for(int ii=0;ii<In.n;ii++)
		{
			if(In(ii)>=(1.-epsPOD))
			{
				nPOD=ii+1;
				break;
			}
		}
		// write("verify/In.txt",In,0,1);
		// autoval=autovalsave;
		if(mpirank==0)cout << "    from " << autoval.n << " to " << nPOD <<" basis, with energy=" << In(nPOD-1) << endl;
	}
}
EndMacro
// -------------------- CONSTRUCCION DE LA BASE PARA EL POD -------------------------------
NewMacro baseconstrunction(snaps,autovect,autoval,base,nPOD)
{
	for(int ii=0; ii<nPOD; ii++)
	{
		base[ii][]=snaps*autovect(:,autovect.m-ii-1);
		base[ii][]/=sqrt(abs(autoval(autovect.m-ii-1)));
		// cout << ii << " ="<<autoval(autovect.m-ii-1) << endl;
	}
}
EndMacro

NewMacro POD(snaps,prod,base,nPOD,autoval)
real[int] autoval(snaps.m); // Vector de autovalores ordenados de menor a mayor
{
	write("Output.txt","    Starting the correlation matrix..." ,1,1);
	real[int,int] C(snaps.m,snaps.m);
	real time=mpiWtime();
	matrixcorrelacion(snaps,C,prod);
	time=mpiWtime()-time;
	write("Output.txt","    - time="+time,1,1);
	real[int,int] autovect(C.n,C.n); // Matriz que contendra los autovectores en columna
	write("Output.txt","    Eigenvalue computation...",1,1);	
	eigenvaluescompute(C,autoval,autovect);
	write("Output.txt","    Base construction...",1,1);
	howmanybasis(autoval,nPOD);
	baseconstrunction(snaps,autovect,autoval,base,nPOD);
	// cout << autovect << endl;
}
EndMacro

NewMacro PODN(snaps,prod,base,nPOD,autoval)
real[int] autoval(snaps.m); // Vector de autovalores ordenados de menor a mayor
{
	write("Output.txt","    Starting the correlation matrix..." ,1,1);
	real[int,int] C(snaps.m,snaps.m);
	real time=mpiWtime();
	matrixcorrelacion(snaps,C,prod);
	time=mpiWtime()-time;
	write("Output.txt","    - time="+time,1,1);
	real[int,int] autovect(C.n,C.n); // Matriz que contendra los autovectores en columna
	write("Output.txt","    Eigenvalue computation...",1,1);	
	eigenvaluescompute(C,autoval,autovect);
	write("Output.txt","    Base construction...",1,1);
	baseconstrunction(snaps,autovect,autoval,base,nPOD);
	// cout << autovect << endl;
}
EndMacro



//write("OutputPOD.txt","MatrixPOD: " + matrixPOD ,1,1);

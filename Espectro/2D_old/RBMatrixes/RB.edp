include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/macro_ddm.idp";
include "../auxiliary/auxPOD.idp";
IFMACRO(prob,"Stokes")include "../auxiliary/EFStokes.idp";include "../auxiliary/BRStokes.idp";ENDIFMACRO
IFMACRO(prob,"NS")include "../auxiliary/EFNS.idp";include "../auxiliary/BRNS.idp";ENDIFMACRO
IFMACRO(prob,"Smago")include "../auxiliary/EFSmago.idp";include "../auxiliary/BRSmago.idp";ENDIFMACRO

infoparam;
int Nv,Np,N;
//epsPOD=sqrt(epsPOD);//1.e-2;//epsPOD*=2;
write("Output.txt","Computing the RB matrixes with epsPOD="+epsPOD+" and  "+mpisize+" processors...",0,1);
{ifstream read("../POD/results/autovalVel.txt");read >> Nv;}
{ifstream read("../POD/results/autovalPres.txt");read >> Np;}
real[int] autovalVel(Nv),autovalPres(Np);
{ifstream read("../POD/results/autovalVel.txt");read >> autovalVel;}
{ifstream read("../POD/results/autovalPres.txt");read >> autovalPres;}
{ifstream read("../POD/results/basisVel.txt");read >> Nv;}
{ifstream read("../POD/results/basisPres.txt");read >> Np;}
N=Nv;

readTh(NN);
readparameters(ReSta);
VhGP1dc nut;
nut[]=0;
howmanybasis(autovalVel,Nv);
howmanybasis(autovalPres,Np);

VhGVel[int] defVel(baseVel)(Nv+Np);
VhGP1[int] basePres(Np);

write("Output.txt","Reading the RB...",1,1);
{ifstream read("../POD/results/basisVel.txt");read >> N;
for(int s=0;s<Nv;s++)
{
	read >> baseVel[s][];
	// plot(baseVel[s],value=1,fill=1,wait=1,cmm="i="+s);
}
}
write("Output.txt","Vel basis="+Nv,1,1);
{ifstream read("../POD/results/basisPres.txt");read >> N;
for(int s=0;s<Np;s++)read >> basePres[s][];}
write("Output.txt","Pres basis="+Np,1,1);
{ifstream read("../POD/results/basisSup.txt");read >> N;
for(int s=0;s<Np;s++)read >> baseVel[s+Nv][];}
// Nv+=Np;
N=2*Np+Nv;
// for(int s=0;s<Nv;s++)
// {
// 	plot(baseVel[s],value=1,fill=1,wait=1,cmm="S="+s);
// }
// for(int s=0;s<Np;s++)
// {
// 	plot(basePres[s],value=1,fill=1,wait=1,cmm="S="+s);
// }

write("Output.txt","Total basis="+N,1,1);

matrixprodV(prodV);matrixprodP(prodP);
if(GS)
{
	include "../auxiliary/ortho.idp";
	write("Output.txt","   Orthonormalization...",1,1);
	for(int i=0;i<Nv+Np;i++)ortho(baseVel,i+1,prodV);
	for(int i=0;i<Np;i++)ortho(basePres,i+1,prodP);
	normalization(baseVel,Nv+Np,prodV);
	normalization(basePres,Np,prodP);
	int[int] check=[1,1];
	orthocheck(Nv+Np,prodV,Np,prodP,check);
	if(check[0]==0)write("Output.txt","   Bad ortho Vel...",1,1);
	if(check[1]==0)write("Output.txt","   Bad ortho Pres...",1,1);
}


IFMACRO(prob,"Smago")
write("Output.txt","Reading the EIM...",1,1);
include "../auxiliary/auxEIMsta.idp";
readEIM;
ENDIFMACRO
write("Output.txt","   Initializing Reduced Matrixes...",1,1);
initialization(StoN,NSN,SmaN,N);
initialization(StoNL,NSNL,SmaNL,N);
write("Output.txt","   Building Reduced Matrixes...",1,1);
real time=mpiWtime();
matrixgeneration;
matrixBR(base);
bigtosmall(StoN,NSN,SmaN);
// if(1)
// {
// 	if(mpirank==0)
// 	{
// 		cout << StoNnu << endl;
// 		cout << StoNdiv << endl;
// 		cout << StoNpen<< endl;
// 		cout << NSNdt<< endl;
// 	}
// }
time=mpiWtime()-time;
write("Output.txt","    - time="+time,1,1);
IFMACRO(prob,"Stokes"){writeStoN(N,StoN);}ENDIFMACRO
IFMACRO(prob,"NS"){writeStoN(N,StoN);writeNSN(N,NSN);}ENDIFMACRO
IFMACRO(prob,"Smago"){writeStoN(N,StoN);writeNSN(N,NSN);writeSmaN(N,SmaN);}ENDIFMACRO
write("../results/basisVel"+N+".txt",Nv,0,0);
for(int it=0;it<Nv+Np;it++)write("../results/basisVel"+N+".txt",baseVel[it][],1,0);
write("../results/basisPres"+N+".txt",Np,0,0);
for(int it=0;it<Np;it++)write("../results/basisPres"+N+".txt",basePres[it][],1,0);
write("Output.txt","Done with N="+N+".",1,1);

include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/macro_ddm.idp";
include "../auxiliary/fourier.idp";

infoparam;

write("Output.txt","Computing the EF solutions with "+mpisize+" processors for Re=",0,1);
write("Output.txt",vRe,1,1);
readTh(NN);
// plot(Th);
VhGP1 uP1,uP1Y,gradXuP1,gradYuP1,gradXuP1Y,gradYuP1Y;
VhGVel defVel(u);
matrix VPtou1,VPtou2,GradXu1,GradYu1,GradXu2,GradYu2;
{
	int[int] cs2=[0]; 
	VPtou1 = interpolate(VhGP1,VhGVP,U2Vc=cs2);
	GradXu1 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=1);
	GradYu1 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=2);
	cs2=[1]; 
	VPtou2 = interpolate(VhGP1,VhGVP,U2Vc=cs2);
	GradXu2 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=1);
	GradYu2 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=2);
}
readic(16,alpha);
// plot(defVel(u0),value=1,fill=1,wait=1);
readparameters(ReSta);
matrix energymatrix,totalgradumatrix;
{
	varf a(defVP(u),defVP(v))=intN(Th)(uporv(u,v));
	energymatrix=a(VhGVP,VhGVP);
}
{
	varf a(defVP(u),defVP(v))=intN(Th)(gradgrad(u,v));
	totalgradumatrix=a(VhGVP,VhGVP);
}
VhGVP defVP(uEF);
real[int] energyu(nEF),energyuhat(nEF),energyspectrum(nEF),totalgradu(nEF),totalenergyspectrum(nEF),totalgraduhat(nEF);
int cont;
// for(int iRe=0;iRe<niRe;iRe++)
// {
	uEF[]=0;
	Re=10000;//vRe(iRe);
	write("Output.txt"," - Reynold="+Re[0],1,1);
	cont=0;
	for(real tsave=dtsave;tsave<=T+epsEF;tsave+=dtsave)
	{	
		ifstream fileRe("../solutions"+esquema+"/txt/SolEF"+prob+"NN"+NN+"Reynold"+Re[0]+"t"+tsave+".txt");
		fileRe >> uEF[];
		// plot(defVel(uEF),value=1,wait=1,cmm="NN="+NN);
		uP1[]=VPtou1*uEF[];
		uP1Y[]=VPtou2*uEF[];
		gradXuP1[]=GradXu1*uEF[];
		gradYuP1[]=GradYu1*uEF[];
		gradXuP1Y[]=GradXu2*uEF[];
		gradYuP1Y[]=GradYu2*uEF[];
		// plot(defVel(uP1),value=1,wait=1);
		write("Output.txt","Computation of the energy spectrum...",1,1);
		real iterationtime=mpiWtime();
		VhGP1 energy;
		VhGP1 <complex> ZZ,ZZY;//,ZZ2,err;
		ZZ[]=DFFT2d(uP1[],-1,NN/2);
		ZZY[]=DFFT2d(uP1Y[],-1,NN/2);
		for(int ii=0;ii<energy[].n;ii++)energy[][ii]=(uporu(ZZ[][ii])+uporu(ZZY[][ii]))/2.;
		// plot(energy,value=1,fill=1,wait=1,cmm="energy espectrum");
		real[int] energykk=energyk(energy[],NN);
		// write("../energyspectrum/computed/energykNN"+NN+"Reynold"+Re[0]+"alpha"+alpha+"t"+tsave+".txt",energykk,0,0,0);
		if(1) // total energy
		{
			energyu(cont)=normL2(uEF[],energymatrix)^2/2.; // from u
			// cout << energyu(cont) << endl;
			// for(int ii=0;ii<energy[].n;ii++)energy[][ii]=(uP1[][ii]^2+uP1Y[][ii]^2)/2.;
			// energy[]/=NN^2;
			// cout << energy[].sum << endl;
			energyspectrum(cont)=energykk.sum*(NN+1)^2; // from energy spectrum
			energyspectrum(cont)/=NN^2;
			energyuhat(cont)=energy[].sum*(NN+1)^2; // from uhat
			energyuhat(cont)/=NN^2;
			cout << energyu(cont) <<" = "<< energyspectrum(cont)<<" = "<< energyuhat(cont)<< endl;
		}
		if(1) // total energy
		{
			totalgradu(cont)=normL2(uEF[],totalgradumatrix)^2; // from u
			// for(int ii=0;ii<energy[].n;ii++)energy[][ii]=(gradXuP1[][ii]^2+gradYuP1[][ii]^2+gradXuP1Y[][ii]^2+gradYuP1Y[][ii]^2);
			// energy[]/=NN^2;
			// totalgradu(cont)=energy[].sum;
			// for(int ii=0;ii<energy[].n;ii++)energy[][ii]=(uporu(ZZ[][ii])+uporu(ZZY[][ii]))/2.;
			energykk=gradenergyk(energy[],NN);
			totalgraduhat(cont)=energykk.sum*(NN+1)^2; // from energy spectrum
			totalgraduhat(cont)/=NN^2;
			totalgraduhat(cont)*=8.*pi^2;
			cout << totalgradu(cont) <<" = "<< totalgraduhat(cont)<< endl;
		}
		// VhGP1 <complex> ubP1,ubP1Y;
		// ubP1[]=DFFT2d(ZZ[],1,NN/2,5);
		// ubP1Y[]=DFFT2d(ZZY[],1,NN/2,5);
		// plot(defVel(uP1),value=1,wait=1,cmm="todas las escalas");
		// plot(defVel(ubP1),value=1,wait=1,cmm="casi todas las escalas");
		cont++;
	}
// }
write("totalu.txt",energyu,0,0);
write("totaluhat.txt",energyuhat,0,0);
write("totalgradu.txt",totalgradu,0,0);
write("totalgraduhat.txt",totalgraduhat,0,0);
write("Output.txt","Done.",1,1);

func complex[int,int] matrixDFFT(real epsi,int  n)
{
	// Matirz de Vandermonde
	// - Si epsi=-1, obtenemos la transformada
	// - Si epsi=1, obtenemos la inversa
	// n=NN/2;
	// Se construye desde fuera hacia dentro, por filas
	real N=2*n+1;
	complex[int,int] AL(N,N),A(N,N);
	A=0;AL=0;
	complex WN=exp(epsi*2.*pi*1i/N);
	int cont=0;
	for(int ii=-n;ii<=0;ii++)
	{
		for(int jj=-n;jj<=0;jj++)
		{
			if(mpirank==cont%mpisize)
			{
				AL(ii+n,jj+n)=WN^(ii*jj);
		        AL(N-ii-n-1,N-jj-n-1)=WN^(ii*jj);
		        AL(ii+n,N-jj-n-1)=WN^(-ii*jj);
		        AL(N-ii-n-1,jj+n)=WN^(-ii*jj);
			}
			cont++;
		}	
	}
	mpiBarrier(mpiCommWorld);
	mpiAllReduce(AL,A,mpiCommWorld,mpiSUM);
	if(epsi<0)A/=N;
	return A;
}
////////////////////////////////////////////////////////////////////////////////////
func real[int] complex2real(complex[int] & v)
{
	real[int] u(v.n),uL(v.n);uL=0;u=0;
	for(int ii=0;ii<v.n;ii++)
	{
		if(mpirank==ii%mpisize)uL(ii)=real(v(ii));
	}
	mpiAllReduce(uL,u,mpiCommWorld,mpiSUM);
	return u;
}
func real[int,int] complex2real(complex[int,int] & v)
{
	real[int,int] u(v.n,v.m),uL(v.n,v.m);uL=0;u=0;
	int cont=0;
	for(int ii=0;ii<v.n;ii++)
	{
		for(int jj=0;jj<v.m;jj++)
		{
			if(mpirank==cont%mpisize)
			{
				uL(ii,jj)=real(v(ii,jj));
			}
			cont++;
		}
	}
	mpiAllReduce(uL,u,mpiCommWorld,mpiSUM);
	return u;
}

////////////////////////////////////////////////////////////////////////////////////
func complex[int,int] vector2matrix(complex[int] & u,int n)
{
	complex[int,int] matrixu(n,n);
	for(int ii=0;ii<n;ii++)matrixu(n-ii-1,:)=u(ii*n:ii*n+n-1);
	return matrixu;
}
func complex[int,int] vector2matrix(real[int] & u,int n)
{
	complex[int] ucomplex(u.n);
	for(int ii=0;ii<u.n;ii++)ucomplex(ii)=u(ii);
	complex[int,int] matrixu(n,n);
	for(int ii=0;ii<n;ii++)matrixu(n-ii-1,:)=ucomplex(ii*n:ii*n+n-1);
	return matrixu;
}

func complex[int] matrix2vector(complex[int,int] & u)
{
	int n=u.n;
	complex[int] vectoru(n*n);
	for(int ii=0;ii<n;ii++)vectoru(ii*n:ii*n+n-1)=u(n-ii-1,:);
	return vectoru;
}

////////////////////////////////////////////////////////////////////////////////////
func complex conjugate(complex v)
{
	complex result=real(v)-1i*imag(v);
	return result;
}
func complex[int] conjugate(complex[int] & v)
{
	complex[int] result=v,resultL=v;
	result=0;resultL=0;
	for(int i=0;i<v.n;i++)
	{
		if(mpirank==i%mpisize)
		{
			resultL(i)=real(v(i))-1i*imag(v(i));
		}
	}
	mpiAllReduce(resultL,result,mpiCommWorld,mpiSUM);
	return result;
}
func complex[int,int] conjugate(complex[int,int] & v)
{
	complex[int,int] result=v,resultL=v;result=0;resultL=0;
	int cont=0;
	for(int i=0;i<v.n;i++)
	{
		for(int j=0;j<v.m;j++)
		{
			if(mpirank==cont%mpisize)
			{
				resultL(i,j)=real(v(i,j))-1i*imag(v(i,j));
			}
			cont++;
		}
	}
	mpiAllReduce(resultL,result,mpiCommWorld,mpiSUM);
	return result;
}
////////////////////////////////////////////////////////////////////////////////////

func real uporu(complex & v)
{
	complex vcon=conjugate(v);
	real result=real(v*vcon);
	return result;
}
////////////////////////////////////////////////////////////////////////////////////

func complex[int] DFFT1d(complex[int] & f,real epsi,int n)
{
	load "lapack";
	complex[int,int] A=matrixDFFT(epsi,n);
	complex[int] F=A*f;
	return F;
}
func complex[int] DFFT2d(complex[int] & f,real epsi,int n)
{
	complex[int,int] matrixf=vector2matrix(f,2*n+1);
	load "lapack";
	complex[int,int] AN=matrixDFFT(epsi,n);
	complex[int,int] aux=matrixf*AN;
	complex[int,int] matrixF=AN*aux;
	complex[int] F=matrix2vector(matrixF);
	return F;
}
func complex[int] DFFT2d(real[int] & f,real epsi,int n)
{	
	complex[int,int] matrixf=vector2matrix(f,2*n+1);
	load "lapack";
	complex[int,int] AN=matrixDFFT(epsi,n);
	complex[int,int] aux=matrixf*AN;
	complex[int,int] matrixF=AN*aux;
	complex[int] F=matrix2vector(matrixF);
	return F;
}

func complex[int,int] DFFT2d(complex[int,int] & f,real epsi,int n)
{
	load "lapack";
	complex[int,int] AN=matrixDFFT(epsi,n);
	complex[int,int] AM=matrixDFFT(epsi,n);
	complex[int,int] aux=f*AN;
	complex[int,int] F=AM*aux;
	return F;
}
func complex[int,int] DFFT2d(complex[int,int] & f,real epsi,int n,int m)
{
	load "lapack";
	complex[int,int] AN=matrixDFFT(epsi,n);
	complex[int,int] AM=matrixDFFT(epsi,m);
	complex[int,int] aux=f*AN;
	complex[int,int] F=AM*aux;
	return F;
}
////////////////////////////////////////////////////////////////////////////////////

func real[int] energyk(real[int] & Energy, int N)
{
	int LN=N/sqrt(2.);
	real[int] energykbycrowns(LN+1);energykbycrowns=0;
	real module;int l;
	for(int k1=-N/2;k1<N/2+1;k1++)
	{
		for(int k2=-N/2;k2<N/2+1;k2++)
		{
			module=sqrt(k1^2+k2^2);
			// cout << module << ", " << l << endl;
			l=module;
			energykbycrowns[l]+=Energy[(k2+N/2)+(N+1)*(k1+N/2)];
		}
	}
	return energykbycrowns;
}
func real[int] energycomputation(real[int] & u,real[int] & uY)
{
	real[int] result(u.n);
	for(int ii=0;ii<result.n;ii++)result[ii]=(u[ii]^2+uY[ii]^2)/2.;
	return result;
}
func real[int] energycomputation(real[int] & u,real[int] & uY,real[int] & uu,real[int] & uuY)
{
	real[int] result(u.n);
	for(int ii=0;ii<result.n;ii++)result[ii]=(u[ii]^2+uY[ii]^2+uu[ii]^2+uuY[ii]^2);
	return result;
}
func real[int] energycomputation(complex[int] & u,complex[int] & uY)
{
	real[int] result(u.n);
	for(int ii=0;ii<result.n;ii++)result[ii]=(uporu(u[ii])+uporu(uY[ii]))/2.;
	return result;
}
func real[int] gradenergyk(real[int] & Energy, int N)
{
	int LN=N/sqrt(2.);
	real[int] energykbycrowns(LN+1);energykbycrowns=0;
	real module;int l;
	for(int k1=-N/2;k1<N/2+1;k1++)
	{
		for(int k2=-N/2;k2<N/2+1;k2++)
		{
			module=sqrt(k1^2+k2^2);
			// cout << module << ", " << l << endl;
			l=module;
			energykbycrowns[l]+=module^2*Energy[(k2+N/2)+(N+1)*(k1+N/2)];
		}
	}
	// energykbycrowns*=2.;
	return energykbycrowns;
}
////////////////////////////////////////////////////////////////////////////////////
func int[int] makeitzero(int[int] & u,real k1,real k2)
{
	int[int] uu=u;
	int n=sqrt(u.n)-1;
	real module;
	for(int k=-n/2;k<=n/2;k++)
	{
		for(int l=-n/2;l<=n/2;l++)
		{
			module=k^2+l^2;
			if(sqrt(module)<k2 & sqrt(module)>=k1)uu[(k+n/2)+(n+1)*(l+n/2)]=0.;
		}
	}
	return uu;
}
////////////////////////////////////////////////////////////////////////////////////
func real[int] compbycomp(real[int] & v, real[int] & u)
{
	real[int] vv=v;
	for(int ii=0;ii<v.n;ii++)vv(ii)*=u(ii);
	return vv;
}
func real[int] compbycomp(real[int] & v, int[int] & u)
{
	real[int] vv=v;
	for(int ii=0;ii<v.n;ii++)vv(ii)*=u(ii);
	return vv;
}
func complex[int] compbycomp(complex[int] & v, int[int] & u)
{
	complex[int] vv=v;
	for(int ii=0;ii<v.n;ii++)vv(ii)=real(v(ii))*u(ii)+complex(v(ii))*u(ii);
	return vv;
}
func complex[int] compbycomp(complex[int] & v, real[int] & u)
{
	complex[int] vv(v.n);
	for(int ii=0;ii<v.n;ii++)vv(ii)=real(v(ii))*u(ii)+complex(v(ii))*u(ii);
	return vv;
}
////////////////////////////////////////////////////////////////////////////////////

func real[int] bigscaleszero(real[int] & v, real k)
{
	int[int] zeros(v.n);zeros=1;
	zeros=makeitzero(zeros,0.,k);
	real[int] vv=compbycomp(v,zeros);
	return vv;
}
func complex[int] bigscaleszero(complex[int] & v, real k)
{
	int[int] zeros(v.n);zeros=1;
	zeros=makeitzero(zeros,0.,k);
	complex[int] vv=compbycomp(v,zeros);
	return vv;
}
func complex[int] bigscaleszero(complex[int] & v, int k)
{
	int[int] zeros(v.n);zeros=1;
	real kk=k;
	zeros=makeitzero(zeros,0,kk);
	complex[int] vv=compbycomp(v,zeros);
	return vv;
}
////////////////////////////////////////////////////////////////////////////////////
func complex[int] smallscaleszero(complex[int] & v, real k)
{
	int[int] zeros(v.n);zeros=1;
	zeros=makeitzero(zeros,k,v.n-1);
	complex[int] vv=compbycomp(v,zeros);
	return vv;
}
func complex[int] smallscaleszero(complex[int] & v, int k)
{
	int[int] zeros(v.n);zeros=1;
	real kk=k;
	zeros=makeitzero(zeros,kk,v.n-1);
	complex[int] vv=compbycomp(v,zeros);
	return vv;
}
////////////////////////////////////////////////////////////////////////////////////
func complex[int] intervalscaleszero(complex[int] & v, real k1,real k2)
{
	int[int] zeros(v.n);zeros=1;
	if(k1<k2)
	{
		zeros=makeitzero(zeros,0,k1);
		zeros=makeitzero(zeros,k2,v.n-1);
	}
	else
	{
		zeros=makeitzero(zeros,0,k2);
		zeros=makeitzero(zeros,k1,v.n-1);
	}
	complex[int] vv=compbycomp(v,zeros);
	return vv;
}
////////////////////////////////////////////////////////////////////////////////////

func real[int,int] AintoB(real[int,int] & A,int M)
{
	int N=A.n;
	real[int,int] B(M,M);B=0;
	for(int ii=0;ii<N;ii++)
	{
		for(int jj=0;jj<N;jj++)
		{
			B(ii+(M-N)/2,jj+(M-N)/2)=A(ii,jj);
		}
	}
	return B;
}
func complex[int,int] AintoB(complex[int,int] & A,int M)
{
	int N=A.n;
	complex[int,int] B(M,M);B=0;
	for(int ii=0;ii<N;ii++)
	{
		for(int jj=0;jj<N;jj++)
		{
			B(ii+(M-N)/2,jj+(M-N)/2)=A(ii,jj);
		}
	}
	return B;
}
////////////////////////////////////////////////////////////////////////////////////
func int[int] firstlastone(int[int] & v)
{
	int i=0,LN=v.n*sqrt(2.);
	int[int] nm=[0,LN/2];
	while(v(i)==0){nm(0)=i+1;i++;}
	i=v.n-1;
	while(v(i)==0){nm(1)=i-1;i--;}
	return nm;
}
NewMacro inertialenergyspectrum(vv,k1,k2)
{
	int k=NN/2.;
	real C=vv(k-1)/(k-1)^(-alpha);
	real[int] vk(vv.n),diff(vv.n);
	int[int] slope(vv.n);
	for(int kk=0;kk<vk.n;kk++)
	{
		vk(kk)=kk^(-alpha)*C;
		diff(kk)=log(vv(kk))-(log(vk(kk)));
		slope(kk)=abs(diff(kk))<1;
	}
	[k1,k2]=firstlastone(slope);
}
EndMacro

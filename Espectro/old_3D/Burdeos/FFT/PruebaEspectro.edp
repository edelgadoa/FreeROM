// A try on the substraction of the boundary conditions

// Miscelaneous
load "dfft"
load "msh3" 
load "iovtk"
load "lapack"
include "dft3D.idp";

func complex conjugate(complex v){
	complex result=real(v)-1i*imag(v);
	return result;
}

func real uporu(complex & v){
	complex vcon=conjugate(v);
	real result=real(v*vcon);
	return result;
}

///////////////////////////////////////////////////////////////////////////////
// Definition of the domain
int mexp = 3;
int NN = 2^mexp;
real length2 = 1;
mesh3 Th = cube(NN,NN,NN,[x*2*length2-length2, y*2*length2-length2, z*2*length2-length2]); // Cube with center in the origin
// Labels of the cube are 1: South 2: East 3: North 4: West 5: Floor 6: Top
// plot(Th);

///////////////////////////////////////////////////////////////////////////////
// Definition of the initial condition in the frequency space
fespace VhP1(Th,P1);
VhP1<complex> ZZ,zz;

real alpha = 5./3; // Kolmogorov law
// real alpha = -1; // Kolmogorov law
real module;
for(int k=-NN/2;k<=NN/2;k++)
{
	for(int l=-NN/2;l<=NN/2;l++)
	{
        for(int m=-NN/2;m<=NN/2;m++)
        {
            module=sqrt(k^2+l^2+m^2);
            if(sqrt(module)<1)
            {
                ZZ[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)]=0.;
            }
            else
            {
                ZZ[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)]=module^(-(alpha+2)/2);
                // The exponent is -(alpha+dim-1)/2, dim-1 is the dimensions "added by the integral"
            }
        }
		
	}
}


// Computation of the energy of each node
real[int] energyhat(ZZ.n);
for(int ii=0;ii<energyhat.n;ii++){
    energyhat[ii]=uporu(ZZ[][ii]); // no hay que sumar y dividir ya que se irían
}

int LN = sqrt(3./4)*NN;

real[int] energykbycrowns(LN+1);energykbycrowns=0;
int l;
for(int k1=-NN/2;k1<=NN/2;k1++)
{
    for(int k2=-NN/2;k2<=NN/2;k2++)
    {
        for(int k3=-NN/2;k3<=NN/2;k3++)
        {
            module=sqrt(k1^2+k2^2+k3^2);
            l=module;
            energykbycrowns[l]+=energyhat[(k1+NN/2)+(NN+1)*(k2+NN/2)+(NN+1)^2*(k3+NN/2)];
        }
    }
}

ofstream filez("EnergyNN"+NN+"_Forzado.txt");
for(int ii=0; ii<LN+1; ii++){
    filez << energykbycrowns(ii) << endl;
}

///////////////////////////////////////////////////////////////////////////////
// Apply the Fourier Transform to have the initial condition in the physical space
zz[]=DFFT3d(ZZ[],1,NN/2);
zz[]/=zz[].max;

VhP1 uPx, uPy, uPz;
uPx = real(zz);
plot(uPx,wait=1);
uPy = real(zz(y,z,x));
uPz = real(zz(z,x,y));
// plot([uPx,uPy,uPz],value=1,fill=1,wait=1); // Plot to see the velocity profile
int[int] Order = [1,1,1];
savevtk("ic.vtu", Th, [uPx,uPy,uPz], order=Order);	


///////////////////////////////////////////////////////////////////////////////
// We calculate the energy spectrum to check if we get the k-5/3 profile
VhP1 <complex> uhat,uhatY,uhatZ;
uhat[]=DFFT3d(zz[],-1,NN/2);
plot(uhat,wait=1);
uhatY[]=DFFT3d(zz[],-1,NN/2);
uhatZ[]=DFFT3d(zz[],-1,NN/2);

// Computation of the energy of each node
for(int ii=0;ii<energyhat.n;ii++){
    energyhat[ii]=(uporu(uhat[][ii])+uporu(uhatY[][ii])+uporu(uhatZ[][ii]))/2.; // no hay que sumar y dividir ya que se irían
}

energykbycrowns=0;
for(int k1=-NN/2;k1<=NN/2;k1++)
{
    for(int k2=-NN/2;k2<=NN/2;k2++)
    {
        for(int k3=-NN/2;k3<=NN/2;k3++)
        {
            module=sqrt(k1^2+k2^2+k3^2);
            l=module;
            energykbycrowns[l]+=energyhat[(k1+NN/2)+(NN+1)*(k2+NN/2)+(NN+1)^2*(k3+NN/2)];
        }
    }
}

ofstream file("EnergyNN"+NN+".txt");
for(int ii=0; ii<LN+1; ii++){
    file << energykbycrowns(ii) << endl;
}

int n = NN/2;

real epsi = -1;
real dim = 2*n+1;
complex w = exp(epsi*2*pi*1i/dim);

// Construimos la matriz de Vandermonde
complex[int,int] W(dim,dim); W=0;
complex[int] wvec(dim); wvec = 0.;
for(int ii=-n;ii<=0;ii++){
    for(int jj=-n;jj<=0;jj++){
        W(ii+n,jj+n)=w^(ii*jj);
        W(dim-ii-n-1,dim-jj-n-1)=w^(ii*jj);
        W(ii+n,dim-jj-n-1)=w^(-ii*jj);
        W(dim-ii-n-1,jj+n)=w^(-ii*jj);
    }	
    wvec(ii+n) = w^(ii);
    wvec(dim-ii-n-1) = w^(-ii); 
}

W /= dim;
wvec /= dim;

ofstream fileM("MatrixFT.txt");
fileM << W << endl; 
ofstream fileV("VectorFT.txt");
fileV << wvec << endl;
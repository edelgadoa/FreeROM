// Transformada de Fourier 3D 

////////////////////////////////////////////////////////////////////////////////////
func complex[int,int] vector2matrix3D(complex[int] & u, int n){
    int dim = 2*n+1;
    complex[int,int] M(dim,dim^2); M = 0.;
    for(int l=-n;l<=n;l++){
        for(int m=-n;m<=n;m++){
            M(:,(l+n)+dim*(m+n)) = u(dim*(l+n)+dim^2*(m+n):dim*(l+n)+dim^2*(m+n)+2*n);
        }	
    }
    return M;
}

///////////////////////////////////////////////////////////////////////////////
func complex[int] matrix3D2vector(complex[int,int] & M, int n){
    int dim = 2*n+1;
    complex[int] uk(dim^3);
    for(int l=-n;l<=n;l++){
        for(int m=-n;m<=n;m++){
            uk(dim*(l+n)+dim^2*(m+n):dim*(l+n)+dim^2*(m+n)+2*n) = M(:,l+n+dim*(m+n));
        }	
    }
    return uk;
}

///////////////////////////////////////////////////////////////////////////////

func complex[int] DFFT3d(complex[int] & u, real epsi, int n){
    // n = NN/2
	// - Si epsi=-1, obtenemos la transformada
	// - Si epsi= 1, obtenemos la inversa

    int dim = 2*n+1;
    complex w = exp(epsi*2*pi*1i/dim);

    // Construimos la matriz de Vandermonde
    complex[int,int] W(dim,dim); W=0;
    complex[int] wvec(dim); wvec = 0.;
	for(int ii=-n;ii<=0;ii++){
		for(int jj=-n;jj<=0;jj++){
            W(ii+n,jj+n)=w^(ii*jj);
            W(dim-ii-n-1,dim-jj-n-1)=w^(ii*jj);
            W(ii+n,dim-jj-n-1)=w^(-ii*jj);
            W(dim-ii-n-1,jj+n)=w^(-ii*jj);
		}	
        wvec(ii+n) = w^(ii);
        wvec(dim-ii-n-1) = w^(-ii); 
	}


    // Pasamos de vector a matriz (el 3D se consigue añadiendo columnas)
    complex[int,int] M(dim,dim^2);
    M = vector2matrix3D(u,n);

    // Calculamos la transformada (2D+1D)
    complex[int,int] Mk(dim,dim^2); Mk = 0;

    complex[int,int][int] WMW(dim);
    for(int m=-n;m<=n;m++){
        complex[int,int] aux=M(0:dim-1,dim*(m+n):dim*(m+n+1)-1); 
        complex[int,int] aux2(dim,dim); aux2 = 0.;
        aux2 = aux*W; 
        aux = W*aux2;
        WMW[m+n] = aux(0:dim-1,0:dim-1);
    }

    for(int m=-n;m<=n;m++){
        complex[int,int] aux2(dim,dim);
        aux2 = 0.;
        for(int mm=-n;mm<=n;mm++){
            complex[int,int] aux=WMW[mm+n];
            aux *= wvec(m+n)^(mm);
            aux2 += aux;
        }
        for(int l=0; l<dim;l++){
            Mk(0:dim-1,dim*(m+n)+l) = aux2(0:dim-1,l);
        }
    }

    // Recuperamos la forma vectorial
    complex[int] uk(dim^3);
    uk = matrix3D2vector(Mk,n);

	if(epsi<0)uk/=(dim^3); // Normalizar la transformada, sólo se hace en la directa
    return uk;
}


include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/ortho.idp";
include "../auxiliary/auxPOD.idp";
IFMACRO(prob,"Stokes")include "../auxiliary/EFStokes.idp";include "../auxiliary/BRStokes.idp";ENDIFMACRO
IFMACRO(prob,"NS")include "../auxiliary/EFNS.idp";include "../auxiliary/BRNS.idp";ENDIFMACRO
IFMACRO(prob,"Smago")include "../auxiliary/EFSmago.idp";include "../auxiliary/BRSmago.idp";ENDIFMACRO
infoparam;

// Greedy param
int nselectedRe=niRe;
dtRe/=8;
niRe=(Remax-Remin)/dtRe+1.;
real [int] vtrain(niRe);
for (int ig=0; ig<niRe; ig++)vtrain(ig)=Remin+ig*dtRe;

int Greedymax=8;
real epsGreedy=1.e-08;
real[int,int] selectedRe(2,niRe+Greedymax);
write("Output.txt","Computing the offline phase",0,1);
readTh(NN);
readparameters(ReSta);

real[int] errGreedy(Greedymax+1);errGreedy(0)=10;
real[int] ReSelec(Greedymax+1); ReSelec(0)=Remin;
real[int,int] ReBest(numparam,Greedymax);
ReBest(0:numparam-1,0)=Remin;
ReBest(0:numparam-1,1)=Remax;
real[int,int] selected(numparam,niRe);selected=vtrain;
int M1v=0,M1p=0,M2v=0,M2p=0,Nv=0,Np=0,N,MZv=0,MZp=0,Nvmax=(nEF+1)*niRe*Greedymax,Npmax=Nvmax;
VhGVP[int] defVP(uEF)(nEF+1),defVP(uBR)(nEF+1);
VhGVel[int] defVel(basetVel)(nEF+1),defVel(baseZVel)(Nvmax),defVel(baseVel)(Nvmax+Npmax);
VhGP1[int] basetPres(nEF),baseZPres(Npmax),basePres(Npmax);
VhGVel defVel(supEF);

IFMACRO(prob,"Smago")
write("Output.txt","Reading the EIM...",1,1);
include "../auxiliary/auxEIMsta.idp";
readEIM;
ini(VhGP1dc,GradX)
ini(VhGP1dc,GradY)
ini(VhGP1dc,GradZ)
macrogradinter(VhG,matrixD);
ini(VhGP2,w0);
VhGP1dc gradw0,nut;
nut[]=0;
ENDIFMACRO

write("Output.txt","Generating matrixes...",1,1);
matrixprodV(prodV);matrixprodP(prodP);matrixprodVP(prodVP);
matrixgeneration;

write("Output.txt","Starting the algorithm...",1,1);
for(int ip=5;ip<Greedymax;ip++)
{
	// Parametros equiespaciados
	real[int] ReEq(ip+1);
	if(ip==0){
		ReEq = (Remax+Remin)/2;
	}
	else{
		for(int i=0; i<=ip; i++){
			ReEq(i)=Remin+i*(Remax-Remin)/ip;
		}
	}

	// Incluir los snapshots en una matriz
	real[int,int] snapsVelTotal(VhGVel.ndof,(ip+1)*(nEF+1)),snapsPresTotal(VhGP1.ndof,(ip+1)*(nEF));
	for(int j=0; j<=ip; j++){
		real[int,int] snapsVel(VhGVel.ndof,nEF+1),snapsPres(VhGP1.ndof,nEF);
		readsol(snaps,T0+dtsave,T,ReEq[j],ReEq[j])
		for(int kk=0;kk<nEF+1;kk++)snapsVelTotal(:,j*(nEF+1)+kk) = snapsVel(:,kk);
		for(int ll=0;ll<nEF;ll++)snapsPresTotal(:,j*nEF+ll) = snapsPres(:,ll);
	}
	epsPOD = 1.e-10;
	POD(snapsVelTotal,prodV,baseVel,Nv,autovalVel);
	POD(snapsPresTotal,prodP,basePres,Np,autovalPres);
	write("Output.txt","At the end, for vel "+Nv+" basis and for pres "+Np+" basis.",1,1);

	write("Output.txt","Supremizer construction...",1,1);
	for(int i=0;i<Np;i++)
	{
		supremizer(basePres[i],Refijo,supEF);
		baseVel[Nv+i][]=supEF[];
	}
	write("Output.txt","Ok.",1,1);
	if(GS)
	{
		include "../auxiliary/ortho.idp";
		write("Output.txt","   Orthonormalization...",1,1);
		for(int i=0;i<Nv+Np;i++)ortho(baseVel,i+1,prodV);
		for(int i=0;i<Np;i++)ortho(basePres,i+1,prodP);
		normalization(baseVel,Nv+Np,prodV);
		normalization(basePres,Np,prodP);
		int[int] check=[1,1];
		orthocheck(Nv+Np,prodV,Np,prodP,check);
		if(check[0]==0)
		{
			write("Output.txt","   Bad ortho Vel...",1,1);
			for(int i=0;i<Nv+Np;i++)ortho(baseVel,i+1,prodV);
		}
			if(check[1]==0)
		{
			write("Output.txt","   Bad ortho Pres...",1,1);
			for(int i=0;i<Np;i++)ortho(basePres,i+1,prodP);
		}
	}
	N=Nv+2*Np;
	
	// Version con doble POD?

	// Guardar base

	write("Output.txt","initializing Reduced Matrixes..."+N,1,1);
	initialization(StoN,NSN,SmaN,N);
	initialization(StoNL,NSNL,SmaNL,N);
	write("Output.txt","   Building Reduced Matrixes...",1,1);
	real time=mpiWtime();
	matrixBR(base);
	bigtosmall(StoN,NSN,SmaN)
	time=mpiWtime()-time;
	write("Output.txt","    - time="+time,1,1);
	write("Output.txt", "Writing the basis..." ,1,1);
	write("../results/basisVel"+N+"ip"+ip+".txt",Nv,0,0);
	write("../results/basisPres"+N+"ip"+ip+".txt",Np,0,0);
	for(int it=0;it<Nv+Np;it++)write("../results/basisVel"+N+"ip"+ip+".txt",baseVel[it][],1,0);
	for(int it=0;it<Np;it++)write("../results/basisPres"+N+"ip"+ip+".txt",basePres[it][],1,0);
	IFMACRO(prob,"Smago")writeStoN(N,StoN);writeNSN(N,NSN);writeSmaN(N,SmaN);ENDIFMACRO

	write("Output.txt","Done with N="+N,1,1);
}
write("Output.txt","Done.",1,1);

///////////////
// FreeROM 
///////////////

/////////////////////////////////////////
//// NS + VMS-Smago + Estab Pres (LPS)///
/////////////////////////////////////////

// Codigo para resolver el problema de EF de VMS-Smago. 
// Elemento Finito P2-P1 (no estable) en vel-pres 

// Cargamos librerias
load "iovtk" 

// Cargamos macros
include "../Auxiliary/IO.idp"
include "../Auxiliary/Macros_2D.idp"
include "../Auxiliary/macro_ddm.idp"
include "../Auxiliary/search.idp"

// Definimos los parametros a usar
include "../Auxiliary/Parametros_2D.idp"

// Creamos la malla
include "../Auxiliary/Malla.idp"

// Definimos los espacios de EF 
include "FE_Spaces_NoStab_VP_2D.idp"

// Definimos las matrices de interpolacion y derivacion
include "Interp_matrix_NoStab_VP_2D.idp"

/////////////////////////////////////////////
/// Establecemos la CI para EF: Cavidad 2D///
/////////////////////////////////////////////

Vh3P2per [uEF0,uEF0Y,uEF0P];

Reynolds = Refijo;

readvector("../Snapshots/Vx_" + Reynolds + "_t_" +T0+ ".txt", real, SolX, 0); uEF0[] = SolX;
readvector("../Snapshots/Vy_" + Reynolds + "_t_" +T0+ ".txt", real, SolY, 0); uEF0Y[] = SolY;
readvector("../Snapshots/P_" + Reynolds + "_t_" +T0+ ".txt", real, SolP, 0); uEF0P[] = SolP;

/////////////////////////////////////////////
// Cargamos los valores de parametros calculados

readvector("../Snapshots/Snapshots.txt", real, ReSolved, 0);

/////////////////////////////////////////////
// Resolvemos el problema de EF: Cavidad 2D//
/////////////////////////////////////////////

Vh3P2per [uEF, uEFY,uEFP];
VhP1dc uEFdX, uEFdY, uEFYdX, uEFYdY; //las derivadas de uEF del paso anterior
VhP2per uprev, uprevY;
VhP1dc Gr; // Para el termino de VMS-Smagorinsky

for(int iRe=0;iRe<niRe;iRe++)
{
	// Nuevo Reynolds
	Reynolds = Remin+iRe*dtRe;
	write("Output.txt"," - Reynold="+Reynolds,1,1);

	// Comprobamos si la solucion no esta calculada
	if(search(ReSolved,Reynolds)==-1){
		[uEF, uEFY,uEFP] = [uEF0,uEF0Y,uEF0P];
		include "FE_VMS_2D.idp"
		// Actualizamos parametros
		ReSolved.resize(ReSolved.n+1);
		ReSolved(ReSolved.n-1) = Reynolds;
		write("../Snapshots/Snapshots.txt", ReSolved, 0, 0);
	}
	else{
		readvector("../Snapshots/Vx_" + Reynolds + "_t_" +TF+ ".txt", real, SolX, 0); uEF[] = SolX;
		readvector("../Snapshots/Vy_" + Reynolds + "_t_" +TF+ ".txt", real, SolY, 0); uEFY[] = SolY;
		readvector("../Snapshots/P_" + Reynolds + "_t_" +TF+ ".txt", real, SolP, 0); uEFP[] = SolP;
	}
	// plot([uEF,uEFY],wait=1,cmm="Re="+Reynolds);
	// plot(uEFP,wait=1,cmm="Re="+Reynolds);
	
	write("Output.txt","Done",1,1);
}


write("Output.txt","FOM Done",1,1);
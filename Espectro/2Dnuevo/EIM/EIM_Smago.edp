///////////////
// FreeROM 
///////////////

// Programa para caluclar el EIM del término de Smagorinsky g(x;\mu)=|\nabla u(x)|

// Cargamos librerias
load "lapack"

// Cargamos macros y funciones i/o
include "../Auxiliary/IO.idp"
include "../Auxiliary/Macros_2D.idp"
include "../Auxiliary/macro_ddm.idp"
include "../Auxiliary/search.idp"

// Definimos los parametros a usar
include "../Auxiliary/Parametros_2D.idp"

// Creamos la malla
include "../Auxiliary/Malla.idp"

// Definimos los espacios de EF
include "../FOM/FE_Spaces_NoStab_VP_2D.idp"

// Definimos las matrices de interpolacion y derivacion
include "../FOM/Interp_matrix_NoStab_VP_2D.idp"

//Definimos el intervalo de Reynolds que  vamos a considerar para resolver el problema de EF
readvector("Snapshots.txt", real, vReynolds, 0); 
int nSnapshots = niRe * niT; //Numero de snapshots TOTAL a cargar

VhP2per[int] BVX(nSnapshots), BVY(nSnapshots);
VhP1dcper[int] BVdX(nSnapshots), BVdY(nSnapshots), BVYdX(nSnapshots), BVYdY(nSnapshots); //las calculo TODAS de una vez

include "Load_Snapshots_EIM.idp"
		
// Defino las variables para el EIM
int Mmax = nSnapshots; //numero maximo de bases del EIM
int M; //numero de bases que voy a considerar finalmente
real[int] Tmax(Mmax), muEIM(Mmax, 2); //Donde almaceno los puntos magicos y los valores de parámetros con tiempos que voy escogiendo
real[int] ErrorMaxEIM(Mmax); // Para almacenar el error máximo en cada etapa del EIM
real[int,int] BM(Mmax, Mmax); BM=0; // Matriz del sistema del EIM, inicializada a cero

VhP1dcperG[int] BEIM(Mmax); // Donde almaceno las bases EIM
VhP1dcperG gEIM, IgEIM; // Donde guardo la funcion a linealizar y la funcion de base (tienen que estar en global)

VhP1dcper gEIML; // Aquí voy a calcular los segundos miembros 

///////////////////////////////////////////////////////////////////////////////
// COMENZAMOS EL BUCLE DONDE CALCULAMOS LAS BASES EIM
///////////////////////////////////////////////////////////////////////////////

// Primera iteración //Tomamos el primer valor del parametro aleatorio
muEIM(0,0) = vReynolds(0); //Almacenamos el valor de Reynolds escogido (se pueden repetir (varios tiempos))
muEIM(0,1) = TF;

VhP1dcper BEIML = mod(BVdX[niT-1], BVdY[niT-1], BVYdX[niT-1], BVYdY[niT.n-1]); //tomo el snapshot del primer Reynolds a tiempo final

BEIM[0][] = reduceSolution(BEIML[], BEIM[0][], MatVhP1dcper.D, mapVhP1dcper);

Tmax(0) = BEIM[0][].imax;
BEIM[0][] /= BEIM[0][].max;

BM(0,0) = BEIM[0][](Tmax(0));

write("Bases_EIM/Base_EIM_" + muEIM(0,0) + "_t_" + muEIM(0,1) + ".txt", BEIM[0][], 0, 0, 0, 20);

// Hacemos el greedy para calcular todas las bases del EIM
for (int i=1; i<Mmax; i++){
	real[int] Errorit(nSnapshots);
	
	include "EIMgreedy_Smago.idp";

	if(ErrorMaxEIM(i-1)<epsEIM){
		M = i;
		break;
	}
}

// Guardamos la matriz B, y los puntos mágicos, así como los errores obtenidos y los Reynolds de cada snapshot
real[int] muEIMF(M, 2);
muEIMF = muEIM(0:M-1, 0:1);
write("Bases_EIM/muEIM_Smago.txt", muEIMF, 0, 0);

real[int, int] BFinal(M,M);
BFinal = BM(0:M-1,0:M-1);
write("Bases_EIM/MatrizEIM_Smago.txt", BFinal, 0, 0, 0, 20);

real[int] TM(M);
TM = Tmax(0:M-1);
write("Bases_EIM/TintEIM_Smago.txt", TM, 0, 0);

real[int] ErrorEIM(M);
ErrorEIM = ErrorMaxEIM(0:M-1);
write("Bases_EIM/ErrorEIM_Smago.txt", ErrorEIM, 0, 0);
load "dfft"

///////////////////////////////////////////////////////////////////////////////
// Calculo de la energía 

func complex conjugate(complex v)
{
	complex result=real(v)-1i*imag(v);
	return result;
}

func real uporu(complex & v)
{
	complex vcon=conjugate(v);
	real result=real(v*vcon);
	return result;
}

func complex[int,int] matrixDFFT(real epsi,int  n)
{
	// Matirz de Vandermonde
	// - Si epsi=-1, obtenemos la transformada
	// - Si epsi=1, obtenemos la inversa
	// n=NN/2;
	// Se construye desde fuera hacia dentro, por filas
	real N=2*n+1;
	complex[int,int] AL(N,N),A(N,N);
	A=0;AL=0;
	complex WN=exp(epsi*2.*pi*1i/N);
	int cont=0;
	for(int ii=-n;ii<=0;ii++)
	{
		for(int jj=-n;jj<=0;jj++)
		{
			if(mpirank==cont%mpisize)
			{
				AL(ii+n,jj+n)=WN^(ii*jj);
		        AL(N-ii-n-1,N-jj-n-1)=WN^(ii*jj);
		        AL(ii+n,N-jj-n-1)=WN^(-ii*jj);
		        AL(N-ii-n-1,jj+n)=WN^(-ii*jj);
			}
			cont++;
		}	
	}
	mpiBarrier(mpiCommWorld);
	mpiAllReduce(AL,A,mpiCommWorld,mpiSUM);
	if(epsi<0)A/=N;
	return A;
}

func complex[int,int] vector2matrix(complex[int] & u,int n)
{
	complex[int,int] matrixu(n,n);
	for(int ii=0;ii<n;ii++)matrixu(n-ii-1,:)=u(ii*n:ii*n+n-1);
	return matrixu;
}
func complex[int] matrix2vector(complex[int,int] & u)
{
	int n=u.n;
	complex[int] vectoru(n*n);
	for(int ii=0;ii<n;ii++)vectoru(ii*n:ii*n+n-1)=u(n-ii-1,:);
	return vectoru;
}
func complex[int] DFFT2d(complex[int] & f,real epsi,int n)
{
	complex[int,int] matrixf=vector2matrix(f,2*n+1);
	load "lapack";
	complex[int,int] AN=matrixDFFT(epsi,n);
	complex[int,int] aux=matrixf*AN;
	complex[int,int] matrixF=AN*aux;
	complex[int] F=matrix2vector(matrixF);
	return F;
}

///////////////////////////////////////////////////////////////////////////////
func real[int] energycomputation(complex[int] & u,complex[int] & uY)
{
	real[int] resultL(u.n), result(u.n);
	resultL=0.; result=0.; 
	int cont = 1;
	for(int ii=0;ii<result.n;ii++){
		if(mpirank==cont%mpisize){
			resultL[ii]=(uporu(u[ii])+uporu(uY[ii]))/2.;
		}
	cont++;
	}
	mpiBarrier(mpiCommWorld);
	mpiAllReduce(resultL,result,mpiCommWorld,mpiSUM);
	return result;
}

func real[int] energycomputation(complex[int] & u,complex[int] & uY, complex[int] & uZ)
{
	real[int] resultL(u.n), result(u.n);
	resultL=0.; result=0.; 
	int cont = 1;
	for(int ii=0;ii<result.n;ii++){
		if(mpirank==cont%mpisize){
			resultL[ii]=(uporu(u[ii])+uporu(uY[ii])+uporu(uZ[ii]))/2.;
		}
	cont++;
	}
	mpiBarrier(mpiCommWorld);
	mpiAllReduce(resultL,result,mpiCommWorld,mpiSUM);
	return result;
}


///////////////////////////////////////////////////////////////////////////////
// Suma de la energía por coronas
func real[int] energyk2d(real[int] & Energy, int nx, int ny)
{
    int LN=sqrt(nx^2+ny^2)/2;
	real[int] energykbycrownsL(LN+1), energykbycrowns(LN+1);
	energykbycrownsL=0.; energykbycrowns=0.;
	real module;int l;
	int cont = 1;
	for(int k1=-nx/2;k1<nx/2;k1++){
		for(int k2=-ny/2;k2<ny/2;k2++){
            if(mpirank==cont%mpisize){
                module=sqrt(k1^2+k2^2);
                // cout << module << ", " << l << endl;
                l=module;
                energykbycrownsL[l]+=Energy[(k2+ny/2)+ny*(k1+nx/2)];
            }
            cont++;
		}
	}
	mpiBarrier(mpiCommWorld);
	mpiAllReduce(energykbycrownsL,energykbycrowns,mpiCommWorld,mpiSUM);
	return energykbycrowns;
}

func real[int] energyk3d(real[int] & Energy, int nx, int ny, int nz)
{
    int LN=sqrt(nx^2+ny^2+nz^2)/2;
	real[int] energykbycrownsL(LN+1), energykbycrowns(LN+1);
	energykbycrownsL=0.; energykbycrowns=0.;
	real module;int l;
	int cont = 1;
	for(int k1=0;k1<nx/2;k1++){
		for(int k2=0;k2<ny/2;k2++){
			for(int k3=0;k3<nz/2;k3++){
				if(mpirank==cont%mpisize){
					module=sqrt(k1^2+k2^2+k3^2);
					// cout << module << ", " << l << endl;
					l=module;
					energykbycrownsL[l]+=Energy[k1+nx*k2+nx*ny*k3];
				}
				cont++;
			}	
		}
	}
	mpiBarrier(mpiCommWorld);
	mpiAllReduce(energykbycrownsL,energykbycrowns,mpiCommWorld,mpiSUM);
	return energykbycrowns;
}


///////////////////////////////////////////////////////////////////////////////
// Función simplificadora 

func real[int] espectro2D(complex[int] & uxc, complex[int] & uyc, int Ndiv){

    int length = uxc.n;
    complex[int] uxhat(length), uyhat(length);
    uxhat = dfft(uxc,Ndiv,-1); uyhat = dfft(uyc,Ndiv,-1);;
    real[int] energyhat = energycomputation(uxhat,uyhat);
    real[int] energykk=energyk2d(energyhat,Ndiv,Ndiv);
    return energykk;
}

func real[int] espectro2DDFFT(complex[int] & uxc, complex[int] & uyc, int Ndiv){

    int length = uxc.n;
    complex[int] uxhat(length), uyhat(length);
    uxhat = DFFT2d(uxc,-1,(Ndiv-1)/2); uyhat = DFFT2d(uyc,-1,(Ndiv-1)/2);;
    real[int] energyhat = energycomputation(uxhat,uyhat);
    real[int] energykk=energyk2d(energyhat,Ndiv,Ndiv);
    return energykk;
}

func real[int] espectro3D(complex[int] & uxc, complex[int] & uyc, complex[int] & uzc, int Ndiv){

    int length = uxc.n;
    complex[int] uxhat(length), uyhat(length), uzhat(length);
    uxhat = dfft(uxc,Ndiv,Ndiv,-1); uyhat = dfft(uyc,Ndiv,Ndiv,-1); uzhat = dfft(uzc,Ndiv,Ndiv,-1);
    real[int] energyhat = energycomputation(uxhat,uyhat,uzhat);
    real[int] energykk=energyk3d(energyhat,Ndiv,Ndiv,Ndiv);
    return energykk;
}
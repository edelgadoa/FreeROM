// Archivo auxiliar calculo de transformadas de fourier

func PFourier = P2;
real[int] dFourier;
PartitionCreate(Th,dFourier,PFourier);
fespace Fh(Th,PFourier, periodic=[[labPeriodic[0],y], [labPeriodic[1],y], [labPeriodic[2],x], [labPeriodic[3],x]]);
Fh DFourier;
fespace VhP1(Th, P2);  
VhP1 DF2; DF2[] = dFourier;
DFourier = DF2;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Si tengo varias componentes, debo llamar varias veces a la transformada de fourier.
// El vector en el argumento debe ser un vector en P2.

func complex[int,int] FourierTransform2D(complex[int] uFourierv, int kmax){
    Fh<complex> uFourier;
    uFourier[] = uFourierv;
    complex[int,int] FCoefs(2*kmax+1,2*kmax+1);
    
    for(int ii=-kmax; ii<=kmax; ii++){
        for(int jj=-kmax; jj<=kmax; jj++){
            func fourier = exp(-1i*pi*(x*ii+y*jj));
            FCoefs(ii+kmax,jj+kmax) = int2d(Th)(DFourier*fourier*uFourier);
        }
    }
    return FCoefs;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Transformada de fourier inversa.
func complex[int] FourierInverse2D(complex[int,int] & Coefs){

    int kmax = (Coefs.n-1)/2;
    Fh<complex> uFourier;
    uFourier = 0;

    for(int ii = -kmax; ii<=kmax; ii++){
        for(int jj = -kmax; jj<=kmax; jj++){
            complex FCoef = Coefs(ii+kmax,jj+kmax);
            func BaseFourier = FCoef*exp(-1i*pi*(x*ii+y*jj));
            uFourier =  uFourier+BaseFourier;
        }
    }
    return uFourier[];
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Cálculo del espectro.

func real[int,int] energycomputation(complex[int,int] & CoefsX, complex[int,int] & CoefsY)
{
    int kmax = (CoefsX.n-1)/2;
    real[int,int] resultL(2*kmax+1,2*kmax+1), result(2*kmax+1,2*kmax+1);
	resultL=0.; result=0.; 
	int cont = 1;
    
    //complex vX, vY, vXc, vYc;
    //real vvX, vvY;
		
	for(int ii=-kmax;ii<=kmax;ii++){
		if(mpirank==cont%mpisize){
            for(int jj=-kmax; jj<=kmax; jj++){
                resultL(ii+kmax,jj+kmax)=(1./2)*(abs(CoefsX(ii+kmax,jj+kmax))^2+abs(CoefsY(ii+kmax,jj+kmax))^2);
            }
        }
	    cont++;
	}
	mpiBarrier(mpiCommWorld);
	mpiAllReduce(resultL,result,mpiCommWorld,mpiSUM);
	return result;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Suma de la energía por coronas.
func real[int] energyk2d(real[int,int] & Energy)
{
    int kmax = (Energy.n-1)/2;
    int LN=sqrt(2*kmax^2)/2;
	real[int] energykbycrownsL(LN+1), energykbycrowns(LN+1);
	energykbycrownsL=0.; energykbycrowns=0.;
	real module;int l;
	int cont = 1;
	for(int k1=-kmax;k1<=kmax;k1++){
        if(mpirank==cont%mpisize){
		for(int k2=-kmax;k2<=kmax;k2++){
                module=sqrt(k1^2+k2^2)/2;
                l=module;
                //cout << "Modulo" << module << ", con entero: " << l << endl;
                energykbycrownsL[l]+=Energy(k1+kmax,k2+kmax);
            }
		}
        cont++;
	}
	mpiBarrier(mpiCommWorld);
	mpiAllReduce(energykbycrownsL,energykbycrowns,mpiCommWorld,mpiSUM);
	return energykbycrowns;
}
//**Se puede evitar calcular puntos superfluos fuera del círculo cincunscrito al dominio.

///////////////////////////////////////////////////////////////////////////////////////////////////
// Función simplificadora.

func real[int] espectro2D(complex[int] uFourierv, complex[int] uFouriervY, int kmax){

    complex[int,int] FCoefsX(2*kmax+1,2*kmax+1);
    complex[int,int] FCoefsY(2*kmax+1,2*kmax+1);
    complex[int,int] FCoefsXL(2*kmax+1,2*kmax+1);
    complex[int,int] FCoefsYL(2*kmax+1,2*kmax+1);

    FCoefsXL = FourierTransform2D(uFourierv,kmax);
    mpiAllReduce(FCoefsXL,FCoefsX,mpiCommWorld,mpiSUM);

    FCoefsYL = FourierTransform2D(uFouriervY,kmax);
    mpiAllReduce(FCoefsYL,FCoefsY,mpiCommWorld,mpiSUM);

    real[int,int] energyhat = energycomputation(FCoefsX,FCoefsY);
    real[int] energykk = energyk2d(energyhat);
    return energykk;
}

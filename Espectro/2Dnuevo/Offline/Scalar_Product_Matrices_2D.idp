///////////////
// FreeROM 
/////////////// 

// Defino las matrices de producto escalar, que voy a considerar para la ortonormalizacion #TODO: definir pescX en [P2,P2,P1]

Mat MPescT = MatAVh2P2per; 
Mat MPescX;
Mat MPescV;//= MatAVh2P2per;
MatCreate(ThL, MPescV, Pk2P2);
Mat MPescP = MatAVhP1per;
{
	varf pescT ([uu, uuY], [v,vY]) = int2d(ThL)((1./Refijo + MOD(uFijo))*GradUGradV(uu,v));
	MPescT = pescT(Vh2P2perL, Vh2P2perL); 
	
	// varf pescX ([uu, uuY, uuP], [v,vY, vP]) = int2d(ThL)((1./Refijo + MOD(uFijo))*GradUGradV(uu,v) + uuP*vP);
	// MPescX = pescX(Vh3P2perL, Vh3P2perL); 

	varf pescV([uu,uuY],[vv,vvY]) = int2d(ThL)(GradUGradV(uu,vv));
    matrix PescV =  pescV(Vh2P2perL, Vh2P2perL);
	MPescV = PescV;//pescV(Vh2P2perL, Vh2P2perL);
	
	varf pescP(u,v) = int2d(ThL)(u*v);
	MPescP = pescP(VhP1perL, VhP1perL);
}
///////////////////////////////////////////////////////

Mat DiffPEM = MatAVh2P2per; 
Mat DivPPEM;
Mat PenPEM = MatAVhP1per;
Mat DTPEM = MatAVh2P2per;

{
	varf DiffPE([uu,uuY], [v,vY]) = int2d(ThL)(GradUGradV(uu,v));
//	matrix DiffPEMT = DiffPE(Vh2P2perL,Vh2P2perL);
//	Mat DiffPEMTemp = DiffPEMT;
	DiffPEM = DiffPE(Vh2P2perL,Vh2P2perL); //DiffPEMTemp;

	varf DivPPE([uu,uuY], [vP]) = int2d(ThL)(Div(uu)*vP);
	matrix DivPPEMT = DivPPE(Vh2P2perL, VhP1perL);
	Mat DivPPEMTemp(MatAVhP1per, MatAVh2P2per, DivPPEMT);
	DivPPEM = DivPPEMTemp;

	varf PenPE(uP, vP) = int2d(ThL)(epspen*uP*vP);
	// matrix PenPEMT = PenPE(VhP1perL, VhP1perL);
	// Mat PenPEMTemp = PenPEMT;
	PenPEM = PenPE(VhP1perL, VhP1perL);; //PenPEMTemp;

	varf DTPE([uu,uuY], [v,vY]) = int2d(ThL)(UporV(uu,v));
	// matrix DTPEMT = DTPE(Vh2P2perL, Vh2P2perL);
	// Mat DTPEMTemp = DTPEMT;
	DTPEM = DTPE(Vh2P2perL, Vh2P2perL); //DTPEMTemp;
}

Mat[int] ConvPEM(2*Nbases); // Simplemente inicializo, dentro del bucle del greedy definir√© los prod. esc. segun vaya calculando las bases


Mat[int] SmagoPEM(Mbases);
{
	for (int s=0; s<Mbases; s++){
		Mat SmagoPEMs = MatAVh2P2per;
		// Matrices Smago
		varf SmagoPE([uu,uuY],[v,vY]) = int2d(ThL)((CS*hTriangle)^2*EIMSmago[s]*GradUGradV(uu,v));
		// matrix SmagoL = SmagoPE(Vh2P2perL, Vh2P2perL);
		SmagoPEMs = SmagoPE(Vh2P2perL, Vh2P2perL);
		SmagoPEM[s] = SmagoPEMs;
	}
}
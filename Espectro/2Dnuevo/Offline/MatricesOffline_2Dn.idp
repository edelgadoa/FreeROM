///////////////
// FreeROM 
/////////////// 

// Código para construir EN PARALELO las matrices de base reducida
// El cálculo se hace multiplicando matrices de snapshots por matriz EF A_N = V'*A_h*V.


// Para evitar los valores de BaseV, BaseP que son cero (se alloca con el numero maximo de bases)
Vh2P2per[int] [BasePODV, BasePODVY](NbasesV);
VhP1per[int] BasePODP(NbasesP);

for(int i=0;i<NbasesV;i++){
	BasePODV[i][] = BaseV[i][];
}
for(int i=0;i<NbasesP;i++){
	BasePODP[i][] = BaseP[i][];
}

real[int,int] MBaseVPETSc(MatVh2P2per.n, NbasesV), MBasePPETSc(MatVhP1per.n, NbasesP);
ChangeNumbering(MatVh2P2per, BasePODV, MBaseVPETSc);
ChangeNumbering(MatVhP1per, BasePODP, MBasePPETSc);

real[int,int] DiffRBaux(DiffPEM.n, MBaseVPETSc.m), DivPRBaux(DiffPEM.n, MBaseVPETSc.m),
              DTRBaux(DTPEM.n, MBaseVPETSc.m), PenRBaux(PenPEM.n, MBasePPETSc.m);

MatMatMult(DiffPEM, MBaseVPETSc, DiffRBaux);
MatMatMult(DivPPEM, MBaseVPETSc, DivPRBaux);
MatMatMult(DTPEM, MBaseVPETSc, DTRBaux);
MatMatMult(PenPEM, MBasePPETSc, PenRBaux);

real[int,int] DiffRBL = MBaseVPETSc'*DiffRBaux;
real[int,int] DivPRBL = MBasePPETSc'*DivPRBaux;
real[int,int] DTRBL = MBaseVPETSc'*DTRBaux;
real[int,int] PenRBL = MBasePPETSc'*PenRBaux;

mpiAllReduce(DiffRBL, DiffRB, mpiCommWorld, mpiSUM);
mpiAllReduce(DivPRBL, DivPRB, mpiCommWorld, mpiSUM);
mpiAllReduce(DTRBL, DTRB, mpiCommWorld, mpiSUM);
mpiAllReduce(PenRBL, PenRB, mpiCommWorld, mpiSUM);


write("Output.txt","Matrices varias OK.",1,1);


for(int s=0; s<NbasesV;s++){
    real[int,int] ConvRBaux(ConvRB[s].n, MBaseVPETSc.m), ConvRBG(NbasesV, NbasesV);
    MatMatMult(ConvPEM[s], MBaseVPETSc, ConvRBaux);
    real[int,int] ConvRBL = MBaseVPETSc'*ConvRBaux;
    mpiAllReduce(ConvRBL, ConvRBG, mpiCommWorld, mpiSUM);
    ConvRB[s] = ConvRBG;
}

write("Output.txt","Conveccion OK.",1,1);
write("ConvRB"+mpisize+".txt", ConvRB, 1, 1); //REVISAR, ELIMINA EL VALOR DE LO QUE ESTABA DEFINIDO


for (int s=0; s<Mbases; s++){
    real[int, int] SmagoRBaux(SmagoRB[s].n, MBaseVPETSc.m), SmagoRBG(NbasesV, NbasesV);
	MatMatMult(SmagoPEM[s], MBaseVPETSc, SmagoRBaux);
	real[int,int] SmagoRBL = MBaseVPETSc'*SmagoRBaux;
	mpiAllReduce(SmagoRBL, SmagoRBG, mpiCommWorld, mpiSUM);
    SmagoRB[s] = SmagoRBG;
}

write("Output.txt","Smagorinsky OK.",1,1);


// Matrices para el EIM de Smago

for (int i=0; i<NbasesV; i++){	
	
	for (int s=0; s<Mbases; s++){
		real[int,int] Dtk(GradPM[s].n, GradPM[s].m);
		real[int,int] DtkL(GradPM[s].n, GradPM[s].m);

		Dtk = 0; DtkL = 0;

		if (NumberPMSmago(s)>0){
    		DtkL(0,i) = BVdX[i][](PuntosMSmagoL(s));  
    		DtkL(1,i) = BVdY[i][](PuntosMSmagoL(s));
    		DtkL(2,i) = BVYdX[i][](PuntosMSmagoL(s));
    		DtkL(3,i) = BVYdY[i][](PuntosMSmagoL(s));
			
		    DtkL *= WeightPMSmago(s);
		}
		mpiAllReduce(DtkL, Dtk, mpiCommWorld, mpiSUM);
		GradPM[s] += Dtk;
	}	
}

write("Output.txt","EIM Smagorinsky OK.",1,1);

////////////////////////////
// POD // 
////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Matriz de Correlacion, en paralelo //
///////////////////////////////////////////////////////////////////////////////
NewMacro matrixcorrelacion(snaps,C,prod)
{
	real[int,int] CL=C;
	C=0;CL=0;
	int contmc=0;
	real[int] auxii(snaps.n),auxjj(snaps.n);
	for(int ii=0;ii<C.n;ii++)
	{
        if(mpirank==ii%mpisize)
        {
            real[int] aux=prod*snaps(:,ii);
            for(int jj=ii;jj<C.m;jj++)
            {
                CL(ii,jj) = snaps(:,jj)'*aux;
                if(ii!=jj)CL(jj,ii)=CL(ii,jj);
            }
        }
        contmc++;
	}
	pause;
	mpiAllReduce(CL,C,mpiCommWorld,mpiSUM);
	// write("verify/correlation.txt",C,0,0);
}
EndMacro

///////////////////////////////////////////////////////////////////////////////
// Calculo de autovalores 
///////////////////////////////////////////////////////////////////////////////
NewMacro eigenvaluescompute(C,autoval,autovect)
{
	autovect=0; autoval=0;
	//real[int,int] I(C.n,C.m);I=0;
	//for(int ii=0;ii<I.n;ii++)I(ii,ii)=1;
	int k = dsyev(C,autoval,autovect); // devuelve los autovalores en forma ascendente
}
EndMacro

///////////////////////////////////////////////////////////////////////////////
// Seleccion del numero de bases 
///////////////////////////////////////////////////////////////////////////////
NewMacro howmanybasis(autoval,nPOD)
{
    nPOD=1;
    real[int] In(autoval.n);In=0;
    real[int] autovalsave=abs(autoval);
    real totalsum=autovalsave.sum;
    for(int ii=0;ii<In.n;ii++)
    {
        In(In.n-ii-1)=autovalsave.sum;
        autovalsave(ii)=0;
    }
    In/=totalsum;
    for(int ii=0;ii<In.n;ii++)
    {
        if(In(ii)>=(1.-epsPOD))
        {
            nPOD=ii+1;
            break;
        }
    }
    mpi(cout << "    from " << autoval.n << " to " << nPOD <<" basis, with energy=" << In(nPOD-1) << endl;)
}
EndMacro

///////////////////////////////////////////////////////////////////////////////
// Construccion de la base POD
///////////////////////////////////////////////////////////////////////////////
NewMacro baseconstrunction(snaps,autovect,autoval,base,nPOD)
{
	for(int ii=0; ii<nPOD; ii++)
	{
		base[ii][]=snaps*autovect(:,autovect.m-ii-1);
		base[ii][]/=sqrt(abs(autoval(autovect.m-ii-1)));
	}
}
EndMacro

///////////////////////////////////////////////////////////////////////////////
// Funcion resumen
///////////////////////////////////////////////////////////////////////////////
NewMacro POD(snaps,prod,base,nPOD,autoval)
real[int] autoval(snaps.m); // Vector de autovalores ordenados de menor a mayor
{
	write("Output.txt","    Starting the correlation matrix..." ,1,1);
	real[int,int] C(snaps.m,snaps.m);
	real time=mpiWtime();
	matrixcorrelacion(snaps,C,prod);
	time=mpiWtime()-time;
	write("Output.txt","    - time="+time,1,1);
	real[int,int] autovect(C.n,C.n); // Matriz que contendra los autovectores en columna
	write("Output.txt","    Eigenvalue computation...",1,1);	
	eigenvaluescompute(C,autoval,autovect);
	write("Output.txt","    Base construction...",1,1);
	howmanybasis(autoval,nPOD);
	baseconstrunction(snaps,autovect,autoval,base,nPOD);
}
EndMacro
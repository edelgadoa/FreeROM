// Archivo de pruebas para realizar la transformada de fourier en FreeFEM++ Paralelo

// Preliminares
include "macro_ddm.idp"
load "PETSc"
macro dimension() 2; \\ EOM 


int[int] myN2o;
macro ThN2O() myN2o // EOM
int[int] labPeriodic = [2, 4, 1, 3];
macro ThPeriodicity() labPeriodic // EOM

// Malla
int NN = 64;
real x01 = -0.5, x11 = 0.5;
real y01 = -0.5, y11 = 0.5;
mesh ThG = square(NN,NN,[x01+(x11-x01)*x,y01+(y11-y01)*y],flags=1);
mesh Th = ThG;

func Pk = P2;                       // finite element space

// Creación de matrices distribuidas
Mat A;

// Decompose and distribute the mesh, and allocates data structures for the communication and distributed matrix
MatCreate(Th, A, Pk);

// Definición de elementos finitos
fespace Wh(Th, Pk, periodic=[[labPeriodic[0],y], [labPeriodic[1],y], [labPeriodic[2],x], [labPeriodic[3],x]]);                 // local finite element space on the local mesh Th_i

// Cálculo de la transformada de fourier
func uf = exp(-(x^2+y^2));
// Th = adaptmesh(Th, uf);
Wh u=uf;
plotMPI(Th, u, Pk, def, real, cmm = "Global solution");

Wh<complex> uF = uf;

int k = NN/2.-1;

complex[int] uFourierv = uF[];
include "fourier2D.idp"

complex[int,int] FCoefs(2*k+1,2*k+1);
complex[int,int] FCoefsL(2*k+1,2*k+1);

FCoefsL = FourierTransform2D(uFourierv,k);

mpiAllReduce(FCoefsL,FCoefs,mpiCommWorld,mpiSUM);

// cout << FCoefs;

// Calculamos la transformada inversa, si sabemos los coeficientes


Wh<complex> uReal; 
uReal[] = FourierInverse2D(FCoefs);

Wh uRReal;
uRReal = real(uReal);
plotMPI(Th,uRReal,Pk,def,real, cmm = "Retransformada");

real[int,int] energyhat = energycomputation(FCoefs,FCoefs);

real[int] spectrum = energyk2d(energyhat);
cout << spectrum << endl;

//real[int] spectrum = espectro2D(uFourierv, uFourierv, k);
//cout << spectrum << endl;




// Archivo de pruebas para realizar la transformada de fourier en FreeFEM++ Paralelo

// Preliminares
load "PETSc"
macro dimension() 2; \\ EOM 
include "macro_ddm.idp"

// Malla
int NN = 64;
real x01 = -0.5, x11 = 0.5;
real y01 = -0.5, y11 = 0.5;
mesh ThG = square(NN,NN,[x01+(x11-x01)*x,y01+(y11-y01)*y],flags=1);
mesh Th = ThG;

func Pk = P1;                       // finite element space

// Creación de matrices distribuidas
Mat A;
// Decompose and distribute the mesh, and allocates data structures for the communication and distributed matrix
MatCreate(Th, A, Pk);

// Definición de elementos finitos
fespace Wh(Th, Pk);                 // local finite element space on the local mesh Th_i

// Cálculo de la transformada de fourier
func uf = exp(-(x^2+y^2));
// Th = adaptmesh(Th, uf);
plotMPI(Th, u, Pk, def, real, cmm = "Global solution");

Wh<complex> uFourier = uf;
// plot(uFourier);

int k = 15;

include "fourier.idp"

complex[int,int] FCoefs(2*k+1,2*k+1);

FCoefs = FourierTransform2D(k);

//cout << FCoefs;

// Calculamos la transformada inversa, si sabemos los coeficientes

Wh<complex> uReal; 
uReal[] = FourierInverse2D(FCoefs);
// plotMPI(uReal);
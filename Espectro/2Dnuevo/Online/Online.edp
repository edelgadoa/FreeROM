///////////////
// FreeROM 
/////////////// 

// Programa principal que resuelve la fase ONLINE LPS 2D (P2-P2)

// Cargamos librerias
load "iovtk" 

// Cargamos macros y funciones i/o
include "../Auxiliary/Macros_2D.idp"
include "../Auxiliary/IO.idp" //falla el mpirank -> posiblemente necesite ejecutarlo con freefemmpi
include "../Auxiliary/search.idp"

// Creamos la malla
include "../Auxiliary/Malla.idp"

// Definimos los espacios de EF
include "../FOM/FE_Spaces_NoStab_VP_2D.idp"

// Definimos las matrices de interpolacion y derivacion
include "../FOM/Interp_matrix_NoStab_VP_2D.idp"

// Definimos los parametros a usar
include "../Auxiliary/Parametros_2D.idp"

// Defino funciones para ortonormalizar y productos escalares / normas
include "../Auxiliary/Normas.idp"

/*
varf NormaVel([uu,uuY],[vv,vvY]) = int2d(Th)(GradUGradV(uu,vv));
matrix MNormaVel = NormaVel(Vh2P2per, Vh2P2per);
*/

// Cargamos Bases y Matrices
// include "Load_Basis_Data.idp"
int Nbases = 1;
// Cargo los elementos del EIM (tanto para Smago como para LPS)
include "../Offline/EIM_Data.idp"

Reynolds = 4892;

//////////////////////////
// Cargamos la condicion inicial
Vh3P2per [uEF0,uEF0Y,uEF0P];

Reynolds = Refijo;

readvector("../Snapshots/Vx_" + Reynolds + "_t_" +T0+ ".txt", real, SolX, 0); uEF0[] = SolX;
readvector("../Snapshots/Vy_" + Reynolds + "_t_" +T0+ ".txt", real, SolY, 0); uEF0Y[] = SolY;
readvector("../Snapshots/P_" + Reynolds + "_t_" +T0+ ".txt", real, SolP, 0); uEF0P[] = SolP;

// Resolvemos el problema de FE, y calculamos el tiempo en resolver
real timeFE = clock();

Vh3P2per [uEF, uEFY, uEFP]; 
VhP2per uprev, uprevY;
VhP1dc uEFdX, uEFdY, uEFYdX, uEFYdY; //las derivadas de uEF del paso anterior CON LEVANTAMIENTO
VhP1dcper Gr; // Para el termino de VMS-Smagorinsky

include "../FOM/FE_VMS_2D.idp"

VhP2per UEF, UEFY, UEFP;
UEF = uEF; UEFY = uEFY; UEFP = uEFP;

//plot([uEF, uEFY], cmm = "FE solution for Re = " + Reynolds);
//plot(UEFP, cmm = "FE solution for Re = " + Reynolds);

timeFE = clock() - timeFE; 

/////////////////////////

/////////////////////////
//	Resolvemos el problema de RB, y calculamos el tiempo en resolver

real[int] uRBv(Nbases); // Vectores donde almaceno la Soluci√≥n Reducida
real[int,int] MRB(Nbases,Nbases); // Matriz para resolver el sistema
real[int] bRB(Nbases); // Segundo miembro para resolver el sistema

real timeRB = clock();

// include "../Offline/RB_VMSSmago.idp"

Vh2P2per [uN, uNY];
VhP2per uNP;

VhP2per UN, UNY;

/*
uN[] = MBaseV*uRB(0:NbasesV-1);
uNP[] = MBaseP*uRB(NbasesV:Nbases-1);
*/

//plot([uN, uNY], cmm = "RB solution for Re = " + Reynolds);
plot(uNP, cmm = "RB solution for Re = " + Reynolds);
UN = uN; UNY = uNY;

timeRB = clock() - timeRB;
////////////////////////

// Calculo errores y speedups
Vh2P2 [uERR, uERRY];
VhP2 uERRP;
VhP2 UERR, UERRY;

UERR = abs(UEF - UN);
UERRY = abs(UEFY - UNY);
uERRP = abs(UEFP - uNP);


[uERR, uERRY] = [UERR, UERRY];

VhP2per uFijo, uFijoY; //Para la normaT
VhP1dcper uFijodX, uFijodY, uFijoYdX, uFijoYdY;
Mat prodV = MatAVh2P2per; 
{
	varf a([u,uY],[v,vY]) = int2d(ThL)((1./Refijo+MOD(uFijo))*gradugradv(u,uY,v,vY));
	// matrix prodVtemp = a(Vh2P2perL, Vh2P2perL);
	// Mat prodVT = prodVtemp;
	// prodV = prodVT;
	prodV = a(Vh2P2perL, Vh2P2perL);
}

real normErrorV = normX(uERR[], prodV);
real normErrorP = normL2(uERRP[]);


real speedup = timeFE/timeRB;

mpi(cout<<"-------------------------------"<<endl;
cout<<" "<<endl;
cout<<" "<<endl;
cout<<"-------------------------------"<<endl;
cout<<"Error T para velocidades= "<<normErrorV<<endl;
cout<<"Error L2 para presiones=  "<<normErrorP<<endl;
cout<<"-------------------------------"<<endl;
cout<<"Tiempo en resolver por F.E.:  "<<timeFE<<"s"<<endl;
cout<<"Tiempo en resolver por B.R.:  "<<timeRB<<"s"<<endl;
// cout<<"Numero iteraciones para B.R.: "<<RBit<<"s"<<endl;
cout<<"-------------------------------"<<endl;
cout<<"Speedup de la resolucion :    "<<speedup<<endl;
cout<<"-------------------------------"<<endl;)



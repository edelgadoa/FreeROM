///////////////
// FreeROM 
/////////////// 

// Defino las matrices de producto escalar, que voy a considerar para la ortonormalizacion #TODO: definir pescX en [P2,P2,P1]
Mat MPescT;
Mat MPescV;//MatAVh2P2per;// = MatAVh2P2per;
{
	macro def(i) [i, i#Y] //
	macro init(i) [i, i] // EOM

	MatCreate(ThL, MPescV, Pk2P2);
}

Mat MPescP;
MatCreate(ThL, MPescP, PkP1);
{
	
	varf pescV([uu,uuY],[vv,vvY]) = int2d(ThL)(GradUGradV(uu,vv));
    matrix PescV =  pescV(Vh2P2perL, Vh2P2perL);
	MPescV = PescV;//pescV(Vh2P2perL, Vh2P2perL);

	varf pescP(u,v) = int2d(ThL)(u*v);
    matrix PescP = pescP(VhP1perL, VhP1perL);
	MPescP = PescP;
}
///////////////////////////////////////////////////////

Mat DiffPEM;
Mat DivPPEM;
Mat PenPEM;// = MatAVhP1per;
Mat DTPEM;// = MatAVh2P2per;
{
	macro def(i) [i, i#Y] // EOM
	macro init(i) [i, i] // EOM
	MatCreate(ThL, DiffPEM, Pk2P2);
	MatCreate(ThL, DTPEM, Pk2P2);
}
MatCreate(ThL, PenPEM, PkP1);


{
	varf DiffPE([uu,uuY], [v,vY]) = int2d(ThL)(GradUGradV(uu,v));
	matrix DiffPEMT = DiffPE(Vh2P2perL,Vh2P2perL);
//	Mat DiffPEMTemp = DiffPEMT;
	DiffPEM = DiffPEMT;// (Vh2P2perL,Vh2P2perL); //DiffPEMTemp;

	varf DivPPE([uu,uuY], [vP]) = int2d(ThL)(Div(uu)*vP);
	matrix DivPPEMT = DivPPE(Vh2P2perL, VhP1perL);
	Mat DivPPEMTemp(MatAVhP1per, MatAVh2P2per, DivPPEMT);
	DivPPEM = DivPPEMTemp;

	varf PenPE(uP, vP) = int2d(ThL)(epspen*uP*vP);
	matrix PenPEMT = PenPE(VhP1perL, VhP1perL);
	// Mat PenPEMTemp = PenPEMT;
	PenPEM = PenPEMT;//(VhP1perL, VhP1perL);; //PenPEMTemp;

	varf DTPE([uu,uuY], [v,vY]) = int2d(ThL)(UporV(uu,v));
	matrix DTPEMT = DTPE(Vh2P2perL, Vh2P2perL);
	// Mat DTPEMTemp = DTPEMT;
	DTPEM = DTPEMT;//(Vh2P2perL, Vh2P2perL); //DTPEMTemp;
}

Mat[int] ConvPEM(2*Nbases); // Simplemente inicializo, dentro del bucle del greedy definir√© los prod. esc. segun vaya calculando las bases


Mat[int] SmagoPEM(Mbases);
{
	for (int s=0; s<Mbases; s++){
		// Mat SmagoPEMs;//
		macro def(i) [i, i#Y] //
		macro init(i) [i, i] // EOM
		MatCreate(ThL, SmagoPEM[s], Pk2P2);
		// Matrices Smago
		varf SmagoPE([uu,uuY],[v,vY]) = int2d(ThL)((CS*hTriangle)^2*EIMSmago[s]*GradUGradV(uu,v));
		matrix SmagoPEMT = SmagoPE(Vh2P2perL, Vh2P2perL);
		// SmagoPEMs = SmagoPE(Vh2P2perL, Vh2P2perL);
		SmagoPEM[s] = SmagoPEMT;
	}
}
include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/fourier.idp";

infoparam;
readTh(NN);

// plot(Th);
write("Output.txt","Starting...",0,1);
VhGP1 <complex> ZZ,zz,ZZY,ZZ2,err;
int cont=0;
real module;
for(int k=-NN/2;k<=NN/2;k++)
{
	for(int l=-NN/2;l<=NN/2;l++)
	{
        for(int m=-NN/2;m<=NN/2;m++)
        {
            module=sqrt(k^2+l^2+m^2);
            if(sqrt(module)<1)
            {
                ZZ[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)]=0.;
            }
            else
            {
                ZZ[][(k+NN/2)+(NN+1)*(l+NN/2)+(NN+1)^2*(m+NN/2)]=module^(-(alpha+2)/2);
                // The exponent is -(alpha+dim-1)/2, dim-1 is the dimensions "added by the integral"
            }
        }
		
	}
}
zz[]=DFFT3d(ZZ[],1,NN/2);
zz[]/=zz[].max;

VhGP1 u0,u0Y,u0Z,u0P;
u0P[]=0;
u0=real(zz);
u0Y=real(zz(y,z,x));
u0Z=real(zz(z,x,y));

/*varf a(defVP(u),defVP(v))=intN(ThL)(gradgrad(u,v)-div(v)*uP+div(u)*vP)
			+intN(Th)(gradgrad(u0,v));
matrix A=a(VhLVP,VhLVP);
real[int] b=a(0,VhLVP);
VhGVP defVP(usol);
solvesystem(A,b,usol,VP);
*/
VhGVP defVP(usol);
defVP(usol)=[u0,u0Y,u0Z,u0P];
plot(defVel(usol),value=1,fill=1,wait=1);

write("./txt/icNN"+NN+"alpha"+alpha+".txt",usol[],0,0);
string DataName="Vel Pres";
int[int] Order=[1,1,1];
bool Bin=true;
savevtk("./txt/icNN"+NN+"alpha"+alpha+".vtu", Th, [usol,usolY,usolZ],usolP, dataname=DataName, order=Order,bin=Bin,append=true);	
write("Output.txt","Done.",1,1);

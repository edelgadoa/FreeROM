// Transformada de Fourier 3D 

////////////////////////////////////////////////////////////////////////////////////
func complex[int,int] vector2matrix3D(complex[int] & u, int n){
    int dim = 2*n+1;
    complex[int,int] M(dim,dim^2); M = 0.;
    for(int k=-n;k<=n;k++){
        for(int l=-n;l<=n;l++){
            for(int m=-n;m<=n;m++){
                M(k+n,(l+n)+dim*(m+n)) = u((k+n)+dim*(l+n)+dim^2*(m+n));
            }	
        }
    }
    return M;
}

///////////////////////////////////////////////////////////////////////////////
func complex[int] matrix3D2vector(complex[int,int] & M, int n){
    int dim = 2*n+1;
    complex[int] uk(dim^3);
    for(int k=-n;k<=n;k++){
        for(int l=-n;l<=n;l++){
            for(int m=-n;m<=n;m++){
                uk((k+n)+dim*(l+n)+dim^2*(m+n)) = M(k+n,l+n+dim*(m+n));
            }	
        }
    }
    return uk;
}

///////////////////////////////////////////////////////////////////////////////

func complex[int] dft3D(complex[int] & u, real epsi, int n){
    // n = NN/2
	// - Si epsi=-1, obtenemos la transformada
	// - Si epsi= 1, obtenemos la inversa

    int dim = 2*n+1;
    complex w = exp(epsi*2*pi*1i/dim);

    // Pasamos de vector a matrix (el 3D se consigue añadiendo columnas)
    complex[int,int] M(dim,dim^2);
    M = vector2matrix3D(u,n);

    // Calculamos la transformada (fuerza bruta)
    complex[int,int] Mk(dim,dim^2);
    Mk = 0;
    for(int k=-n;k<=n;k++){
        for(int l=-n;l<=n;l++){
            for(int m=-n;m<=n;m++){
                for(int kk=-n;kk<=n;kk++){
                    for(int ll=-n;ll<=n;ll++){
                        for(int mm=-n;mm<=n;mm++){
                            Mk(k+n,l+n+dim*(m+n)) += w^(k*kk+l*ll+m*mm)*M(kk+n,ll+n+dim*(mm+n));
                        }	
                    }
                }
            }	
        }
    }

    // Recuperamos la forma vectorial
    complex[int] uk(dim^3);
    uk = matrix3D2vector(Mk,n);

	if(epsi<0)uk/=(dim^3); // Normalizar la transformada, sólo se hace en la directa
    return uk;
}


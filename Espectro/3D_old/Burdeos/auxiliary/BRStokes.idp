macro initialization(StoN,NSN,SmagoN,N)
real[int,int] 	StoN#nu(N,N),
				StoN#div(N,N),
				StoN#pen(N,N);
StoN#nu=0;
StoN#div=0;
StoN#pen=0;
real[int]   b#StoN#nu(N),
			b#StoN#div(N);
b#StoN#nu=0;
b#StoN#div=0;
// EOM

macro bigtosmall(StoNs,NSNs,SmagoNs,N)
StoNs#nu=StoNnu(0:N-1,0:N-1);
StoNs#div=StoNdiv(Nvmax-Nv:Nvmax+Np-1,0:N-1);
StoNs#pen=StoNpen(Nvmax-Nv:Nvmax+Np-1,Nvmax-Nv:Nvmax+Np-1);
b#StoNs#nu=bStoNnu(0:N-1);
b#StoNs#div=bStoNdiv(Nvmax-Nv:Nvmax-Nv+Np-1);
//EOM

macro StoNnuN(ii,jj)
{
	StoNnu(ii,jj)=innerprod(baseVel[ii][],baseVel[jj][],matrixStoNnu);
}
//EOM
macro bStoNnuN(ii)
{
	bStoNnu(ii)=innerprod(GVel[],baseVel[ii][],matrixStoNnu);
}
//EOM
macro StoNdivN(ii,jj)
{
	StoNdiv(ii+Nvmax,jj)=innerprod(basePres[ii][],baseVel[jj][],matrixStoNdiv);
}
//EOM
macro bStoNdivN(ii)
{
	bStoNdiv(ii+Nvmax)=innerprod(basePres[ii][],GVel[],matrixStoNdiv);
}
//EOM
macro StoNpenN(ii,jj)
{
	StoNpen(ii+Nvmax,jj+Nvmax)=innerprod(basePres[ii][],basePres[jj][],matrixStoNpen);
}
//EOM
macro matrixBR(ii)
{
	for (int jj=0;jj<=ii; jj++)
	{
		StoNnuN(2*ii,2*jj);StoNnuN(2*ii,2*jj+1);StoNnuN(2*ii+1,2*jj);StoNnuN(2*ii+1,2*jj+1);
		StoNdivN(ii,2*jj);StoNdivN(ii,2*jj+1);
		StoNpenN(ii,jj);
		if(jj<ii)
		{
			StoNnuN(2*jj,2*ii);StoNnuN(2*jj,2*ii+1);StoNnuN(2*jj+1,2*ii);StoNnuN(2*jj+1,2*ii+1);
			StoNdivN(jj,2*ii);StoNdivN(jj,2*ii+1);
			StoNpenN(jj,ii);
		}
	}
	bStoNnuN(2*ii);bStoNnuN(2*ii+1);
	bStoNdivN(ii);
}
//EOM

NewMacro BRSta(uBR,uNb,Reynold,StoN,NSN,SmaN);
{
	real[int,int] StoNnuF(N,N),StoNdivF(N,N),StoNpenF(N,N),ASta(N,N),Ainv(N,N);
	StoNnuF=1./Reynold*StoN#nu;
	// if(mpirank==0)cout << StoN#nu << endl;
	
	StoNdivF=StoN#div;
	// if(mpirank==0)cout << StoNdivF << endl;
	
	StoNpenF=StoN#pen;
	// if(mpirank==0)cout << StoNpenF << endl;
	
	ASta=StoNnuF;
	ASta+=StoNdivF;
	ASta-=StoNdivF';
	ASta+=StoNpenF;
	real[int] bStoNnuF(N),bStoNdivF(N),bSta(N);
	bStoNnuF=1./Reynold*b#StoN#nu;
	// if(mpirank==0)cout << bStoNnuF << endl;
	
	bStoNdivF=b#StoN#div;
	// if(mpirank==0)cout << bStoNdivF << endl;
	
	bSta=-bStoNnuF;
	bSta-=bStoNdivF;
	VhGVel defVel(u1),defVel(u0);
	VhGP1 u1P;
	load "lapack";
	Ainv=ASta^-1;
	uNb=Ainv*bSta;
	if(GS==0)if(mpirank==0)cout << uNb << endl;
	u1[]=0;u1P[]=0;
	for(int s=0;s<Nv;s++)u1[]+=uNb(s)*baseVel[s][];
	for(int s=0;s<Np;s++)u1P[]+=uNb(Nv+s)*basePres[s][];
	defVP(uBR)=defVP(u1);
	// write("cond"+ip+".txt",cond(ASta),1,0);
}
EndMacro
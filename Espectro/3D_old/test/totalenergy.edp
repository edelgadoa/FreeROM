include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/macro_ddm.idp";
include "../auxiliary/fourier.idp";
IFMACRO(prob,"Stokes")include "../auxiliary/EFStokes.idp";ENDIFMACRO
IFMACRO(prob,"NS")include "../auxiliary/EFNS.idp";ENDIFMACRO
IFMACRO(prob,"Smago")include "../auxiliary/EFSmago.idp";ENDIFMACRO

infoparam;

write("Output.txt","Computing the EF solutions with "+mpisize+" processors for Re=",0,1);
write("Output.txt",vRe,1,1);
int k1=9,k2=NN/2,kc=(k2+k1)/2;
readTh(NN);

int[int] unos(VhGP1.ndof);//,uY;
unos=1;
// u=x^2+1;
// cout << intN(Th)(u) << endl;
for(int ii=NN;ii<unos.n;ii+=NN+1)
{
 	unos[ii]=0;
 }
for(int ii=NN*(NN+1);ii<(NN+1)^2;ii++)
{
	unos[ii]=0;
}

matrix VPtou1,VPtou2,GradXu1,GradYu1,GradXu2,GradYu2;
{
	int[int] cs2=[0]; 
	VPtou1 = interpolate(VhGP1,VhGVP,U2Vc=cs2);
	GradXu1 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=1);
	GradYu1 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=2);
	cs2=[1]; 
	VPtou2 = interpolate(VhGP1,VhGVP,U2Vc=cs2);
	GradXu2 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=1);
	GradYu2 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=2);
}
readic(16,alpha);
// real caracVel=u0[].max;
// cout << "caracVel=" << caracVel << endl;


// plot(defVel(u0),value=1,fill=1,wait=1);
readparameters(ReSta);
VhGVP defVP(uEF);
VhGP1 uP1,uP1Y,energy,energyhat,ubar,ubarY,uprima,uprimaY;
VhGP1 gradXuP1,gradYuP1,gradXuP1Y,gradYuP1Y,disenergy;
VhGP1 <complex> uhat,uhatY,uhatred,uhatredY,ubarhat,ubarhatY,uprimahat,uprimahatY,aux;
real[int] term1(nEF),term2(nEF),term3(nEF),term4(nEF),term5(nEF),term6(nEF),term7(nEF);
int cont=0;
for(int iRe=0;iRe<niRe;iRe++)
{
	cont=0;
	uEF[]=0;
	Re=vRe(iRe);
	// defVP(uEF)=defVP(u0);
	// real nu=caracVel/Re[0];
	for(real tsave=dtsave;tsave<=T+epsEF;tsave+=dtsave)
	{
		iRe=niRe;
		{
			ifstream fileRe("../solutions"+esquema+"/txt/SolEF"+prob+"NN"+NN+"Reynold"+Re[0]+"t"+tsave+".txt");
			fileRe >> uEF[];
		}
		write("Output.txt","ti="+tsave,1,1);
		term1(cont)=intN(Th)(uporv(uEF,uEF)/2);
		// plot(defVel(uEF),value=1,cmm="ti="+tsave);
		uP1[]=VPtou1*uEF[];
		uP1Y[]=VPtou2*uEF[];
		uP1[]=compbycomp(uP1[],unos);
		uP1Y[]=compbycomp(uP1Y[],unos);
		energy[]=energycomputation(uP1[],uP1Y[]);
		energy[]/=NN^2;
		energy[]=compbycomp(energy[],unos);
		term2(cont)=energy[].sum;
		uhat[]=DFFT2d(uP1[],-1,NN/2);
		uhatY[]=DFFT2d(uP1Y[],-1,NN/2);
		energyhat[]=energycomputation(uhat[],uhatY[]);
		energyhat[]/=NN^2;
		energyhat[]*=(NN+1)^2;
		energyhat[]=compbycomp(energyhat[],unos);
		term3(cont)=energyhat[].sum;
		real[int] energykk=energyk(energyhat[],NN);
		term4(cont)=energykk.sum;

		// gradXuP1[]=GradXu1*uEF[];
		// gradYuP1[]=GradYu1*uEF[];
		// gradXuP1Y[]=GradXu2*uEF[];
		// gradYuP1Y[]=GradYu2*uEF[];
		// Espectro
		// else
		// {
		// 	energy[]=compbycomp(energy[],unos);
		// 	term1(cont)=energy[].sum;
		// 	term2(cont)=energykk.sum;
		// 	// energyhat[]=compbycomp(energyhat[],unos);
		// 	// term2(cont)=energyhat[].sum;
		// }
		
		// disenergy[]=energycomputation(gradXuP1[],gradYuP1[],gradXuP1Y[],gradYuP1Y[]);
		// energykk=gradenergyk(energyhat[],NN);
		// if(1)
		// {
		// 	term3(cont)=intN(Th)(gradgrad(uEF,uEF));
		// 	term4(cont)=energykk.sum*8.*pi^2;
		// }
		// else
		// {
		// 	disenergy[]=compbycomp(disenergy[],unos);
		// 	term3(cont)=disenergy[].sum/NN^2;
		// 	term4(cont)=energykk.sum*8.*pi^2;
		// }
		// // cout << term3(cont) << "=" << term4(cont) << endl;
		//
		// // quitamos escalas grandes
		// uhatred[]=bigscaleszero(uhat[],k1);
		// uhatredY[]=bigscaleszero(uhatY[],k1);
		// // plot(uhatred,value=1,fill=1,wait=1);
		// if(1)
		// {
		// 	energyhat[]=energycomputation(uhatred[],uhatredY[]);
		// 	energyhat[]=compbycomp(energyhat[],unos);
		// 	term7(cont)=energyhat[].sum;
		// }
		// else
		// {
		// 	aux[]=DFFT2d(uhatred[],1,NN/2);
		// 	uP1[]=complex2real(aux[]);
		// 	aux[]=DFFT2d(uhatredY[],1,NN/2);
		// 	uP1Y[]=complex2real(aux[]);
		// 	term7(cont)=intN(Th)(uporv(uP1,uP1)/2.);
		// }
		// uhatred[]=intervalscaleszero(uhat[],k1,k2);
		// uhatredY[]=intervalscaleszero(uhatY[],k1,k2);
		//
		// ubarhat[]=intervalscaleszero(uhat[],k1,kc);
		// ubarhatY[]=intervalscaleszero(uhatY[],k1,kc);
		//
		// uprimahat[]=intervalscaleszero(uhat[],kc,k2);
		// uprimahatY[]=intervalscaleszero(uhatY[],kc,k2);
		//
		// // uhatred[]-=ubarhat[];
		// // uhatred[]-=uprimahat[];
		// // if(mpirank==0)
		// // {
		// // 	cout << uhatred[].max << endl;
		// // 	cout << uhatred[].min << endl;
		// // }
		//
		// aux[]=DFFT2d(ubarhat[],1,NN/2);
		// ubar[]=complex2real(aux[]);
		// aux[]=DFFT2d(ubarhatY[],1,NN/2);
		// ubarY[]=complex2real(aux[]);
		//
		// aux[]=DFFT2d(uprimahat[],1,NN/2);
		// uprima[]=complex2real(aux[]);
		// aux[]=DFFT2d(uprimahatY[],1,NN/2);
		// uprimaY[]=complex2real(aux[]);
		//
		// // plot(ubar,value=1,fill=1,wait=1);
		// // plot(uprima,value=1,fill=1,wait=1);
		//
		// term5(cont)=intN(Th)(gradgrad(uprima,uprima));
		// term6(cont)=intN(Th)(gradgrad(ubar,ubar))*(k2^(4./3.)-kc^(4./3.))/(kc^(4./3.)-k1^(4./3.));
		// // cout << term5(cont) << "=" << term6(cont) << endl		
		cont++;
	}
	write("./totalenergy/exactNN"+NN+"Reynold"+Re[0]+".txt",term1,0,0);
	write("./totalenergy/approxuNN"+NN+"Reynold"+Re[0]+".txt",term2,0,0);
	write("./totalenergy/approxuhatNN"+NN+"Reynold"+Re[0]+".txt",term3,0,0);
	write("./totalenergy/approxspectrumNN"+NN+"Reynold"+Re[0]+".txt",term4,0,0);
	// write("term5NN"+NN+"Reynold"+Re[0]+".txt",term5,0,0);
	// write("term6NN"+NN+"Reynold"+Re[0]+".txt",term6,0,0);
	// write("term7NN"+NN+"Reynold"+Re[0]+".txt",term7,0,0);
}
write("Output.txt","Done.",1,1);

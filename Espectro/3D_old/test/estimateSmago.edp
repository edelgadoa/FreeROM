include "../auxiliary/write.idp";
include "../auxiliary/parameters.idp";
include "../auxiliary/macros.idp";
include "../auxiliary/macro_ddm.idp";
include "../auxiliary/fourier.idp";
IFMACRO(prob,"Stokes")include "../auxiliary/EFStokes.idp";ENDIFMACRO
IFMACRO(prob,"NS")include "../auxiliary/EFNS.idp";ENDIFMACRO
IFMACRO(prob,"Smago")include "../auxiliary/EFSmago.idp";ENDIFMACRO

infoparam;
int NO=512/2^4;

write("Output.txt","Computing the estimate with Smago with "+mpisize+" processors for Re=",0,1);
write("Output.txt",vRe,1,1);
int k1=8,k2=NN*sqrt(2),kc=1./hTri;
readTh(NN);
mesh ThO=readmesh("../mesh/meshNN"+NO+".msh");
creationVh(ThO,VhO);

// int[int] unos(VhGP1.ndof);//,uY;
// unos=1;
// // u=x^2+1;
// // cout << intN(Th)(u) << endl;
// for(int ii=NN;ii<unos.n;ii+=NN+1)
// {
//  	unos[ii]=0;
//  }
// for(int ii=NN*(NN+1);ii<(NN+1)^2;ii++)
// {
// 	unos[ii]=0;
// }

matrix VPtou1,VPtou2,OVPtou1,OVPtou2;//,GradXu1,GradYu1,GradXu2,GradYu2;
{
	int[int] cs2=[0];
	VPtou1 = interpolate(VhGP1,VhGVP,U2Vc=cs2);
	OVPtou1 = interpolate(VhOP1,VhOVP,U2Vc=cs2);
//	GradXu1 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=1);
//	GradYu1 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=2);
	cs2=[1];
	VPtou2 = interpolate(VhGP1,VhGVP,U2Vc=cs2);
	OVPtou2 = interpolate(VhOP1,VhOVP,U2Vc=cs2);
//	GradXu2 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=1);
//	GradYu2 = interpolate(VhGP1,VhGVP,U2Vc=cs2,op=2);
}
readic(16,alpha);
// real caracVel=u0[].max;
// cout << "caracVel=" << caracVel << endl;


// plot(defVel(u0),value=1,fill=1,wait=1);
readparameters(ReSta);
VhGVP defVP(uNS);
VhOVP defVP(uSmago);
VhGP1 uP1,uP1Y,uprima,uprimaY;
VhOP1 ubar,ubarY;
// VhOP1 uOP1,uOP1Y,uObar,uObarY,uOprima,uOprimaY;

// VhGP1 gradXuP1,gradYuP1,gradXuP1Y,gradYuP1Y,disenergy;
VhGP1 <complex> uhat,uhatY,uhatred,uhatredY,uprimahat,uprimahatY,aux;
VhOP1 <complex> ubarhat,ubarhatY,auxbar;
// VhOP1 <complex> uOhat,uOhatY,auxO,uOhatred,uOhatredY;
real[int] term1(nEF),term2(nEF),term3(nEF),term4(nEF),term5(nEF),term6(nEF),term7(nEF);
int cont=0;
// for(int iRe=0;iRe<niRe;iRe++)
// {
	cont=0;
	uNS[]=0;
	Re=10000;//vRe(iRe);
	// defVP(uNS)=defVP(u0);
	// real nu=caracVel/Re[0];
	for(real tsave=dtsave;tsave<=T+epsEF;tsave+=dtsave)
	{
		// iRe=niRe;
		{
			ifstream fileRe("../solutions"+esquema+"/txt/SolEFNSNN"+NN+"Reynold"+Re[0]+"t"+tsave+".txt");
			fileRe >> uNS[];
		}
		{
			ifstream fileRe("../solutions"+esquema+"/txt/SolBRSmagoNN"+NO+"N77Re"+Re[0]+"ti"+tsave+".txt");
			fileRe >> uSmago[];
		}
		write("Output.txt","ti="+tsave,1,1);
		uP1[]=VPtou1*uNS[];
		uP1Y[]=VPtou2*uNS[];

		// plot(uP1,value=1,fill=1,wait=1);
		
	    uhat[]=DFFT2d(uP1[],-1,NN/2);
	   	uhatY[]=DFFT2d(uP1Y[],-1,NN/2);
		// plot(uhat,value=1,fill=1,wait=1);
		uhat[]=intervalscaleszero(uhat[],k1,k2);
		uhatY[]=intervalscaleszero(uhatY[],k1,k2);
		// plot(uhat,value=1,fill=1,wait=1);
		aux[]=DFFT2d(uhat[],1,NN/2);
		uP1[]=complex2real(aux[]);
		aux[]=DFFT2d(uhatY[],1,NN/2);
		uP1Y[]=complex2real(aux[]);
		// plot(uP1,value=1,fill=1,wait=1);

		ubar[]=OVPtou1*uSmago[];
		ubarY[]=OVPtou2*uSmago[];
		// plot(uOP1,value=1,fill=1,wait=1);
		
	    ubarhat[]=DFFT2d(ubar[],-1,NO/2);
	   	ubarhatY[]=DFFT2d(ubarY[],-1,NO/2);
		// plot(ubarhat,value=1,fill=1,wait=1);
		
		ubarhat[]=intervalscaleszero(ubarhat[],k1,k2);
		ubarhatY[]=intervalscaleszero(ubarhatY[],k1,k2);
		// plot(ubarhat,value=1,fill=1,wait=1);
		
		auxbar[]=DFFT2d(ubarhat[],1,NO/2);
		ubar[]=complex2real(auxbar[]);
		auxbar[]=DFFT2d(ubarhatY[],1,NO/2);
		ubarY[]=complex2real(auxbar[]);
		//
		// plot(uOP1,value=1,fill=1,wait=1);
		
		// uprima=uNS-uSmago;
		// uprimaY=uNSY-uSmagoY;
		uprima=uP1-ubar;
		uprimaY=uP1Y-ubarY;
		//
		// plot(uprima,value=1,fill=1,wait=1);

		term1(cont)=intN(Th)(gradgrad(uprima,uprima));
		term2(cont)=intN(Th)(gradgrad(ubar,ubar))*(k2^(4./3.)-kc^(4./3.))/(kc^(4./3.)-k1^(4./3.));
		// cout << term5(cont) << "=" << term6(cont) << endl
		cont++;
	}
	write("estimateSmago/lefttermNN"+NN+"Reynold"+Re[0]+".txt",term1,0,0);
	write("estimateSmago/righttermNN"+NN+"Reynold"+Re[0]+".txt",term2,0,0);
// }
write("Output.txt","Done.",1,1);

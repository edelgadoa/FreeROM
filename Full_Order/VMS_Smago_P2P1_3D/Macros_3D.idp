///////////////
// FreeROM 
///////////////


// Definicion de macros generales para usar en los codigos, si se quiere usar por componentes (mas general)
macro Grad(u) [dx(u), dy(u), dz(u)] //EOM

macro div(u1,u2,u3) (dx(u1) + dy(u2) + dz(u3)) //EOM
macro gradugradv(u1,u2,u3,v1,v2,v3) (dx(u1)*dx(v1) + dy(u1)*dy(v1) + dz(u1)*dz(v1) 
								   + dx(u2)*dx(v2) + dy(u2)*dy(v2) + dz(u2)*dz(v2)
								   + dx(u3)*dx(v3) + dy(u3)*dy(v3) + dz(u3)*dz(v3)) //EOM
								   
macro ugradv(u1,u2,u3,v1,v2,v3) [[u1,u2,u3]'*[dx(v1),dy(v1),dz(v1)], 
						   		 [u1,u2,u3]'*[dx(v2),dy(v2),dz(v2)],
						   	  	 [u1,u2,u3]'*[dx(v3),dy(v3),dz(v3)]] //EOM

macro ugradvw(u1,u2,u3,v1,v2,v3,w1,w2,w3) (ugradv(u1,u2,u3,v1,v2,v3)'*[w1,w2,w3]) //EOM
macro ugradT(u1,u2,u3,temp) ([u1,u2,u3]'*Grad(temp)) //EOM
macro antisimetric(u1,u2,u3,v1,v2,v3,w1,w2,w3) (0.5*(ugradvw(u1,u2,u3,v1,v2,v3,w1,w2,w3)-ugradvw(u1,u2,u3,w1,w2,w3,v1,v2,v3))) //EOM
macro mod(u1x,u1y,u1z,u2x,u2y,u2z,u3x,u3y,u3z) (sqrt(u1x^2 + u1y^2 + u1z^2 +
	                                                 u2x^2 + u2y^2 + u2z^2 + 
													 u3x^2 + u3y^2 + u3z^2)) //EOM


// Si usamos vectores velocidad U,V,W en 3D con U=[U, UY, UZ], V=[V, VY, VZ], W=[W, WY, WZ]
// Las derivadas de U son UdX, UdY, UdZ ; UYdX, UYdY, UYdZ ; UZdX, UZdY, UZdZ 
// si se quiere usar en versi√≥n vectorial (notacion mas especifica)

macro Div(U) (dx(U) + dy(U#Y) + dz(U#Z)) //EOM
macro GradUGradV(U,V) (dx(U)*dx(V)     + dy(U)*dy(V)     + dz(U)*dz(V) 
					 + dx(U#Y)*dx(V#Y) + dy(U#Y)*dy(V#Y) + dz(U#Y)*dz(V#Y)
					 + dx(U#Z)*dx(V#Z) + dy(U#Z)*dy(V#Z) + dz(U#Z)*dz(V#Z)) //EOM

macro UGradV(U,V)  [[U, U#Y, U#Z]'*[dx(V),   dy(V),   dz(V)], 
				    [U, U#Y, U#Z]'*[dx(V#Y), dy(V#Y), dz(V#Y)],
				    [U, U#Y, U#Z]'*[dx(V#Z), dy(V#Z), dz(V#Z)]] //EOM
				   
macro UGradVW(U,V,W) (UGradV(U,V)'*[W, W#Y, W#Z]) //EOM
macro UGradT(U,temp) ([U, U#Y, U#Z]'*Grad(temp)) //EOM
macro Antisimetric(U,V,W) ( 0.5*(UGradVW(U,V,W) - UGradVW(U,W,V)) ) //EOM
macro MOD(U) (sqrt(U#dX^2 + U#dY^2 + U#dZ^2 + 
				   U#YdX^2 + U#YdY^2 + U#YdZ^2 +
				   U#ZdX^2 + U#ZdY^2 + U#ZdZ^2)) //EOM
macro UporV(U,V) ( [U,U#Y,U#Z]'*[V,V#Y,V#Z]) //EOM 



//// MACROS DEL PARALELO
macro pause() mpiBarrier(mpiCommWorld)// EOM
macro mpi(variable) if(mpirank==0){variable} //EOM

macro reduceSolution(uL,u,D,map)
{
	real[int] aux(u[].n); aux = 0;
	uL[] .*= D;
	aux(map) = uL[];
	u[] = 0;
	mpiAllReduce(aux, u[], mpiCommWorld, mpiSUM);
}
//EOM

NewMacro solvesystem(A,b,u)
{
	// Vh4P2L [u#L, u#LY, u#LZ, u#LP]; 
	MatAVh4P2 = A;
	
	Vh4P2L [uuS, uuSY, uuSZ, uuSP] = [1.0, 1.0, 1.0, 2.0];
	string[int] names(2);
	names[0] = "velocity";
	names[1] = "pressure";
	
	set(MatAVh4P2, sparams = "-pc_type lu -pc_factor_mat_solver_type mumps");
	
	//set(MatAVh4P2, sparams = "-ksp_type fgmres -pc_type fieldsplit -pc_fieldsplit_type schur -pc_fieldsplit_schur_fact_type lower -pc_fieldsplit_detect_saddle_point -fieldsplit_velocity_sub_pc_type lu " 
	// + " -fieldsplit_pressure_sub_pc_type lu -fieldsplit_velocity_sub_pc_factor_mat_solver_type mumps -fieldsplit_pressure_sub_pc_factor_mat_solver_type mumps -ksp_monitor -ksp_view " 
	// + " -fieldsplit_velocity_ksp_type gmres -fieldsplit_velocity_ksp_max_it 5 -fieldsplit_pressure_ksp_type gmres -fieldsplit_pressure_ksp_max_it 5 -ksp_rtol 1e-6", fields = uuS[], names = names);
	
	// set(MatAVh4P2,sparams = "-pc_type fieldsplit -pc_fieldsplit_type schur -pc_fieldsplit_schur_fact_type lower -fieldsplit_velocity_ksp_type preonly -fieldsplit_pressure_ksp_type preonly -fieldsplit_velocity_pc_type lu -fieldsplit_pressure_pc_type lu",  fields=uuS[], names=names);
	
// 	set(MatAVh4P2, sparams = "-ksp_monitor -ksp_type fgmres -ksp_converged_reason "
// + "-pc_type fieldsplit -pc_fieldsplit_type schur "
// + "-fieldsplit_velocity_pc_type gamg -fieldsplit_velocity_pc_gamg_sym_graph true -fieldsplit_pressure_ksp_max_it 5 "
// + "-fieldsplit_pressure_pc_type jacobi -fieldsplit_velocity_ksp_type preonly -pc_fieldsplit_schur_fact_type full", fields=uuS[], names=names);

	u[] = MatAVh4P2^-1*b;
	
	// mpi(cout<<"reduce solution"<<endl;)
	// reduceSolution(u#L,u,MatAVh4P2.D,mapVh4P2);
}
EndMacro








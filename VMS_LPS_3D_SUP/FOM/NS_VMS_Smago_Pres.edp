///////////////
// FreeROM 
///////////////

/////////////////////////////////////////
//// NS + VMS-Smago + Estab Pres (LPS)///
/////////////////////////////////////////

// Codigo para resolver el problema 3D de EF de VMS-Smago con estabilizacion LPS en la presion. 
// Elemento Finito P2-P2 (no estable) en vel-pres 

verbosity = 0;

// Cargamos librerias
load "iovtk" 
load "medit"

macro dimension() 3 //EOM
include "macro_ddm.idp"
load "PETSc"

// Cargamos macros
include "../Auxiliary/Macros_3D.idp"
include "../Auxiliary/IO.idp" 
include "../Auxiliary/search.idp"


// Creamos la malla
include "../Auxiliary/CuboNxNyNZ.idp"

real paredes = 1;
real techo = 2; //para las condiciones de contorno

// Definimos los parametros a usar
include "../Auxiliary/Parametros_3D.idp" 

// Definimos los espacios de EF y de los EF locales
include "FE_Spaces_NoStab_VP_3D.idp"


// Creo las matrices Mat asociadas a la malla en Descomposicion de Dominios


mapVh4P2 = restrict(Vh4P2,Vh4P2G,myN2o);
mapVhP2 = restrict(VhP2,VhP2G,myN2o);
mapVhP1dc = restrict(VhP1dc,VhP1dcG,myN2o);
mapVhP0 = restrict(VhP0, VhP0G, myN2o);
{
	macro def(i) [i, i#Y, i#Z, i#P] // EOM 
	macro init(i) [i, i, i, i] // EOM
	MatCreate(Th, MatVh4P2, [P2, P2, P2, P2]); 
}

MatCreate(Th, MatVhP1dc, P1dc);
MatCreate(Th, MatVhP2, P2);
	
{
	macro def(i) [i, i#Y, i#Z] // EOM
	macro init(i) [i, i, i] // EOM
	MatCreate(Th, MatVh3P2, [P2, P2, P2]); 
}


varf med(unused,v) = int3d(Th)(1.*v);
real[int] medk = med(0,VhP0);
VhP0 mk, tKcod, tKTcod, tau;
mk[] = sqrt(medk); 


// Definimos las matrices de interpolacion y derivacion
include "Interp_matrix_NoStab_VP_3D.idp"
include "Interp_matrix_NoStab_VP_3D_Global.idp"


// Incluimos el levantamiento
include "Levantamiento_3D.idp"


Reynolds = 1000;

/////////////////////////////////////////////
// Resolvemos el problema de EF: Cavidad 3D//
/////////////////////////////////////////////

Vh4P2 [uEF, uEFY, uEFZ, uEFP]; 
// VhP1dcL uEFdX, uEFdY, uEFdZ, uEFYdX, uEFYdY, uEFYdZ, uEFZdX, uEFZdY, uEFZdZ; //las derivadas de uEF del paso anterior CON LEVANTAMIENTO
// VhP2L uprevL, uprevLY, uprevLZ; // La sol del paso anterior con Levantamiento
VhP1dc Gr; // Para el termino de VMS-Smagorinsky

include "FE_VMS_LPS_3D.idp"


// Guardamos la solucion en paraview, con levantamiento

Vh4P2 [uEFLev, uEFLevY, uEFLevZ, uEFLevP];
uEFLev[] = uEF[] + Lev[];

Vh4P2G [uG, uGY, uGZ, uGP];
uG[] = reduceSolution(uEFLev[], uG[], MatVh4P2.D, mapVh4P2);

// int[int] fforder=[1,1,1,1];
savevtk("VMS_Smago_MPI_"+mpisize+".vtu", ThG, [uG, uGY, uGZ], uGP, dataname="Velocity Pressure", order=fforder, bin=true);
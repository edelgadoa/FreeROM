///////////////
// FreeROM 
/////////////// 

// Definimos las matrices de interpolacion Id-π_h y de derivadas PARA GOS EF GOCAGES

// Notacion de las matrices: IPhEFXEFY: Matriz de filtrado de EFX -> EFY -> EFX
//							 ------------------------------------------------------
//						     DXEFX: Matrix derivando respecto de x de TODOS los EF a la vez
//						     DYEFX: Matrix derivando respecto de y de TODOS los EF a la vez
//						     DZEFX: Matrix derivando respecto de z de TODOS los EF a la vez (3D)
//							 -------------------------------------------------------
//						     DNXEFX: Matrix derivando respecto de x de la componente N del EFX
//							 -------------------------------------------------------
//                           IPhDXNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           IPhDYNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           



// Matrices de filtrado. 
matrix IPhP2P1G, IPh4P24P1G, IPhP1dcP1G, IPh3P23P1G;

{
		matrix IdP2G,Id4P2G,IdP1dcG,IdP1G,Id3P2G; // IdEFX: Matriz Identidad con dim(EFX) grados de libertad
		{
			VhP2G faux2=1.;
			VhP1dcG faux1=1.;
			IdP2G = faux2[];
			IdP1dcG = faux1[];
            VhP1G fauxp1 = 1.;
            IdP1G = fauxp1[];
			Id3P2G=[[IdP2G, 0, 0],[0, IdP2G, 0],[0, 0, IdP2G]];
			Id4P2G=[[IdP2G, 0, 0, 0],[0, IdP2G, 0, 0],[0, 0, IdP2G, 0],[0, 0, 0, IdP2G]]; 
		}
		
		matrix PIg = interpolate(VhP1G,VhP1dcG); //(Id-πh) P1dc->P1->P1dc
		matrix IPg = interpolate(VhP1dcG,VhP1G); 
		matrix IPPIg = IPg*PIg;
		IPhP1dcP1G = IdP1dcG + (-1.)*IPPIg;
		
		matrix PI=interpolate(VhP1G,VhP2G);
		matrix IP=interpolate(VhP2G,VhP1G);
		matrix IPPI=IP*PI;
		IPhP2P1G = IdP2G + (-1.)*IPPI;  // (Id-πh) P2->P1->P2 
		
		matrix PI3=interpolate(Vh3P1G,Vh3P2G);
		matrix IP3=interpolate(Vh3P2G,Vh3P1G);
		matrix IPPI3=IP3*PI3;
		IPh3P23P1G = Id3P2G + (-1)*IPPI3; // (Id-πh) 3P2->3P1->3P2
		
		matrix PI4=interpolate(Vh4P1G,Vh4P2G);
		matrix IP4=interpolate(Vh4P2G,Vh4P1G);
		matrix IPPI4=IP4*PI4;
		IPh4P24P1G = Id4P2G + (-1)*IPPI4; // (Id-πh) 3P2->3P1->3P2
}

// Matrices de derivadas	
matrix DX4P2G, DY4P2G, DZ4P2G; // ∂x, ∂y, ∂z 4P2 -> 4P1dc en las 4 componentes 
matrix DXP2G, DYP2G, DZP2G;   // ∂x, ∂y, ∂z P2 -> P1dc (El elemento finito solo tiene una componente)
matrix D1X4P2G, D2X4P2G, D3X4P2G, D4X4P2G; // ∂x 4P2 -> P1dc en la componente 1, 2, 3 y 4 de 4P2
matrix D1Y4P2G, D2Y4P2G, D3Y4P2G, D4Y4P2G; // ∂y 4P2 -> P1dc en la componente 1, 2, 3 y 4 de 4P2
matrix D1Z4P2G, D2Z4P2G, D3Z4P2G, D4Z4P2G; // ∂z 4P2 -> P1dc en la componente 1, 2, 3 y 4 de 4P2

{
	matrix D1,D2,D3,D4; // Cada una de las componentes de EFX que derivo
	int[int] c0=[0,-1,-1,-1];
	int[int] c1=[-1,1,-1,-1];
	int[int] c2=[-1,-1,2,-1];
	int[int] c3=[-1,-1,-1,3];
	
	D1 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c0,op=1);
	D2 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c1,op=1);
	D3 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c2,op=1);
	D4 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c3,op=1);
	
	DX4P2G = D1 + D2 + D3 + D4;
	
	D1 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c0,op=2);
	D2 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c1,op=2);
	D3 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c2,op=2);
	D4 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c3,op=2);
	
	DY4P2G = D1 + D2 + D3 + D4;
	
	D1 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c0,op=3);
	D2 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c1,op=3);
	D3 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c2,op=3);
	D4 = interpolate(Vh4P1dcG,Vh4P2G,U2Vc=c3,op=3);
	
	DZ4P2G = D1 + D2 + D3 + D4;
	
	/////////////////////////////////////////////////////////
	
	int[int] cs2=[0];
	D1X4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=1);
	D1Y4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=2);
	D1Z4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=3);

	cs2=[1];
	D2X4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=1);
	D2Y4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=2);
	D2Z4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=3);

	cs2=[2];
	D3X4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=1);
	D3Y4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=2);
	D3Z4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=3);
	
	cs2=[3];
	D4X4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=1);
	D4Y4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=2);
	D4Z4P2G = interpolate(VhP1dcG,Vh4P2G,U2Vc=cs2,op=3);
	
	////////////////////////////////////////////////////////
	
	DXP2G = interpolate(VhP1dcG,VhP2G,op=1);
	DYP2G = interpolate(VhP1dcG,VhP2G,op=2);
	DZP2G = interpolate(VhP1dcG,VhP2G,op=3);

}

matrix DX3P2G, DY3P2G, DZ3P2G; 
{
	matrix D1,D2,D3; // Cada una de las componentes de EFX que derivo
	int[int] c0 = [0,-1,-1];
	int[int] c1 = [-1,1,-1];
	int[int] c2 = [-1,-1,2];
	
	D1 = interpolate(Vh3P1dcG,Vh3P2G,U2Vc=c0,op=1);
	D2 = interpolate(Vh3P1dcG,Vh3P2G,U2Vc=c1,op=1);
	D3 = interpolate(Vh3P1dcG,Vh3P2G,U2Vc=c2,op=1);
	
	DX3P2G = D1 + D2 + D3;
	
	D1 = interpolate(Vh3P1dcG,Vh3P2G,U2Vc=c0,op=2);
	D2 = interpolate(Vh3P1dcG,Vh3P2G,U2Vc=c1,op=2);
	D3 = interpolate(Vh3P1dcG,Vh3P2G,U2Vc=c2,op=2);
	
	DY3P2G = D1 + D2 + D3;
	
	D1 = interpolate(Vh3P1dcG,Vh3P2G,U2Vc=c0,op=3);
	D2 = interpolate(Vh3P1dcG,Vh3P2G,U2Vc=c1,op=3);
	D3 = interpolate(Vh3P1dcG,Vh3P2G,U2Vc=c2,op=3);
	
	DZ3P2G = D1 + D2 + D3;
	
}

// Matrices de derivada, con filtrado
matrix IPhD4X4P2G = IPhP1dcP1G * D4X4P2G; // (I-πh) de ∂x componente 4 de 4P2 (4P2 (derivo componente 4) -> P1dc (filtro)-> P1 -> P1dc)
matrix IPhD4Y4P2G = IPhP1dcP1G * D4Y4P2G; // (I-πh) de ∂y componente 4 de 4P2 (4P2 (derivo componente 4) -> P1dc (filtro)-> P1 -> P1dc)
matrix IPhD4Z4P2G = IPhP1dcP1G * D4Z4P2G; // (I-πh) de ∂z componente 4 de 4P2 (4P2 (derivo componente 4) -> P1dc (filtro)-> P1 -> P1dc)


matrix IPhDXP2G = IPhP1dcP1G * DXP2G; // (I-πh) de ∂x (P2 -> Derivo componente X -> P1dc (filtro) -> P1 -> P1dc) 
matrix IPhDYP2G = IPhP1dcP1G * DYP2G; // (I-πh) de ∂y (P2 -> Derivo componente Y -> P1dc (filtro) -> P1 -> P1dc)   
matrix IPhDZP2G = IPhP1dcP1G * DZP2G; // (I-πh) de ∂z (P2 -> Derivo componente Z -> P1dc (filtro) -> P1 -> P1dc)  

// Matrices filtrado, con derivada (∂x((I-πh u)))
matrix DXP2IPhG = DXP2G * IPhP2P1G;
matrix DYP2IPhG = DYP2G * IPhP2P1G;
matrix DZP2IPhG = DZP2G * IPhP2P1G;

matrix DX4P2IPhG = DX4P2G * IPh4P24P1G;
matrix DY4P2IPhG = DY4P2G * IPh4P24P1G;
matrix DZ4P2IPhG = DZ4P2G * IPh4P24P1G;
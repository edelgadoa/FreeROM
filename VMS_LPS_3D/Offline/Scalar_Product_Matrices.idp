///////////////
// FreeROM 
/////////////// 

// Defino las matrices de producto escalar que voy a considerar para la ortonormalizacion

Mat MPescX;
{
	varf pescX ([uu, uuY, uuZ, uuP], [v, vY, vZ, vP]) = int3d(Th)(//(1./Refijo + MOD(uFijo))*
	GradUGradV(uu,v) + uuP*vP);
	macro def(i) [i, i#Y, i#Z, i#P] //EOM
	macro init(i) [i, i, i, i] //EOM
	MatCreate(Th, MPescX, [P2,P2,P2,P2]);
	matrix MPescXTemp = pescX(Vh4P2, Vh4P2);
	MPescX = MPescXTemp;
}


Mat MPescV;
{
	varf PescV([uu,uuY,uuZ],[vv,vvY,vvZ]) = int3d(Th)(GradUGradV(uu,vv));
	macro def(i) [i, i#Y, i#Z] //EOM
	macro init(i) [i, i, i] //EOM
	MatCreate(Th, MPescV, [P2,P2,P2]);
	matrix MPescVTemp = PescV(Vh3P2, Vh3P2);
	MPescV = MPescVTemp;
}

Mat MPescP;
{
	varf PescP(p,q) = int3d(Th)(p*q);
	MatCreate(Th, MPescP, P2);
	matrix MPescPTemp = PescP(VhP2, VhP2);
	MPescP = MPescPTemp;
}


///////////////////////////////////////////////////////
Mat DiffPEM;
Mat PenPEM;
Mat DivPPEM;
Mat ConvLevPEM;
Mat DTPEM;
Mat StabhkPEM;

// Diff matrix
{
	varf DiffPE([uu,uuY,uuZ], [v,vY,vZ]) = int3d(Th)(GradUGradV(uu,v));
	matrix DiffPEMT = DiffPE(Vh3P2,Vh3P2);
	macro def(i) [i, i#Y, i#Z] //EOM
	macro init(i) [i, i, i] //EOM
	MatCreate(Th, DiffPEM, [P2,P2,P2]);
	DiffPEM = DiffPEMT;
}

// Div(u)*p matrix
{
	varf DivPPE([uu,uuY,uuZ], [vP]) = int3d(Th)(Div(uu)*vP);
	matrix DivPPEMT = DivPPE(Vh3P2,VhP2);
    Mat DivPPEMTemp(MatVhP2, MatVh3P2, DivPPEMT);
	DivPPEM = DivPPEMTemp;
}

// Penalization matrix

{
	varf PenPE(uP, vP) = int3d(Th)(epspen*uP*vP);
	matrix PenPEMT = PenPE(VhP2, VhP2);
	MatCreate(Th, PenPEM, P2);
	PenPEM = PenPEMT;
}


{
	varf ConvLevPE([uu,uuY, uuZ], [v,vY,vZ]) = int3d(Th)(Antisimetric(Lev, uu, v) + Antisimetric(uu, Lev, v));
	matrix ConvLevPEMT = ConvLevPE(Vh3P2,Vh3P2); 
	macro def(i) [i, i#Y, i#Z] //EOM
	macro init(i) [i, i, i] //EOM
	MatCreate(Th, ConvLevPEM, [P2, P2, P2]);
	ConvLevPEM = ConvLevPEMT;
}


{
	varf DTPE([uu,uuY,uuZ], [v,vY,vZ]) = int3d(Th)(UporV(uu,v));
	matrix DTPEMT = DTPE(Vh3P2,Vh3P2);
	macro def(i) [i, i#Y, i#Z] //EOM
	macro init(i) [i, i, i] //EOM
	MatCreate(Th, DTPEM, [P2, P2, P2]);
	DTPEM = DTPEMT;
}

// {
// 	varf StabhK(uP,vP) = int3d(Th)(hTriangle^2*uP*vP);
// 	matrix FiltroX, FiltroY, FiltroZ;
// 	matrix SPPEM2 = StabhK(VhP1dc, VhP1dc);
// 	{
// 		FiltroX = SPPEM2 * IPhDXP2;
// 		FiltroX = (IPhDXP2') * FiltroX;
// 		FiltroY = SPPEM2 * IPhDYP2;
// 		FiltroY = (IPhDYP2') * FiltroY;
// 		FiltroZ = SPPEM2 * IPhDZP2;
// 		FiltroZ = (IPhDZP2') * FiltroZ;
// 	}
// 	matrix StabhkPEML = FiltroX + FiltroY + FiltroZ;
// 	MatCreate(Th, StabhkPEM, P2);
// 	StabhkPEM = StabhkPEML;
// }

Mat[int] ConvPEM(Nbases); // Simplemente inicializo, dentro del bucle del greedy definir√© los prod. esc. segun vaya calculando las bases

Mat[int] SmagoPEM(Mbases), StabPPEM(Taubases);
// VMS-SMAGO
for (int s=0; s<Mbases; s++){
	varf SmagoPE([uu,uuY,uuZ],[v,vY,vZ]) = intN(Th)((CS*hTriangle)^2*EIMSmago[s]*UporV(uu,v));
	matrix SmagoPEMT = SmagoPE(Vh3P1dc,Vh3P1dc);
	matrix DXX, DYY, DZZ;
	{
		matrix Maux; 
		//COMPONENTE X 
		Maux = DX3P2*IPh3P23P1;
		DXX = (Maux')*SmagoPEMT;
		DXX = DXX*Maux;
		
		Maux = DY3P2*IPh3P23P1;
		DYY = (Maux')*SmagoPEMT;
		DYY = DYY*Maux;
		
		Maux = DZ3P2*IPh3P23P1;
		DZZ = (Maux')*SmagoPEMT;
		DZZ = DZZ*Maux;
	}
	matrix SmagoPEMTxyz = DXX + DYY + DZZ;	
		
	macro def(i) [i, i#Y, i#Z] //EOM
	macro init(i) [i, i, i] //EOM
	MatCreate(Th, SmagoPEM[s], [P2, P2, P2]);
	SmagoPEM[s] = SmagoPEMTxyz;
}


// LPS-pressure
for (int s=0; s<Taubases; s++){
        
	varf StabPPE(uP,vP) = int3d(Th)(EIMTau[s]*uP*vP);
	matrix SPPEM = StabPPE(VhP1dc, VhP1dc);
	matrix FiltroX, FiltroY, FiltroZ;
	{
		FiltroX = SPPEM * IPhDXP2;
		FiltroX = (IPhDXP2') * FiltroX;
		FiltroY = SPPEM * IPhDYP2;
		FiltroY = (IPhDYP2') * FiltroY;
		FiltroZ = SPPEM * IPhDZP2;
		FiltroZ = (IPhDZP2') * FiltroZ;	
	}
    matrix SPPEMT = FiltroX + FiltroY + FiltroZ;
	MatCreate(Th, StabPPEM[s], P2);
    StabPPEM[s] =  SPPEMT;
}


// varf bDiffPE([un, unY, unZ], [v, vY, vZ]) = int3d(ThL)(GradUGradV(Lev, v));
// real[int] bDiffPEv = bDiffPE(0, Vh3P2L);


///////////////
// FreeROM 
/////////////// 

readvector("../../EIM/EIM_VMSSmago/Bases_EIM/muEIM_Smago.txt", real, muEIM, 0);
readvector("../../EIM/EIM_LPS/Bases_EIM/muEIM_LPS.txt", real, muEIMTau, 0);

int Mbases = muEIM.n;
int Taubases = muEIMTau.n;

// VhP1dcL[int] EIMSmago(Mbases);
// VhP0[int] EIMTau(Taubases);


//////////////////////////////////////////
// Cargo los elementos del EIM SMAGO
// for (int i=0; i<Mbases; i++){
// 	VhP1dc EIMSmagoG;
// 	readvector("../../EIM/EIM_VMSSmago/Bases_EIM/Base_EIM_" + muEIM(i) + ".txt", real, BaseEIM, 0);
// 	EIMSmagoG[] = BaseEIM;
// 	EIMSmago[i][] = EIMSmagoG[](mapVhP1dc); //Cargo la bases EN LOCAL
// }
	
readmatrix("../../EIM/EIM_VMSSmago/Bases_EIM/MatrizEIM_Smago.txt", real, MatrixEIMSmago, 0);
readvector("../../EIM/EIM_VMSSmago/Bases_EIM/TintEIM_Smago.txt", real, PuntosMSmago, 0);

matrix MEIMS = MatrixEIMSmago;
set(MEIMS, solver= UMFPACK);

//////////////////////////////////////////
//////////////////////////////////////////
// Cargo los elementos del EIM SMAGO
/*
for (int i=0; i<Taubases; i++){

	readvector("../../EIM/EIM_LPS/Bases_EIM/Base_" + muEIMTau(i) + ".txt", real, BaseEIM, 0);
	EIMTau[i][] = BaseEIM; //Cargo la bases

}

readmatrix("../../EIM/EIM_LPS/Bases_EIM/MatrizEIM_LPS.txt", real, MatrixEIMTau, 0);
readvector("../../EIM/EIM_LPS/Bases_EIM/TintEIM_LPS.txt", real, PuntosMTau, 0);

matrix MEIMTau = MatrixEIMTau;
// real[int,int] MEIMTauinv = MatrixEIMTau^-1;
set(MEIMTau, solver=UMFPACK);
///////////////////////////////////////////
*/
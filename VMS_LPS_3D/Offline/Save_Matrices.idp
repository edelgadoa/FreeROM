///////////////
// FreeROM 
/////////////// 

write("DeltaNmax.txt", DeltaG, 0, 0);
write("DeltaN.txt", DeltaN(0:NRB-1), 0, 0);
write("TauN.txt", TauN(0:NRB-1), 0, 0);
write("MuBest.txt", MuBest(0:NRB-1), 0, 0);


real[int,int] DiffN(NRB,NRB), DivPN(NRB,NRB), ConvLevN(NRB,NRB), DTN(NRB,NRB), PenN(NRB,NRB), bSmagoN(Mbases,NRB);
real[int] bDiffN(NRB), bConvN(NRB);
real[int,int][int] ConvN(NRB), SmagoN(Mbases), StabPN(Taubases), NukN(Taubases), NGukN(Taubases), GradPMN(Mbases);


DiffN = DiffRBG(0:NRB-1, 0:NRB-1);
DivPN = DivPRBG(0:NRB-1, 0:NRB-1);
ConvLevN = ConvLRBG(0:NRB-1, 0:NRB-1);
DTN = DTRBG(0:NRB-1, 0:NRB-1);
PenN = PenRBG(0:NRB-1, 0:NRB-1);
bSmagoN = bSmagoRBG(0:Mbases-1, 0:NRB-1);

bDiffN = bDiffRBG(0:NRB-1);
bConvN = bConvLRBG(0:NRB-1);

for (int s=0; s<NRB; s++){
	real [int,int] cint(NRB,NRB), aux(Nbases,Nbases);
	aux = ConvRB[s];
	cint = aux(0:NRB-1, 0:NRB-1);
	ConvN[s] = cint(0:NRB-1, 0:NRB-1);
}
for (int s=0; s<Mbases; s++){
	real [int,int] sint(NRB,NRB), aux(Nbases,Nbases);
	aux = SmagoRB[s];
	sint = aux(0:NRB-1, 0:NRB-1);
	SmagoN[s] = sint(0:NRB-1, 0:NRB-1);
}

for (int s=0; s<Taubases; s++){
    real[int,int] Spresint(NRB,NRB), aux(Nbases,Nbases);
    aux = StabPRB[s];
    Spresint = aux(0:NRB-1, 0:NRB-1);
    StabPN[s] = Spresint(0:NRB-1, 0:NRB-1);
}

for (int s=0;s<Mbases;s++){
	real [int,int] GradPMint(9,NRB), aux(9,Nbases); 
	aux = GradPM[s];
	GradPMint = aux(0:8,0:NRB-1);
	GradPMN[s] = GradPMint(0:8,0:NRB-1);
}

for (int s=0; s<Taubases; s++){
    real[int,int] NUKint(NRB+1,NRB+1), aux(Nbases+1,Nbases+1);
    aux = NUK[s];
    NUKint = aux(0:NRB,0:NRB); 
    NukN[s] = NUKint(0:NRB,0:NRB);
}

for (int s=0;s<Taubases;s++){
    real[int,int] NGUKint(NRB+1,NRB+1), aux(Nbases+1,Nbases+1);
    aux = NGUK[s];
    NGUKint = aux(0:NRB,0:NRB); 
    NGukN[s] = NGUKint(0:NRB,0:NRB);
}


// Guardamos las matrices en archivos txt para leerlos despuÃ©s al hacer la fase online
write("MatricesRB/Diff.txt", DiffN, 0 , 0, 0, 20);
write("MatricesRB/DivP.txt", DivPN, 0, 0, 0, 20);
write("MatricesRB/ConvLev.txt", ConvLevN, 0, 0, 0, 20);
write("MatricesRB/DT.txt", DTN, 0, 0, 0, 20);
write("MatricesRB/Pen.txt", PenN, 0, 0, 0, 20);
write("MatricesRB/bSmago.txt", bSmagoN, 0, 0, 0, 20);
write("MatricesRB/bDiff.txt", bDiffN, 0, 0, 0, 20);
write("MatricesRB/bConv.txt", bConvN, 0, 0, 0, 20);
write("MatricesRB/Conv.txt", ConvN, 0, 0, 0, 20);
write("MatricesRB/Smago.txt", SmagoN, 0, 0, 0, 20);
write("MatricesRB/StabP.txt", StabPN, 0, 0, 0, 20);
write("MatricesRB/GradPMLev.txt", GradPMLev, 0, 0, 0, 20);
write("MatricesRB/GradPM.txt", GradPM, 0, 0, 0, 20);
write("MatricesRB/NUK.txt", NukN, 0, 0, 0, 20);
write("MatricesRB/NGUK.txt", NGukN, 0, 0, 0, 20);

// Guardo los Snapshots calculados en GLOBAL

Vh3P2G[int] [BaseVG, BaseVGY, BaseVGZ](NRB);
VhP2G[int] BasePG(NRB);

for (int k=0; k<NRB; k++){
	BaseVG[k][] = reduceSolution(BaseV[k][], BaseVG[k][], MatVh3P2.D, mapVh3P2);
	BasePG[k][] = reduceSolution(BaseP[k][], BasePG[k][], MatVhP2.D, mapVhP2);
}


real[int, int] MBaseVN(Vh3P2G.ndof, NRB), MBasePN(VhP2G.ndof, NRB);
for (int k=0; k<NRB; k++){
	MBaseVN(:,k) = BaseVG[k][];
	MBasePN(:,k) = BasePG[k][];
}

write("MatricesRB/BaseV.txt", MBaseVN, 0, 0, 0, 20);
write("MatricesRB/BaseP.txt", MBasePN, 0, 0, 0, 20);


///////////////
// FreeROM 
/////////////// 

// Código para calcular las bases ortonormalizadas 

/////////////////////////////////////////////
// Ortonormalizacion de la Presion



{
	
	real[int, int] MBasePi = MBaseP(0:VhP2.ndof-1, 0:i-1), MBasePETSc(MatVhP2.n, i);
	ChangeNumbering(MatVhP2, MBasePi, MBasePETSc);
    real[int] BasePi;
    ChangeNumbering(MatVhP2, BaseP[i][], BasePi);

    BasePi = OrtoX(BasePi, MBasePETSc, MPescP);
	
    // Doble Ortonormalización
    BasePi = OrtoX(BasePi, MBasePETSc, MPescP);
	
    ChangeNumbering(MatVhP2, BaseP[i][], BasePi, inverse=true, exchange = true);
}
////////////////////////////////////////////




{
	
	real[int,int] MBaseVi = MBaseV(0:Vh3P2.ndof-1, 0:i-1), MBasePETSc(MatVh3P2.n, i);
	ChangeNumbering(MatVh3P2, MBaseVi, MBasePETSc);
	
	real[int] BaseVi;
	ChangeNumbering(MatVh3P2, BaseV[i][], BaseVi);
	
	BaseVi =  OrtoX(BaseVi, MBasePETSc, MPescV);
    BaseVi =  OrtoX(BaseVi, MBasePETSc, MPescV);
	ChangeNumbering(MatVh3P2, BaseV[i][], BaseVi, inverse=true, exchange = true);
	// mpi(cout<<"he cambiado el numbering"<<endl;)
	// BaseVi =  OrtoX(BaseVi, MBaseVi, MNormaVel);
	// BaseV[i][] = OrtoX(BaseVi, MBaseVi, MNormaVel);

	// Doble Ortonormalización
	// BaseV[i][] = OrtoX(BaseV[i][], MBaseVi, MNormaVel);

}
// Para el filtrado
BaseVel[i] = BaseV[i]; BaseVelY[i] = BaseVY[i]; BaseVelZ[i] = BaseVZ[i];

{
Vh3P2G [uRBG, uRBGY, uRBGZ];
VhP2G uRBPG;
uRBG[] = reduceSolution(BaseV[i][], uRBG[], MatVh3P2.D, mapVh3P2);
uRBPG[] = reduceSolution(BaseP[i][], uRBPG[], MatVhP2.D, mapVhP2);
savevtk("solOrto"+i+".vtu", ThG, [uRBG, uRBGY, uRBGZ], uRBPG, dataname = "Vel Pres", order=fforder);
}

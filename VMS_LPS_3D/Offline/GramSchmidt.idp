///////////////
// FreeROM 
/////////////// 

// Código para calcular las bases ortonormalizadas 

/////////////////////////////////////////////
// Ortonormalizacion de la Presion

{
	
	real[int, int] MBasePi(VhP2.ndof, i), MBasePETSc(MatVhP2.n, i);
	MBasePi = MBaseP(0:VhP2.ndof-1, 0:i-1);
	ChangeNumbering(MatVhP2, MBasePi, MBasePETSc);
    real[int] BasePi;
    ChangeNumbering(MatVhP2, BaseP[i][], BasePi, exchange = true);

    BasePi = OrtoX(BasePi, MBasePETSc, MPescP);
	
    // Doble Ortonormalización
    BasePi = OrtoX(BasePi, MBasePETSc, MPescP);
	ChangeNumbering(MatVhP2, BaseP[i][], BasePi, inverse=true, exchange = true);
}
////////////////////////////////////////////


{
	
	real[int,int] MBaseVi(Vh3P2.ndof, i), MBasePETSc(MatVh3P2.n, i);
	MBaseVi = MBaseV(0:Vh3P2.ndof-1, 0:i-1); 
	ChangeNumbering(MatVh3P2, MBaseVi, MBasePETSc);
	
	real[int] BaseVi;
	ChangeNumbering(MatVh3P2, BaseV[i][], BaseVi, exchange = true);
	
	BaseVi =  OrtoX(BaseVi, MBasePETSc, MPescV);
    BaseVi =  OrtoX(BaseVi, MBasePETSc, MPescV);
	
	ChangeNumbering(MatVh3P2, BaseV[i][], BaseVi, inverse=true, exchange = true);
	
	
}
// Para el filtrado
BaseVel[i] = BaseV[i]; BaseVelY[i] = BaseVY[i]; BaseVelZ[i] = BaseVZ[i];

// {
// Vh3P2G [uRBG, uRBGY, uRBGZ];
// VhP2G uRBPG;
// uRBG[] = reduceSolution(BaseV[i][], uRBG[], MatVh3P2.D, mapVh3P2);
// uRBPG[] = reduceSolution(BaseP[i][], uRBPG[], MatVhP2.D, mapVhP2);
// savevtk("solOrto"+i+".vtu", ThG, [uRBG, uRBGY, uRBGZ], uRBPG, dataname = "Vel Pres", order=fforder);
// }

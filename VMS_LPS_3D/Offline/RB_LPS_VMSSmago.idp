///////////////
// FreeROM 
/////////////// 	

// Comenzamos a resolver el problema reducido	
real errRB = 1.;

matrix MRBV, MRBP; // Matrix para las interacciones Velocidad-Velocidad	 y Presion-Presion
	
MRBV = nuRB * DiffRBi;
MRBV = MRBV +(1./dt) * DTRBi;
MRBV = MRBV + ConvLRBi;

MRBP = PenRBi;	
	
for (int iN=0; iN<=niterRB && (errRB>epsRB); iN++){

	matrix MRBFV = MRBV;
	matrix MRBFP = MRBP;
	ConvRBi = 0;
	SmagoRBi = 0;
	StabPRBi = 0;
	bDTRBi = 0;
//	bSmagoRBi = 0;
	bRB = 0;
	
	// Matriz de conveccion
	for (int s=0; s<I; s++){
		real[int,int] ConvRBint(Nbases, Nbases), ConvRBN(I, I);
		ConvRBint = ConvRB[s];
		ConvRBN = ConvRBint(0:I-1, 0:I-1);
		ConvRBN = uRBv(s)*ConvRBN;
		ConvRBi += ConvRBN;
	}
	
	// Matiz de Smagorinsky
	real[int] bEIMS(Mbases), sigmaEIMS(Mbases), GraduN(9), uN(I);
	uN = uRBv(0:I-1); //solo las componentes de la velocidad
	for(int s=0; s<Mbases; s++){
		real[int, int] Gradint(9,I);
		Gradint = GradPM[s](0:8, 0:I-1);
		GraduN = Gradint * uN;
		GraduN = GraduN + GradPMLev[s];
		bEIMS(s) = sqrt(GraduN'*GraduN);
	}

	sigmaEIMS = MEIMS^-1 * bEIMS;
	
	for (int s=0; s<Mbases; s++){
		real[int,int] SmagoRBint(Nbases, Nbases), SmagoRBN(I, I);
		SmagoRBint = SmagoRB[s];
		SmagoRBN = SmagoRBint(0:I-1, 0:I-1);
		SmagoRBN = sigmaEIMS(s)*SmagoRBN;
		SmagoRBi += SmagoRBN; 
	}

	// Segundo miembro Smago
	for (int s=0; s<I; s++){
		bSmagoRBGs(s) = sigmaEIMS'*bSmagoRBG(0:Mbases-1,s);
	}
	
	// Matriz LPS
	real[int] uN1(I+1), sigmaEIMTau(Taubases), bEIMTau(Taubases);
	real[int,int] CuN(I+1,I+1);
	uN1(0) = 1;
	uN1(1:I) = uN;
	CuN = uN1*uN1';
	//mpi(cout<<"CuN"<<endl<<CuN<<endl;)
	for (int s=0; s<Taubases; s++){
		real Nuk, Nguk;
		Nuk = 0; Nguk = 0;
		real[int, int] Nuki(I+1,I+1), Nguki(I+1,I+1), Auxi(I+1,I+1);
		
		Nuki = NUK[s](0:I, 0:I);
		Auxi = CuN.*Nuki;
		Nuk = sqrt(Auxi.sum)/mkG[](PuntosMTau(s));
		Nguki = NGUK[s](0:I,0:I);
		Auxi = CuN.*Nguki;
		Nguk = (CS*hkG[](PuntosMTau(s)))^2*sqrt(Auxi.sum)/mkG[](PuntosMTau(s));

		bEIMTau(s) = (cc1*(nuRB+Nguk)/hkG[](PuntosMTau(s))^2 + cc2*Nuk/hkG[](PuntosMTau(s)))^-1;			
	}

	sigmaEIMTau = MEIMTau^-1*bEIMTau;
	
	for (int s=0; s<Taubases; s++){
		real[int,int] StabPRBint(Nbases, Nbases), StabPRBN(I, I);
		StabPRBint = StabPRB[s];
		StabPRBN = StabPRBint(0:I-1, 0:I-1);
		StabPRBN = sigmaEIMTau(s)*StabPRBN;
		StabPRBi += StabPRBN; 
	}
	
	// Segundos miembro dt
	for (int s=0; s<I; s++){
		real[int] bDTRBint(I);
		bDTRBint = DTRBG(s,:);
		bDTRBint = uRBv(s)*bDTRBint;
		bDTRBi += bDTRBint;
	}
		
	// Construyo la matriz y Segundo miembros para el problema reducido
	MRBFV += ConvRBi;
	MRBFV += SmagoRBi; 
	MRBFP += StabPRBi;
	
	
	
	bRB += (1./dt) * bDTRBi;
	bRB -= nuRB * bDiffRBG;
	bRB -= bConvLRBG;
	bRB -= bSmagoRBGs;

	bRB(I:2*I-1) = 0; //Aseguro que los últimos términos son ceros
	
	// Resuelvo el problema reducido
	real[int] uRBvp = uRBv;
	matrix MRBs = [[MRBFV, DivPRBTi],[DivPRBi, MRBFP]];

	set(MRBs, solver=sparsesolver);

	mpi(uRBv = MRBs^-1*bRB;) // RESUELVO EL PROBLEMA REDUCIDO EN UN UNICO PROCESADOR
	broadcast(processor(0, mpiCommWorld), uRBv);
	
	// Actualizo el error 
	real[int] uRBerr(I); 
	uRBerr = uRBv(0:I-1) - uRBvp(0:I-1);
	errRB = uRBerr.l2/uRBv.l2; 
}


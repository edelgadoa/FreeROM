///////////////
// FreeROM 
/////////////// 

///////////////////////////
// Codigo donde inicializo las matrices que almacenaré de manera offline
///////////////////////////


// Definicion del array de matrices del gradiente en los Puntos mágicos
real[int,int][int] GradPM(Mbases);
real[int][int] GradPMLev(Mbases); 

for (int i=0;i<Mbases;i++){
	real[int,int] Aux(9,Nbases);
	Aux=0;
	GradPMLev[i] = [FLevdX[](PuntosMSmago(i)), FLevdY[](PuntosMSmago(i)), FLevdZ[](PuntosMSmago(i)),
				    FLevYdX[](PuntosMSmago(i)), FLevYdY[](PuntosMSmago(i)), FLevYdZ[](PuntosMSmago(i)),
				    FLevZdX[](PuntosMSmago(i)), FLevZdY[](PuntosMSmago(i)), FLevZdZ[](PuntosMSmago(i))];
	
	GradPM[i] = Aux(0:8,0:Nbases-1);
}


//Definicion de los arrays para calcular el tauk en el EIM de Tau //TODO TENGO QUE VER LA NUMERACION + HACERLO EN PARALELO!!! 
real[int,int][int] NUK(Taubases), NGUK(Taubases);
for (int i=0; i<Taubases; i++){
	real [int,int] Aux (Nbases+1,Nbases+1);
	Aux = 0;
	
	varf Ngk(un1,v) = int3d(Th)((Lev^2 + LevY^2 + LevZ^2)*v);
	real[int] ngk = Ngk(0,VhP0); 
	Aux(0,0) = ngk(PuntosMTau(i)); //Tomo el valor en el elemento correspondiente
	NUK[i] = Aux(0:Nbases,0:Nbases);
	
	varf Ngradgk(un1,v) = int3d(Th)((FLevdX^2 + FLevdY^2 + FLevdZ^2 
								   + FLevYdX^2 + FLevYdY^2 + FLevYdZ^2
								   + FLevZdX^2 + FLevZdY^2 + FLevZdZ^2)*v);
	real[int] nggk = Ngradgk(0,VhP0); 
	Aux(0,0) = nggk(PuntosMTau(i)); //Tomo el valor en el elemento correspondiente
	NGUK[i] = Aux(0:Nbases,0:Nbases);
}

// Definicion de las Matrices Reducidas fijas
real[int,int] DiffRB(Nbases, Nbases), DivPRB(Nbases, Nbases), PenRB(Nbases, Nbases), 
			  ConvLevRB(Nbases, Nbases), DTRB(Nbases, Nbases), StabhkRB(Nbases, Nbases);
			  
DiffRB = 0;
DivPRB = 0;
PenRB = 0;
ConvLevRB = 0;
DTRB = 0;
StabhkRB = 0;

// Definicion de los segundos miembros
real[int] bDiffRB(Nbases), bConvRB(Nbases), bDTRB(Nbases), bSmagoRBi(Nbases);			   
real[int,int] bSmagoRB(Mbases, Nbases);

bDiffRB = 0;
bConvRB = 0;
bDTRB = 0;
bSmagoRBi = 0;
bSmagoRB = 0;


// Definicion de Matrices y Tensores variables
real[int,int][int] ConvRB(Nbases), SmagoRB(Mbases), StabPRB(Taubases);

for (int k=0; k<Nbases; k++){
	real[int,int] aux(2*Nbases, 2*Nbases);
	aux = 0;
	ConvRB[k] = aux(0:2*Nbases-1, 0:2*Nbases-1);
}

for (int k=0;k<Mbases;k++){
	real[int,int] aux(2*Nbases,2*Nbases);
	aux = 0;
	SmagoRB[k] = aux(0:2*Nbases-1,0:2*Nbases-1);
}
for (int k=0;k<Taubases;k++){
	real[int,int] aux(2*Nbases,2*Nbases);
	aux = 0;
	StabPRB[k] = aux(0:2*Nbases-1,0:2*Nbases-1);
}

///////////////
// FreeROM 
/////////////// 

///////////////////////////
// Codigo donde inicializo las matrices que almacenaré de manera offline
///////////////////////////


// Definicion del array de matrices del gradiente en los Puntos mágicos
real[int,int][int] GradPM(Mbases);
real[int][int] GradPMLev(Mbases); 

for (int i=0;i<Mbases;i++){
	real[int,int] Aux(9,Nbases);
	Aux=0;
	GradPMLev[i] = [FLevdXG[](PuntosMSmago(i)), FLevdYG[](PuntosMSmago(i)), FLevdZG[](PuntosMSmago(i)),
				    FLevYdXG[](PuntosMSmago(i)), FLevYdYG[](PuntosMSmago(i)), FLevYdZG[](PuntosMSmago(i)),
				    FLevZdXG[](PuntosMSmago(i)), FLevZdYG[](PuntosMSmago(i)), FLevZdZG[](PuntosMSmago(i))];
	
	GradPM[i] = Aux(0:8,0:Nbases-1);
}


//Definicion de los arrays para calcular el tauk en el EIM de Tau //TODO: En este caso sale cero. En otros, puede que no. 
real[int,int][int] NUK(Taubases), NGUK(Taubases);
for (int i=0; i<Taubases; i++){
	real [int,int] Aux (Nbases+1,Nbases+1);
	Aux = 0;
	NUK[i] = Aux(0:Nbases,0:Nbases);
	NGUK[i] = Aux(0:Nbases,0:Nbases);
}

/*
// Definicion de las Matrices Reducidas fijas
real[int,int] DiffRB(Nbases, Nbases), DivPRB(Nbases, Nbases), PenRB(Nbases, Nbases), 
			  ConvLevRB(Nbases, Nbases), DTRB(Nbases, Nbases), StabhkRB(Nbases, Nbases);
			  
DiffRB = 0;
DivPRB = 0;
PenRB = 0;
ConvLevRB = 0;
DTRB = 0;
StabhkRB = 0;

// Definicion de los segundos miembros
real[int] bDiffRB(Nbases), bConvRB(Nbases), bDTRB(Nbases), bSmagoRBi(Nbases);			   
real[int,int] bSmagoRB(Mbases, Nbases);

bDiffRB = 0;
bConvRB = 0;
bDTRB = 0;
bSmagoRBi = 0;
bSmagoRB = 0;
*/

// Definicion de Matrices y Tensores variables
real[int,int][int] ConvRB(Nbases), SmagoRB(Mbases), StabPRB(Taubases);

for (int k=0; k<Nbases; k++){
	real[int,int] aux(Nbases,Nbases); 
	aux = 0;
	ConvRB[k] = aux(0:Nbases-1, 0:Nbases-1);
}

for (int k=0;k<Mbases;k++){
	real[int,int] aux(Nbases,Nbases);
	aux = 0;
	SmagoRB[k] = aux(0:Nbases-1,0:Nbases-1);
}
for (int k=0;k<Taubases;k++){
	real[int,int] aux(Nbases,Nbases);
	aux = 0;
	StabPRB[k] = aux(0:Nbases-1,0:Nbases-1);
}

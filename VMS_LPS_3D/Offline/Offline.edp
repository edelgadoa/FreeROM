///////////////
// FreeROM 
/////////////// 

/////////////////////////////////////////
/////////// FASE OFFLINE ////////////////
//// NS + VMS-Smago + Estab Pres (LPS)///
/////////////////////////////////////////
/////////// NO SUPREMIZER ///////////////
/////////////////////////////////////////

verbosity = 0;

// Codigo para calcular la fase offline VMS-Smago con estabilizacion LPS en la presion. 
// Elemento Finito P2-P2 (no estable) en vel-pres SIN SUPREMIZER

// Cargamos librerias
load "iovtk" 
load "lapack"
load "PETSc";
load "MUMPS_mpi" // Para calcular la constante de Sovolev en paralelo

// Creamos la Malla
include "../Auxiliary/CuboNxNyNz.idp"


// Cargamos macros, funciones i/o
include "../Auxiliary/Macros_3D.idp"
include "../Auxiliary/search.idp"
include "../Auxiliary/IO.idp" 
include "../Auxiliary/Functions_MP.idp"

macro dimension()3 //EOM
include "macro_ddm.idp"

// Definimos los parametros a usar
include "../Auxiliary/Parametros_3D.idp"

// Definimos los espacios de EF
include "../FOM/FE_Spaces_NoStab_VP_3D.idp"

VhP0L mk,tKcod,tKTcod,tau;

varf med(unused,v) = intN(ThL)(1.*v);
real[int] medk = med(0,VhP0L);
mk[] = sqrt(medk); 

VhP0L hk = hTriangle;
real hT, hTL = hk[].max;
mpiAllReduce(hTL, hT, mpiCommWorld, mpiMAX); //El máximo de los diámetros de la malla

VhP0 mkG, hkG;
hkG = hTriangle;
varf medG(unused,v) = intN(Th)(1.*v);
real[int] medkG = medG(0,VhP0);
mkG[] = sqrt(medkG); 

//Construyo el vector que bloqueará el residuo de SMAGO
varf CC([un1,un2,un3,unp],[vvel1,vvel2,vvel3,vpres]) = on(1,2, un1=1,un2=1,un3=1); 

real[int] cc = CC(0,Vh4P2L);
for (int gf=0; gf<Vh4P2L.ndof; gf++){
	cc(gf) = (cc(gf)>10^10) ? 0 : 1;
} 

mapVh4P2 = restrict(Vh4P2L,Vh4P2,myN2o);
mapVhP2 = restrict(VhP2L,VhP2,myN2o);
mapVhP1dc = restrict(VhP1dcL,VhP1dc,myN2o);
mapVhP0 = restrict(VhP0L, VhP0, myN2o);

// Definimos las matrices de interpolacion y derivacion
include "../FOM/Interp_matrix_NoStab_VP_3D.idp"
include "../FOM/Interp_matrix_NoStab_VP_3D_Local.idp"

// Incluimos el levantamiento
include "../FOM/Levantamiento_3D.idp"

// Defino funciones para ortonormalizar y productos escalares / normas
include "../Auxiliary/Normas_3D.idp"

// Cargo las funciones del RBF
include "../Auxiliary/betas.idp"


//Definicion de Constantes y variables varias
int Nbases = 3; 

real[int] MuBest(Nbases + 1), DeltaN(Nbases), TauN(Nbases), ErrorVN(Nbases), ErrorPN(Nbases);


// Leo los valores de los parámetros para los cuales he calculado ya Snapshots
readvector("../Snapshots/Snapshots.txt", real, ReSnapshots, 0);

//////////////////////////////////////////
////DEFINICION DE LOS ESPACIOS DE BR//////
//////////////////////////////////////////

VhP2L[int] BaseP(Nbases);
Vh3P2L[int] [BaseV, BaseVY, BaseVZ](Nbases);

VhP2L[int] BaseVel(Nbases);
VhP2L[int] BaseVelY(Nbases);
VhP2L[int] BaseVelZ(Nbases);

Vh3P2L[int] [FBaseV, FBaseVY, FBaseVZ](Nbases);

VhP2L[int] FBaseVel(Nbases), FBaseVelY(Nbases), FBaseVelZ(Nbases);

// VhP1dc[int] FPdX(Nbases), FPdY(Nbases), FPdZ(Nbases);

VhP1dcL[int] FVdX(Nbases), FVdY(Nbases), FVdZ(Nbases);
VhP1dcL[int] FVYdX(Nbases),FVYdY(Nbases), FVYdZ(Nbases);
VhP1dcL[int] FVZdX(Nbases),FVZdY(Nbases), FVZdZ(Nbases);

// Defino las matrices donde almaceno los snapshots por columnas, para la reconstrucción de la solución reducida
real[int, int] MBaseV(MatAVh3P2.n, Nbases), MBaseP(MatAVhP2.n, Nbases);

/////////////////////////////////////////
// Cargo los elementos del EIM (tanto para Smago como para LPS)
mpi(cout<<"EIM DATA"<<endl;)
include "EIM_Data.idp"


// Cargo los datos del RBF
readvector("../RBF/BetaMuI.txt", real, BetaI, 0);
readvector("../RBF/vMuI.txt", real, muI, 0);
readvector("../RBF/gammaI.txt", real, gammaI, 0);

// Inicializo las matrices para la fase offline
include "Allocate_matrices.idp"
mpi(cout<<"matrices alocadas"<<endl;)


/////////////////////////////////////////
// Comenzamos con el Algoritmo Greedy

Reynolds = Refijo; // Inicializamos el Reynolds, y todas las variables para resolver el problema de EF
MuBest(0) = Reynolds;

// Calculo la constante de Sobolev


real CSobolev;
// include "Sobolev_3D.idp"
mpi(cout<<"sobolev embedding constant calculada"<<endl;)




VhP2L uFijo, uFijoY, uFijoZ; //Para la normaT
VhP1dcL uFijodX, uFijodY, uFijodZ, uFijoYdX, uFijoYdY, uFijoYdZ, uFijoZdX, uFijoZdY, uFijoZdZ;

Vh4P2L [uEF, uEFY, uEFZ, uEFP]; // Serán las soluciones para el Re_fijo
VhP1dcL uEFdX, uEFdY, uEFdZ, uEFYdX, uEFYdY, uEFYdZ, uEFZdX, uEFZdY, uEFZdZ; //las derivadas de uEF del paso anterior CON LEVANTAMIENTO
VhP2L uprevL, uprevLY, uprevLZ; // La sol del paso anterior con Levantamiento
VhP1dcL Gr; // Para el termino de VMS-Smagorinsky


if (search(ReSnapshots, Refijo, 1.e-9)==-1){
	// Si no lo he calculado todavía, lo calculo
	Reynolds = Refijo;
	include "../FOM/FE_VMS_LPS_3D.idp"

	uFijo = uEF + Lev;
	uFijoY = uEFY + LevY;
	uFijoZ = uEFZ + LevZ;
}
else{
	readvector("../Snapshots/Vx_" + Refijo + ".txt", real, SolX, 0);
	uFijo[] = SolX;
	readvector("../Snapshots/Vy_" + Refijo + ".txt", real, SolY, 0);
	uFijoY[] = SolY;
	readvector("../Snapshots/Vz_" + Refijo + ".txt", real, SolZ, 0);
	uFijoZ[] = SolZ;

	uFijo = uFijo + Lev;
	uFijoY = uFijoY + LevY;
	uFijoZ = uFijoZ + LevZ;

}

// Defino los diferentes productos escalares para construir las matrices reducidas
mpi(cout<<"Scalar products"<<endl;)
include "Scalar_Product_Matrices.idp"


for (int i=0; i<Nbases; i++){
	
	if (search(ReSnapshots, Reynolds, 1.e-9)==-1){
		// Si no lo he calculado todavía, lo calculo

		include "../FOM/FE_VMS_LPS_3D.idp"	
		
		[BaseV[i], BaseVY[i], BaseVZ[i]] = [uEF, uEFY, uEFZ];
		BaseP[i] = uEFP;
		
		BaseVel[i] = uEF; BaseVelY[i] = uEFY; BaseVelZ[i] = uEFZ;// Para construir las funciones filtradas después
		
		real[int] ReSnapshotsNEW(ReSnapshots.n + 1); //Voy a redefinir el vector con los Snapshots calculados
		ReSnapshotsNEW(0:ReSnapshots.n - 1) = ReSnapshots;
		ReSnapshotsNEW(ReSnapshots.n) = Reynolds;
		
		
		write("../Snapshots/Snapshots.txt", ReSnapshotsNEW, 0, 0); 
		
        // ESTO LO TENGO QUE CAMBIAR PARA GUARDARLO EN GOLBAL
		VhP2 SnapX, SnapY, SnapZ, SnapP;
		SnapX = uEF;
		SnapY = uEFY;
		SnapZ = uEFZ;
		SnapP = uEFP;
		
		// Guardamos los snapshots 
		write("../Snapshots/Vx_" + Reynolds + ".txt", SnapX[], 0, 0);
		write("../Snapshots/Vy_" + Reynolds + ".txt", SnapY[], 0, 0);	
		write("../Snapshots/Vz_" + Reynolds + ".txt", SnapZ[], 0, 0);	
		write("../Snapshots/P_" + Reynolds + ".txt", SnapP[], 0, 0);
		
	}
	else{
		VhP2 SnapX, SnapY, SnapZ, SnapP;
		
		readvector("../Snapshots/Vx_" + Reynolds + ".txt", real, SolX, 0);
		SnapX[] = SolX;
		BaseVel[i][] = SnapX[](mapVhP2); //Cargo las bases en local
		readvector("../Snapshots/Vy_" + Reynolds + ".txt", real, SolY, 0);
		SnapY[] = SolY;
		BaseVelY[i][] = SnapY[](mapVhP2);
		readvector("../Snapshots/Vz_" + Reynolds + ".txt", real, SolZ, 0);
		SnapZ[] = SolZ;
		BaseVelZ[i][] = SnapZ[](mapVhP2);
		readvector("../Snapshots/P_" + Reynolds + ".txt", real, SolP, 0);
		SnapP[] = SolP;
		BaseP[i][] = SnapP[](mapVhP2);		
	
		[BaseV[i], BaseVY[i], BaseVZ[i]] = [BaseVel[i], BaseVelY[i], BaseVelZ[i]];
			
	}
	//savevtk("BaseEIM.vtu", Th, [BaseV[i], BaseVY[i], BaseVZ[i]],BaseP[i], dataname = "Vel Pres", order=fforder);//, communicator = mpiCommSelf);
	
	mpi(cout<<"GramSchmidt"<<endl;)
	// include "GramSchmidt.idp"
	
	VhP2L[int] BasePi(i+1);
	Vh3P2L[int] [BaseVi, BaseViY, BaseViZ](i+1);
	real[int, int] MBaseVii(MatAVh3P2.n, i+1), MBasePii(MatAVhP2.n, i+1);
	
	for (int k=0;k<=i;k++){
		BasePi[k][] = BaseP[k][];
		BaseVi[k][] = BaseV[k][];
	}
	// Almaceno en las matrices las Bases ortonormalizadas por columnas (en numeracion PETSC)
	
	ChangeNumbering(MatAVhP2, BasePi, MBasePii);
	ChangeNumbering(MatAVh3P2, BaseVi, MBaseVii);

	//MBaseV(:,i) = BaseV[i][];
	//MBaseP(:,i) = BaseP[i][];


	// Actualizo las soluciones filtradas
	 FBaseV[i][] = IPh3P23P1L * BaseV[i][];
	//
	 FBaseVel[i][] = IPhP2P1L*BaseVel[i][]; FBaseVelY[i][] = IPhP2P1L*BaseVelY[i][]; FBaseVelZ[i][] = IPhP2P1L*BaseVelZ[i][];
	//
	 FVdX[i][] = DXP2L*FBaseVel[i][]; FVdY[i][] = DYP2L*FBaseVel[i][]; FVdZ[i][] = DZP2L*FBaseVel[i][];
	 FVYdX[i][] = DXP2L*FBaseVelY[i][]; FVYdY[i][] = DYP2L*FBaseVelY[i][]; FVYdZ[i][] = DZP2L*FBaseVelY[i][];
	 FVZdX[i][] = DXP2L*FBaseVelZ[i][]; FVZdY[i][] = DYP2L*FBaseVelZ[i][]; FVZdZ[i][] = DZP2L*FBaseVelZ[i][];
	//
	//FPdX[i][] = IPhDXP2*BaseP[i][]; FPdY[i][] = IPhDYP2*BaseP[i][];
	//
	
	// Defino el nuevo producto escalar para la convección
    Vh3P2L [BV, BVY, BVZ];
    BV[] = BaseV[i][];
	varf ConvPE([uu,uuY,uuZ], [v,vY,vZ]) = int3d(ThL)(Antisimetric(BV,uu,v));
	{
		matrix TMP = ConvPE(Vh3P2L,Vh3P2L);
		macro def(i) [i, iY, iZ] // EOM
		macro init(i) [i, i, i] // EOM
		MatCreate(ThL, ConvPEM[i], [P2,P2,P2]);// = MatAVh3P2;
        //ConvTemp = ConvPE(Vh3P2L,Vh3P2L);
		ConvPEM[i] = TMP; 
	}
	
	// real antisim=int3d(ThL)(antisimetric(BV,BVY,BVZ,BaseV[i], BaseVY[i],BaseVZ[i],BaseV[i], BaseVY[i],BaseVZ[i]));
    // mpi(cout<<"Antisimetric:"<<antisim<<endl;)
	
	mpi(cout<<"Matrices Offline"<<endl;)
	include "MatricesOffline.idp"
		
	// Hago el algoritmo Greedy para determinar el nuevo valor del parámetro
	mpi(cout<<"Start Greedy Algorithm"<<endl;)
	include "Greedy.idp"
	
	// Actualizo el nuevo Reynolds
	Reynolds = MuBest(i+1);
	mpi(cout<<"New Reynolds: "<<Reynolds<<endl;)
	
	mpi(cout<<"-------FIN DE LA ITERACION "<<i<<"-------"<<endl;)
	
	if (DeltaN(i)<epsGreedy){
		NRB = i + 1;
		include "Save_Matrices.idp"
		break;
	}
}

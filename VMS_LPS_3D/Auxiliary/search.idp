// Funcion que devuelve la fila donde se produce el maximo en una matriz
func int imax (real[int,int] & A)
{
	int nfila = A.n;
	int ncol = A.m;
	real[int] maximum(nfila);
	for(int i=0; i<nfila; i++)
	{
		real[int] aux(ncol);
		aux = A(i,:);
		maximum(i)=aux.max;
	}
	return maximum.imax;
}// Si se desea para un vector, utilizar v.imax
func int imaxabs(real[int] & v)
{
	real[int] vabs(v.n);
	vabs=abs(v);
	return vabs.imax;
}
// Funcion que devuelve la columna donde se produce el maximo
func int jmax (real[int,int] & A)
{
	int nfila = A.n;
	int ncol = A.m;
	real[int] maximum(ncol);
	for(int i=0; i<ncol; i++)
	{
		real[int] aux(nfila);
		aux = A(:,i);
		maximum(i)=aux.max;
	}
	return maximum.imax;
}

func int[int] ijmax(real[int,int] & A)
{
	int[int] result(2);
	result(0)=imax(A);
	result(1)=jmax(A);
	return result;
}

func int[int] ijkmax(real[int,int][int] & A)
{
	int n=A.n;
	real[int] valmax(n);
	for(int i=0;i<n;i++)
	{
		valmax(i)=A[i].max;
	}
	int[int] result(3);
	result(2)=valmax.imax;
	result(0)=imax(A[result(2)]);
	result(1)=jmax(A[result(2)]);
	return result;
}

func int[int] ijkmin(real[int,int][int] & A)
{
	int n=A.n;
	real[int] valmax(n);
	for(int i=0;i<n;i++)
	{
		valmax(i)=A[i].min;
	}
	int[int] result(3);
	result(2)=valmax.imin;
	result(0)=imax(A[result(2)]);
	result(1)=jmax(A[result(2)]);
	return result;
}


func int[int] ijkmaxabs(real[int,int][int] & A)
{
	int n=A.n;
	int[int] maximo(n);
	real[int,int][int] Aabs(n);
	for(int i=0; i<n; i++)
	{
		Aabs[i]=abs(A[i]);
		maximo(i) = Aabs[i].max;
	}
	int[int] result(3);
	result(2)=maximo.imax;
	result(0)=imax(Aabs[result(2)]);
	result(1)=jmax(Aabs[result(2)]);
	return result;
}

// Funcion que devuelve la fila donde se produce el maximo en una matriz
func int imin (real[int,int] & A)
{
	int nfila = A.n;
	int ncol = A.m;
	real[int] minimum(nfila);
	for(int i=0; i<nfila; i++)
	{
		real[int] aux(ncol);
		aux = A(i,:);
		minimum(i)=aux.min;
	}
	return minimum.imin;
}// Si se desea para un vector, utilizar v.imin

// Funcion que devuelve la columna donde se produce el maximo
func int jmin (real[int,int] & A)
{
	int nfila = A.n;
	int ncol = A.m;
	real[int] minimum(ncol);
	for(int i=0; i<ncol; i++)
	{
		real[int] aux(nfila);
		aux = A(:,i);
		minimum(i)=aux.min;
	}
	return minimum.imin;
}
func int[int] ijmin(real[int,int] & A)
{
	int[int] result(2);
	result(0)=imin(A);
	result(1)=jmin(A);
	return result;
}

func int search(int[int] & v, int  a)
{
	int result=-1;
	for[i, vi : v]{
		if(abs(vi-a)<1.e-8){
			result=i;
		}
	}
	return result;



func int search(real[int] & v, real  a)
{
	int result=-1;
	for[i, vi : v]{
		if(abs(vi-a)<1.e-8){
			result=i;
		}
	}
	return result;
}
func int search(real[int] & v, real  a,real preci)
{
	int result=-1;
	for[i, vi : v]{
		if(abs(vi-a)<preci){
			result=i;
		}
	}
	return result;
}
func int[int] search(real[int,int] & A, real a)
{
	int[int] result = [-1,-1];
    for[i,j, Aij : A]{
		if(abs(Aij-a)<1.e-4)
		{
			result=[i,j];
		}
    
    }

	return result;
}
func int[int] search(real[int,int] & A, real a,real preci)
{
	int[int] result = [-1,-1];
    for[i,j, Aij : A]{
		if(abs(Aij-a)<preci)
		{
			result=[i,j];
		}
    
    }
	return result;
}

func int search(real[int,int] & A, real[int] & a,real preci)
{
	int n=A.n;
	int[int] result(n);
	result=0;
	int m=A.m;
	int l=a.n;
	if(n!=l)
	{
		result=-1;
		cout << "El numero de filas de la matriz debe ser igual al numero de componentes del vector" << endl;
	}
	for(int j=0; j<m; j++)
	{
		result=0;
		for(int i=0;i<n;i++)
		{
			if(abs(A(i,j)-a(i))<preci)
			{
				result(i)=1.;
			}
		}
		if(result.sum==n)
		{
			return j;
			break;
		}
	}
	return -1;
}

func real maxmax(real[int] & etax, real[int] & etay)
{
	real[int] max1(2);
	max1[0]=etax.max;
	max1[1]=etay.max;
	return max1.max;
}

func real minmin(real[int] & etax, real[int] & etay)
{
	real[int] min1(2);
	min1[0]=etax.min;
	min1[1]=etay.min;
	return min1.min;
}
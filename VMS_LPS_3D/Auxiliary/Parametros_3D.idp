///////////////
// FreeROM 
///////////////
// Parametros a usar durante la ejecucion del codigo

// Parametros del PETSC
int petsc = 1; //Para usar el paralelo = 1

macro dimension()3 //EOM
include "macro_ddm.idp";

load "PETSc";
Mat MatAVh4P2;
Mat MatAVh3P2;
Mat MatAVhP1dc;
int[int] mapVh4P2, mapVhP1dc, mapVhP0;

string sparamsv = "-pc_type lu -pc_factor_mat_solver_type mumps";


// Creo las matrices Mat asociadas a la malla en Descomposicion de Dominios
int[int] myN2o;
macro ThLN2O() myN2o // EOM
buildDmesh(ThL);
mapVh4P2 = restrict(Vh4P2L,Vh4P2,myN2o);  
mapVhP1dc = restrict(VhP1dcL,VhP1dc,myN2o);
mapVhP0 = restrict(VhP0L, VhP0, myN2o);  
{
	macro def(i) [i, iY, iZ, iP] //
	macro init(i) [i, i, i, i] // EOM
	createMat(ThL, MatAVh4P2, [P2, P2, P2, P2]); 
}
{
	createMat(ThL, MatAVhP1dc, P1dc);
}	
{
	macro def(i) [i, iY, iZ] //
	macro init(i) [i, i, i] // EOM
	createMat(ThL, MatAVh3P2, [P2, P2, P2]); 
}


// Parametros del modelo VMS-Smago con LPS en la presion
real CS = 0.1; // Smago


real cc1=16.; // tauk
real cc2=sqrt(cc1);

VhP0L mk,tKcod,tKTcod,tau;

varf med(unused,v)=intN(ThL)(1.*v);
real[int] medk=med(0,VhP0L);
mk[] = sqrt(medk); 

VhP0L hk = hTriangle;
real hT, hTL = hk[].max;
mpiAllReduce(hTL, hT, mpiCommWorld, mpiMAX); //El máximo de los diámetros de la malla

//Construyo el vector que bloqueará el residuo de SMAGO
varf CC([un1,un2,un3,unp],[vvel1,vvel2,vvel3,vpres]) = on(1,2, un1=1,un2=1,un3=1); 

real[int] cc = CC(0,Vh4P2L);
for (int gf=0; gf<Vh4P2L.ndof; gf++){
	cc(gf) = (cc(gf)>10^10) ? 0 : 1;
} 

// Parametros para el problema de EF
real dt = 1;
real epspen = 1e-8;

real ERROR = 10; // inicializacion del error para el bucle

int niterFE = 1500; 
real epsFE = 1e-8;

// Parametros para el problema ROM
int niterRB = 2000;
real epsRB = 1e-8; //parada de problema reducido

real epsGreedy = 5e-5;
real epsEIM = 1e-5;

int NRB = 0;

// Parametros para el RBF
real RBFeps = 1e-5;

// Parametros mu
real Reynolds; 
real Remin = 1000;
real Remax = 2900;

real Refijo = 1000;


int Ntrain = 77;

real[int] MuTrain(Ntrain);
for (int ig=0; ig<Ntrain; ig++){
	MuTrain(ig) = Remin+ig*(Remax-Remin)/(Ntrain - 1);
}

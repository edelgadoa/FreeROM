///////////////
// FreeROM 
///////////////




// Defininimos la matriz y segundo miembro fijos
matrix MFija;
real[int] bFija(Vh4P2.ndof);


include "Matrices_fijas_NS_3D.idp"


ERROR = 10;
int itFE = 0;
// Comenzamos el bucle iterativo para resolver el problema de EF
for (int ii=1; ii<=niterFE && (ERROR > epsFE) ; ii++){
	itFE++;
	mpi(cout<<"Iteracion FE: "<<itFE<<endl;) 	
	// Definimos la solución del paso anterior con levantamiento, y  calculamos sus derivadas filtradas
	
	VhP2 uprev = uEF;// + Lev;
	VhP2 uprevY = uEFY;// + LevY;
	VhP2 uprevZ = uEFZ;// + LevZ;
	
	VhP1dc uEFdX, uEFdY, uEFdZ, uEFYdX, uEFYdY, uEFYdZ, uEFZdX, uEFZdY, uEFZdZ;
	// mpi(cout<<"filtrado de solucion anterior"<<endl;)
	{
		VhP2 udcAux;
		udcAux[] = IPhP2P1*uprev[];
		uEFdX[] = DXP2*udcAux[];
		uEFdY[] = DYP2*udcAux[];
		uEFdZ[] = DZP2*udcAux[];

		udcAux[] = IPhP2P1*uprevY[];
		uEFYdX[] = DXP2*udcAux[];
		uEFYdY[] = DYP2*udcAux[];
		uEFYdZ[] = DZP2*udcAux[];

		udcAux[] = IPhP2P1*uprevZ[];
		uEFZdX[] = DXP2*udcAux[];
		uEFZdY[] = DYP2*udcAux[];
		uEFZdZ[] = DZP2*udcAux[];

	}
	
	// incluimos la matriz del término de convección y segundo miembro término temporal
	matrix MNS;
	real[int] bNS(Vh4P2.ndof);
	// mpi(cout<<"Matriz variable"<<endl;)
	include "Matrices_variables_NS_3D.idp"
	
	// incluimos la matriz y segundo miembro de VMS-Smagorinsky
	matrix Smago;
	real[int] bSmago(Vh4P2.ndof);

	include "Matriz_VMSSmago_3D.idp"
	
	
	// incluimos la matriz de estabilizacion LPS de la presion
	matrix LPSpres;
	// mpi(cout<<"Matriz LPS"<<endl;)
	include "Matriz_LPS_Pres_3D.idp"
	
	
	// Definimos la matriz final y segundo miembro final, y resolvemos el sistema
	matrix MFinal;
	real[int] bFinal(Vh4P2.ndof);
	
	// mpi(cout<<"ensamblaje de matrices"<<endl;)
	MFinal = MFija;
	MFinal = MFinal + MNS;
	MFinal = MFinal + Smago;
	MFinal = MFinal + LPSpres;
	
	bFinal = bFija;
	bFinal = bFinal + bNS;
	// bFinal = bFinal + bSmago;
	
	
	// mpi(cout<<"Actualizamos la solucion"<<endl;)
	// Actualizamos la solución
	Vh4P2 [uEFp, uEFpY, uEFpZ, uEFpP]; // guardamos la iteración anterior para calcular el error
	uEFp[] = uEF[];
	
	// mpi(cout<<"solving sistem"<<endl;)
	//real timeLS = clock();
	// solvesystem(MFinal, bFinal, uEF);  // Este macro está en Auxiliary/Macros_3D.idp
	
	Mat AFinal;
	{
		macro def(i) [i, iY, iZ, iP] // EOM
		macro init(i) [i, i, i, i] // EOM
		createMat(Th, AFinal, [P2,P2,P2,P2]);
	}
	AFinal = MFinal;
	set(AFinal, sparams = "-pc_type lu -ksp_type gmres -ksp_converged_reason");
	uEF[] = 0.0;
	uEF[] = AFinal^-1*bFinal;
	//timeLS = clock() - timeLS;
	//mpi(cout<<"Tiempo LS: "<<timeLS<<endl;)
	// Vh4P2 [uG, uGY, uGZ, uGP];
	// uG[] = reduceSolution(uEF[], uG[], MatAVh4P2.D, mapVh4P2);
	// ofstream Sol("Solution_u_MPI"+mpisize+"_"+ii+".txt");
	// Sol<<uG[];
	pause;
	// Calculamos el error cometido (en velocidad)
	Vh4P2 [errEF, errEFY, errEFZ, errEFP];
	errEF[] = uEF[] - uEFp[];
	
	real ERRORabs = errEF[].l2; //sqrt(intN(ThL)(errEF^2 + errEFY^2 + errEFZ^2));
	real ERRORL = ERRORabs / uEF[].l2; //sqrt(intN(ThL)(uEF^2 + uEFY^2 + uEFZ^2));
	
	mpiAllReduce(ERRORL, ERROR, mpiCommWorld, mpiSUM);
	ERROR/=mpisize; // Estaría haciendo la media de todos los errores. De todas formas la primera iteración salen todos uno.
	mpi(cout<<ERROR<<endl;)


}
mpi(cout<<"It FE: "<<itFE<<", Error: "<<ERROR<<endl;)

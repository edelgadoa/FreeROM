///////////////
// FreeROM 
///////////////




// Defininimos la matriz y segundo miembro fijos
matrix MFija;
real[int] bFija(Vh4P2L.ndof);


include "Matrices_fijas_NS_3D.idp"


ERROR = 10;
int itFE = 0;
// Comenzamos el bucle iterativo para resolver el problema de EF
for (int ii=1; ii<=niterFE && (ERROR > epsFE) ; ii++){
	itFE++;
	mpi(cout<<"Iteracion FE: "<<itFE<<endl;) 	
	// Definimos la solución del paso anterior con levantamiento, y  calculamos sus derivadas filtradas
	
	uprevL = uEF + Lev;
	uprevLY = uEFY + LevY;
	uprevLZ = uEFZ + LevZ;
	
	mpi(cout<<"filtrado de solucion anterior"<<endl;)
	{
		VhP2 udcAux;
		udcAux[] = IPhP2P1*uprevL[];
		uEFdX[] = DXP2*udcAux[];
		uEFdY[] = DYP2*udcAux[];
		uEFdZ[] = DZP2*udcAux[];

		udcAux[] = IPhP2P1*uprevLY[];
		uEFYdX[] = DXP2*udcAux[];
		uEFYdY[] = DYP2*udcAux[];
		uEFYdZ[] = DZP2*udcAux[];
		
		udcAux[] = IPhP2P1*uprevLZ[];
		uEFZdX[] = DXP2*udcAux[];
		uEFZdY[] = DYP2*udcAux[];
		uEFZdZ[] = DZP2*udcAux[];
	
	}
	
	// incluimos la matriz del término de convección y segundo miembro término temporal
	matrix MNS;
	real[int] bNS(Vh4P2L.ndof);
	mpi(cout<<"Matriz variable"<<endl;)
	include "Matrices_variables_NS_3D.idp"
	
	// incluimos la matriz y segundo miembro de VMS-Smagorinsky
	matrix Smago;
	real[int] bSmago(Vh4P2L.ndof);
	
	// include "Matriz_VMSSmago_3D.idp"
	
	
	// incluimos la matriz de estabilizacion LPS de la presion
	matrix LPSpres;
	mpi(cout<<"Matriz LPS"<<endl;)
	include "Matriz_LPS_Pres_3D.idp"
	
	
	// Definimos la matriz final y segundo miembro final, y resolvemos el sistema
	matrix MFinal;
	real[int] bFinal(Vh4P2L.ndof);
	
	mpi(cout<<"ensamblaje de matrices"<<endl;)
	MFinal = MFija;
	MFinal = MFinal + MNS;
	// MFinal = MFinal + Smago;
	MFinal = MFinal + LPSpres;
	
	bFinal = bFija;
	bFinal = bFinal + bNS;
	// bFinal = bFinal + bSmago;
	mpi(cout<<"Actualizamos la solucion"<<endl;)
	// Actualizamos la solución
	Vh4P2 [uEFp, uEFpY, uEFpZ, uEFpP]; // guardamos la iteración anterior para calcular el error
	uEFp[] = uEF[];
	
	mpi(cout<<"solving sistem"<<endl;)
	//real timeLS = clock();
	solvesystem(MFinal, bFinal, uEF);  // Este macro está en Auxiliary/Macros_3D.idp
	//timeLS = clock() - timeLS;
	//mpi(cout<<"Tiempo LS: "<<timeLS<<endl;)

	
	// Calculamos el error cometido (en velocidad)
	Vh4P2 [errEF, errEFY, errEFZ, errEFP];
	errEF[] = uEF[] - uEFp[];
	
	real ERRORabs = sqrt(intN(Th)(errEF^2 + errEFY^2 + errEFZ^2));
	ERROR = ERRORabs / sqrt(intN(Th)(uEF^2 + uEFY^2 + uEFZ^2));
	
	mpi(cout<<ERROR<<endl;)


}
mpi(cout<<"It FE: "<<itFE<<", Error: "<<ERROR<<endl;)

///////////////
// FreeROM 
///////////////

/////////////////////////////////////////
//// NS + VMS-Smago + Estab Pres (LPS)///
/////////////////////////////////////////

// Codigo para resolver el problema de EF de VMS-Smago con estabilizacion LPS en la presion. 
// Elemento Finito P2-P2 (no estable) en vel-pres 
verbosity = 0;

// Cargamos librerias
load "iovtk" 

macro dimension() 3 //EOM
include "macro_ddm.idp"
load "PETSc"

// Cargamos macros y funciones i/o
include "../Auxiliary/Macros_3D.idp"
include "../Auxiliary/IO.idp" 
include "../Auxiliary/search.idp"


// Creamos la malla
include "../Auxiliary/CuboNxNyNz.idp"

real paredes = 1;
real techo = 2; //para las condiciones de contorno


// Definimos los parametros a usar
include "../Auxiliary/Parametros_3D.idp"

// Definimos los espacios de EF
include "FE_Spaces_NoStab_VP_3D.idp"

// Creo las matrices Mat asociadas a la malla en Descomposicion de Dominios


mapVh4P2 = restrict(Vh4P2L,Vh4P2,myN2o);
mapVhP2 = restrict(VhP2L,VhP2,myN2o);
mapVhP1dc = restrict(VhP1dcL,VhP1dc,myN2o);
mapVhP0 = restrict(VhP0L, VhP0, myN2o);
{
	macro def(i) [i, i#Y, i#Z, i#P] // EOM 
	macro init(i) [i, i, i, i] // EOM
	MatCreate(ThL, MatAVh4P2, [P2, P2, P2, P2]); 
}

MatCreate(ThL, MatAVhP1dc, P1dc);
MatCreate(ThL, MatAVhP2, P2);
	
{
	macro def(i) [i, i#Y, i#Z] // EOM
	macro init(i) [i, i, i] // EOM
	MatCreate(ThL, MatAVh3P2, [P2, P2, P2]); 
}

// Definimos las matrices de interpolacion y derivacion
include "Interp_matrix_NoStab_VP_3D.idp"
include "Interp_matrix_NoStab_VP_3D_Local.idp"

// Incluimos el levantamiento
include "Levantamiento_3D.idp"

// Incluimos funciones para calcular normas
include "../Auxiliary/Normas_3D.idp"

//Definimos el intervalo de Reynolds que  vamos a considerar para resolver el problema de EF
int nSnapshots = 11; // numero de Snapshots que voy a querer calcular 
real[int] vReynolds(nSnapshots);


Remin = 1000;
Remax = 1500;
for(int i=0; i<nSnapshots; i++){
	vReynolds(i)=Remin+i*(Remax-Remin)/(nSnapshots-1);
}
mpi(cout<<vReynolds<<endl;)

// Guardamos en un archivo el numero de Snapshots que vamos a calcular y los valores Reynolds que hemos calculado


/////////////////////////////////////////////
// Resolvemos el problema de EF: Cavidad 3D//
/////////////////////////////////////////////

Vh4P2L [uEF, uEFY, uEFZ, uEFP];
Vh4P2L [uEFp, uEFpY, uEFpZ, uEFpP]; // guardamos la iteraciÃ³n anterior para calcular el error
VhP1dcL uEFdX, uEFdY, uEFdZ, uEFYdX, uEFYdY, uEFYdZ, uEFZdX, uEFZdY, uEFZdZ; //las derivadas de uEF del paso anterior CON LEVANTAMIENTO
VhP2L uprevL, uprevLY, uprevLZ; // La sol del paso anterior con Levantamiento
VhP1dcL Gr; // Para el termino de VMS-Smagorinsky

VhP2 SnapX, SnapY, SnapZ;
VhP2 SnapP;

readvector("../Snapshots/Snapshots.txt", real, ReSnapshots, 0);

for (int i=0; i<nSnapshots; i++){

	Reynolds = vReynolds(i);
	mpi(cout<<"----------- Reynolds = "<< Reynolds<<" ------------"<<endl;)
	
	if (search(ReSnapshots, Reynolds, 1.e-9)==-1){
		real TFE = clock();
		include "FE_VMS_LPS_3D.idp"
		TFE = clock() - TFE;
		mpi(cout<<"Tiempo FE para Re = "<<Reynolds<<": "<<TFE<<", ERROR:"<<ERROR<<endl;)
		
		// Calculo la solucion global para guardarla
		Vh4P2 [uEFG, uEFGY, uEFGZ, uEFGP];
		uEFG[] = reduceSolution(uEF[], uEFG[], MatAVh4P2.D, mapVh4P2);
		
		real[int] ReSnapshotsNEW(ReSnapshots.n + 1); //Voy a redefinir el vector con los Snapshots calculados
		ReSnapshotsNEW(0:ReSnapshots.n - 1) = ReSnapshots;
		ReSnapshotsNEW(ReSnapshots.n) = Reynolds;
		
		write("../Snapshots/Snapshots.txt", ReSnapshotsNEW, 0, 0); //0,0 -> No append + No mostrar por pantalla 

		SnapX = uEFG;
		SnapY = uEFGY;
		SnapZ = uEFGZ;
		SnapP = uEFGP;
	
		write("../Snapshots/Vx_" + Reynolds + ".txt", SnapX[], 0, 0);
		write("../Snapshots/Vy_" + Reynolds + ".txt", SnapY[], 0, 0);
		write("../Snapshots/Vz_" + Reynolds + ".txt", SnapZ[], 0, 0);		
		write("../Snapshots/P_" + Reynolds + ".txt", SnapP[], 0, 0);
		
		Vh4P2 [uEFLev, uEFLevY, uEFLevZ, uEFLevP];
		uEFLev[] = uEFG[] + Lev[];
		
		int[int] fforder=[1,1,1,1];
		savevtk("VTU/VMS_Smago" + Reynolds + ".vtu", Th, [uEFLev, uEFLevY, uEFLevZ], uEFLevP, dataname="Velocity Pressure", order=fforder, bin=true);
		
		real mediaP = intN(Th)(uEFP);
		mpi(cout<<"Media Presion: "<<mediaP<<endl;)
	}
}

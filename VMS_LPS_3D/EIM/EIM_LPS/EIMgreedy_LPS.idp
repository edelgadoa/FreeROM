///////////////
// FreeROM 
///////////////

// Programa que obtiene el valor del parametro en cada iteracion del GREEDY para EIM

// Definimos la matriz del sistema que resolveremos para calcular el EIM en cada iteracion
real [int,int] BMi(i,i);
BMi = BM(0:i-1,0:i-1);
real[int,int] Binv = BMi^-1; 
matrix BMs = BMi;
set(BMs, solver=sparsesolver);
real [int] bEIM(i), sigmai(i);

//pause; //Hacemos el siguiente for en paralelo
for (int imu=0; imu<nSnapshots; imu++){
	//if (mpirank==imu%mpisize){
		UX = BVX[imu]; UY = BVY[imu]; UZ = BVZ[imu];
		UXdX = BVdX[imu]; UXdY = BVdY[imu]; UXdZ = BVdZ[imu]; 
		UYdX = BVYdX[imu]; UYdY = BVYdY[imu]; UYdZ = BVYdZ[imu];
		UZdX = BVZdX[imu]; UZdY = BVZdY[imu]; UZdZ = BVZdZ[imu];
		
		real[int] tK=tauK(0,VhP0);
		real[int] tKT=tauKT(0,VhP0);

		tKcod[] = sqrt(tK);
		tKTcod[] = sqrt(tKT);
	
		gEIM = ((cc1*(1./vReynolds(imu)+((CS*hTriangle)^2)*(tKTcod/mk))/hTriangle^2) + (cc2*(tKcod/mk)/hTriangle))^(-1.);

		for (int j=0; j<i; j++){
			bEIM(j) = gEIM[](Tmax(j));
		}
	
		sigmai = BMs^-1*bEIM;
		
		IgEIM = 0;
		for (int j=0;j<i;j++){
			IgEIM[] += sigmai(j)*BEIM[j][];
		}
		
		VhP1dc Linf = abs(gEIM-IgEIM); 
		
		Errorit(imu) = Linf[].max/gEIM[].max;
		//}
	//mpiAllReduce(ErroritL, Errorit, mpiCommWorld, mpiSUM);
	//pause;
	
	ErrorMaxEIM(i-1) = Errorit.max;
	muEIM(i) = vReynolds(Errorit.imax);

	
}

	mpi(cout<<muEIM<<endl;)
// Calculamos la base escogida
int iReynolds = Errorit.imax;

UX = BVX[Errorit.imax]; UY = BVY[Errorit.imax]; UZ = BVZ[Errorit.imax];
UXdX = BVdX[Errorit.imax]; UXdY = BVdY[Errorit.imax]; UXdZ = BVdZ[Errorit.imax]; 
UYdX = BVYdX[Errorit.imax]; UYdY = BVYdY[Errorit.imax]; UYdZ = BVYdZ[Errorit.imax];
UZdX = BVZdX[Errorit.imax]; UZdY = BVZdY[Errorit.imax]; UZdZ = BVZdZ[Errorit.imax];

real[int] tK = tauK(0,VhP0);
real[int] tKT = tauKT(0,VhP0);

tKcod[] = sqrt(tK);
tKTcod[] = sqrt(tKT);


gEIM = ((cc1*(1./vReynolds(Errorit.imax)+((CS*hTriangle)^2)*(tKTcod/mk))/hTriangle^2) + (cc2*(tKcod/mk)/hTriangle))^(-1.);

for (int j=0; j<i; j++){
	bEIM(j) = gEIM[](Tmax(j));
}
sigmai = BMs^-1*bEIM;

BEIM[i] = gEIM;
for (int j=0; j<i; j++){
	BEIM[i][] -= sigmai(j)*BEIM[j][]; // Calculo los residuos
}
VhP0 absBEIM = abs(BEIM[i]);
Tmax(i)=absBEIM[].imax;
BEIM[i][] /= BEIM[i][](Tmax(i));

for (int j=0; j<=i; j++){
	BM(i,j) = BEIM[j][](Tmax(i));
}

// Almacenamos la base escogida 
write("Bases_EIM/Base_" + vReynolds(Errorit.imax) + ".txt", BEIM[i][], 0, 0, 0, 20);

muEIM(i) = vReynolds(Errorit.imax); //Almacenamos el valor de Reynolds escogido	
///////////////
// FreeROM 
///////////////

verbosity = 0;
// Programa para caluclar el EIM del término de Smagorinsky g(x;\mu)=|\nabla u(x)|

// Cargamos librerias
load "lapack"
load "PETSc"
macro dimension()3 //EOM

include "macro_ddm.idp"
// Cargamos macros y funciones i/o
include "../../Auxiliary/Macros_3D.idp"
include "../../Auxiliary/IO.idp" 

// Creamos la malla
include "../../Auxiliary/CuboNxNyNz.idp"

// Definimos los espacios de EF
include "../../FOM/FE_Spaces_NoStab_VP_3D.idp"

// Definimos los parametros a usar
include "../../Auxiliary/Parametros_3D.idp"

// Definimos las matrices de interpolacion y derivacion
include "../../FOM/Interp_matrix_NoStab_VP_3D_Global.idp"
include "../../FOM/Interp_matrix_NoStab_VP_3D.idp"

mapVhP1dc = restrict(VhP1dc,VhP1dcG,myN2o);
MatCreate(Th, MatVhP1dc, P1dc);

// Incluimos el levantamiento
include "../../FOM/Levantamiento_3D.idp"


readvector("../../Snapshots/Snapshots.txt", real, vReynolds, 0); 
int nSnapshots = vReynolds.n;

VhP2G[int] BVX(nSnapshots), BVY(nSnapshots), BVZ(nSnapshots);

VhP1dcG[int] BVdX(nSnapshots), BVdY(nSnapshots), BVdZ(nSnapshots), 
			BVYdX(nSnapshots), BVYdY(nSnapshots), BVYdZ(nSnapshots),
			BVZdX(nSnapshots), BVZdY(nSnapshots), BVZdZ(nSnapshots); 

// Definimos las cantidades que usaremos para el segundo miembro del EIM
VhP0 tKcod,tKTcod,tau,mk;
VhP1dc UXdX, UXdY, UXdZ, UYdX, UYdY, UYdZ, UZdX, UZdY, UZdZ;	
VhP2 UX, UY, UZ;

varf med(unused,v)=intN(Th)(1.*v);
real[int] medk=med(0,VhP0);
mk[]=sqrt(medk);

varf tauK(unused,v) = int3d(Th)((UX^2+UY^2+UZ^2)*v);
varf tauKT(unused,v) = int3d(Th)((UXdX^2+UXdY^2+UXdZ^2+ UYdX^2+UYdY^2+UYdZ^2 + UZdX^2+UZdY^2+UZdZ^2)*v);

include "Load_Snapshots_EIM.idp"

// Defino las variables para el EIM
int Mmax = 83; //numero maximo de bases del EIM
int M; //numero de bases que voy a considerar finalmente
real[int] Tmax(Mmax), muEIM(Mmax); //Donde almaceno los puntos magicos y los valores de parámetros que voy escogiendo
real[int] ErrorMaxEIM(Mmax); // Para almacenar el error máximo en cada etapa del EIM
real[int,int] BM(Mmax, Mmax); BM=0; // Matriz del sistema del EIM, inicializada a cero


VhP0[int] BEIM(Mmax); // Donde almaceno las bases EIM
VhP0 gEIM, IgEIM; // Donde guardo la funcion a linealizar y la funcion de base


// COMENZAMOS EL BUCLE DONDE CALCULAMOS LAS BASES EIM

// Primera iteración //Tomamos el primer valor del parametro aleatorio
muEIM(0) = vReynolds(0); //Almacenamos el valor de Reynolds escogido

UX = BVX[0]; UY = BVY[0]; UZ=BVZ[0];
UXdX = BVdX[0]; UXdY = BVdY[0]; UXdZ = BVdZ[0]; 
UYdX = BVYdX[0]; UYdY = BVYdY[0]; UYdZ = BVYdZ[0];
UZdX = BVZdX[0]; UZdY = BVZdY[0]; UZdZ = BVZdZ[0];

real[int] tK = tauK(0,VhP0);
real[int] tKT = tauKT(0,VhP0);

tKcod[] = sqrt(tK);

tKTcod[] = sqrt(tKT);


BEIM[0] = ((cc1*(1./vReynolds(0)+((CS*hTriangle)^2)*(tKTcod/mk))/hTriangle^2) + (cc2*(tKcod/mk)/hTriangle))^(-1.);


Tmax(0) = BEIM[0][].imax;
BEIM[0][] /= BEIM[0][].max;

BM(0,0) = BEIM[0][](Tmax(0));

// Guardamos la base calculada 	
write("Bases_EIM/Base_" + vReynolds(0) + ".txt", BEIM[0][], 0, 0, 0, 20);

// Hacemos el greedy para calcular todas las bases del EIM
for (int i=1; i<Mmax; i++){
	real[int] ErroritL(nSnapshots), Errorit(nSnapshots);
	
	include "EIMgreedy_LPS.idp";

	if(ErrorMaxEIM(i-1)<epsEIM){
		M = i;
		break;
	}
		
}

// Guardamos la matriz B, y los puntos mágicos, así como los errores obtenidos y los Reynolds de cada snapshot
real[int] muEIMF(M);
muEIMF = muEIM(0:M-1);
write("Bases_EIM/muEIM_LPS.txt", muEIMF, 0, 0);


real[int, int] BFinal(M,M);
BFinal = BM(0:M-1,0:M-1);
write("Bases_EIM/MatrizEIM_LPS.txt", BFinal, 0, 0, 0, 20);

real[int] TM(M);
TM = Tmax(0:M-1);
write("Bases_EIM/TintEIM_LPS.txt", TM, 0, 0);


real[int] ErrorEIM(M);
ErrorEIM=ErrorMaxEIM(0:M-1);
write("Bases_EIM/ErrorEIM_LPS.txt", ErrorEIM, 0, 0);



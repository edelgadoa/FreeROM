///////////////
// FreeROM 
///////////////
real timeEIM = clock();
// Programa para caluclar el EIM del término de Smagorinsky g(x;\mu)=|\nabla u(x)|
verbosity = 0;

// Cargamos librerias
load "lapack"
load "PETSc"
macro dimension()3 //EOM

include "macro_ddm.idp"

// Cargamos macros y funciones i/o
include "../../Auxiliary/Macros_3D.idp"
include "../../Auxiliary/IO.idp" 

// Creamos la malla
include "../../Auxiliary/CuboNxNyNz.idp"

// Definimos los espacios de EF
include "../../FOM/FE_Spaces_NoStab_VP_3D.idp"

// Definimos las matrices de interpolacion y derivacion
include "../../FOM/Interp_matrix_NoStab_VP_3D_Global.idp"
include "../../FOM/Interp_matrix_NoStab_VP_3D.idp"

// Definimos los parametros a usar
include "../../Auxiliary/Parametros_3D.idp"


mapVhP1dc = restrict(VhP1dc,VhP1dcG,myN2o);
mapVhP2 = restrict(VhP2,VhP2G,myN2o);

MatCreate(Th, MatVhP1dc, P1dc);

// Incluimos el levantamiento
include "../../FOM/Levantamiento_3D.idp"

//Definimos el intervalo de Reynolds que  vamos a considerar para resolver el problema de EF

readvector("../../Snapshots/Snapshots.txt", real, vReynolds, 0); 
int nSnapshots = vReynolds.n;

VhP2[int] BVX(nSnapshots), BVY(nSnapshots), BVZ(nSnapshots);

VhP1dc[int] BVdX(nSnapshots), BVdY(nSnapshots), BVdZ(nSnapshots), 
			BVYdX(nSnapshots), BVYdY(nSnapshots), BVYdZ(nSnapshots),
			BVZdX(nSnapshots), BVZdY(nSnapshots), BVZdZ(nSnapshots); 

include "Load_Snapshots_EIM.idp"

		
// Defino las variables para el EIM
int Mmax = 83; //numero maximo de bases del EIM
int M; //numero de bases que voy a considerar finalmente
real[int] Tmax(Mmax), muEIM(Mmax); //Donde almaceno los puntos magicos y los valores de parámetros que voy escogiendo
real[int] ErrorMaxEIM(Mmax); // Para almacenar el error máximo en cada etapa del EIM
real[int,int] BM(Mmax, Mmax); BM=0; // Matriz del sistema del EIM, inicializada a cero


VhP1dcG[int] BEIM(Mmax); // Donde almaceno las bases EIM
VhP1dcG gEIM, IgEIM; // Donde guardo la funcion a linealizar y la funcion de base

VhP1dc gEIML; //Aquí voy a calcular los segundos miembros en local para pasarlos a global

// COMENZAMOS EL BUCLE DONDE CALCULAMOS LAS BASES EIM

// Primera iteración //Tomamos el primer valor del parametro aleatorio
muEIM(0) = vReynolds(0); //Almacenamos el valor de Reynolds escogido

VhP1dc BEIML = mod(BVdX[0], BVdY[0], BVdZ[0], BVYdX[0], BVYdY[0], BVYdZ[0], BVZdX[0], BVZdY[0], BVZdZ[0]);;
BEIM[0][] = reduceSolution(BEIML[], BEIM[0][], MatVhP1dc.D, mapVhP1dc);

Tmax(0) = BEIM[0][].imax;
BEIM[0][] /= BEIM[0][].max;

BM(0,0) = BEIM[0][](Tmax(0));

	
write("Bases_EIM/Base_EIM_" + vReynolds(0) + ".txt", BEIM[0][], 0, 0, 0, 20);


// Hacemos el greedy para calcular todas las bases del EIM
for (int i=1; i<Mmax; i++){
	real[int] Errorit(nSnapshots);
	
	include "EIMgreedy_Smago.idp";

	if(ErrorMaxEIM(i-1)<epsEIM){
		M = i;
		break;
	}
		
}

// Guardamos la matriz B, y los puntos mágicos, así como los errores obtenidos y los Reynolds de cada snapshot
real[int] muEIMF(M);
muEIMF = muEIM(0:M-1);
write("Bases_EIM/muEIM_Smago.txt", muEIMF, 0, 0);


real[int, int] BFinal(M,M);
BFinal = BM(0:M-1,0:M-1);
write("Bases_EIM/MatrizEIM_Smago.txt", BFinal, 0, 0, 0, 20);

real[int] TM(M);
TM = Tmax(0:M-1);
write("Bases_EIM/TintEIM_Smago.txt", TM, 0, 0);


real[int] ErrorEIM(M);
ErrorEIM = ErrorMaxEIM(0:M-1);
write("Bases_EIM/ErrorEIM_Smago.txt", ErrorEIM, 0, 0);

timeEIM = clock() - timeEIM;
mpi(cout<<"Tiempo EIM "<<mpisize<< " procesador(es): "<<timeEIM<<endl;)


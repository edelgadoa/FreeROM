////////////
// FreeROM
///////////

/////////////////////////////////////////
//// Boussinesq + VMS-Smago ///
/////////////////////////////////////////

// Codigo para resolver el problema de EF de VMS-Smago de boussinesq. 
// Elemento Finito P2-P2-P1 en vel-temp-pres 

/*
//Definimos macros
macro Grad(u) [dx(u), dy(u)]//
macro div(u1,u2) (dx(u1)+dy(u2))//
macro UgradV(u1,u2,v1,v2) [[u1,u2]'*[dx(v1),dy(v1)],[u1,u2]'*[dx(v2),dy(v2)]]//
macro mod(u1,u2) (sqrt(dx(u1)^2+dy(u1)^2+dx(u2)^2+dy(u2)^2))//
macro moddc(u1x,u1y,u2x,u2y) (sqrt(u1x^2+u1y^2+u2x^2+u2y^2))//
macro GradGrad(u1,u2,v1,v2) (dx(u1)*dx(v1)+dy(u1)*dy(v1)+dx(u2)*dx(v2)+dy(u2)*dy(v2))//
*/
//Cargamos las macros
int[int] fforder = [1,1,1,1];
load "iovtk"
verbosity = 0;
include "../Auxiliary/Macros_3D.idp"

//Creamos la matriz 
include "../Auxiliary/CuboNxNyNz.idp"

//Labels para los problemas
int paredi = 0; //Pared izquierda
int paredd = 0; //Pared derecha
int paredf = 2; //Pared frontal
int paredt = 2; //Pared trasera
int suelo = 1; //En mi problema, el suelo y las paredes tienen la misma condicion de contorno
int techo = 1;

//Definimos los espacios de EF 
include "Fe_Spaces_NoStab_2D.idp"

//Definimos los parametros a usar 
include "parametros.idp"

//Definimos las matrices de interpolacion y derivacion 
include "Interp_matrix_NoStab_3D.idp"

include "Interp_matrix_NoStab_3D_local.idp"



//Definimos el intervalo de Rayleigh que vamos a calcular 
real[int] vRa(ni+1);

for(int i=0;i<=ni;i++){
	vRa(i)=Ramin+i*(Ramax-Ramin)/(ni);
	//vRa(i)=10^(3+i*(1.)/50);
}





////////////////////////////////////////////////////////
// Resolvemos el problema de EF: Cavidad Boussinesq 2D//
///////////////////////////////////////////////////////

VhP2 SnapUX,SnapUY,SnapUZ,SnapT,SnapP;
VhP1dc SnapVis;


//BUCLE RESOLVER EL PROBLEMA

for (int i=0;i<=1;i++)
{
	
	real Ra=vRa(i);
	
	if(mpirank==0){cout<<"i: "<<i<<"-----"<<Ra<<endl;}
	
	//Incluimos el levantamiento para la temperatura
	include "Levantamiento.idp"

	//Incluimos la matriz fija 

	include "Matrices_fijas_B_2D.idp"
	
	//Definimos la solucion y la solucion en la etapa anterior 
	
	Vh5P2 [u,uY,uZ,uT,uP]; //Solucion 
	
	
	//[u1,u2,t,p] = [UX,UY,t,p];
	u[]=1.;
	
	
	
	// Preliminares a la iteracion
	real itercontrol1 = 2.*epsError + 1.;

	real iterrelative1 = itercontrol1;

	VhP2 u1tmp,u2tmp,u3tmp; //Solucion en la etapa anterior 
	{
		u1tmp=u;
		u2tmp=uY;
		u3tmp=uZ;
	}
	
	//Derivadas en la etapa anterior para el VMS-SMago
	VhP2 udcAux;
	VhP1dc u1dcX,u1dcY,u1dcZ,u2dcX,u2dcY,u2dcZ,u3dcX,u3dcY,u3dcZ,Gr;

	udcAux[] = IPhP2P1*u1tmp[];
	u1dcX[]  = DXP2*udcAux[];		
	u1dcY[]  = DYP2*udcAux[];
	u1dcZ[]  = DZP2*udcAux[];
	 
	udcAux[] = IPhP2P1*u2tmp[];
	u2dcX[]  = DXP2*udcAux[];
	u2dcY[]  = DYP2*udcAux[];
	u2dcZ[]  = DZP2*udcAux[];
	
	udcAux[] = IPhP2P1*u3tmp[];
	u3dcX[]  = DXP2*udcAux[];
	u3dcY[]  = DYP2*udcAux[];
	u3dcZ[]  = DZP2*udcAux[];
	
	Gr=mod(u1dcX,u1dcY,u1dcZ,u2dcX,u2dcY,u2dcZ,u3dcX,u3dcY,u3dcZ);
	//Bucle para llegar a la estabilizacion 
	for(int ii=0;ii<=nIterations && (iterrelative1 > epsError); ii++)
	{
	
	
		///////////////////////////////////
		//Matriz t√©rmino de Conveccion N-S
		///////////////////////////////////
		include "Matrices_variables_B_2D.idp"
	
		////////////////////////////////////
		////MATRIZ SMAGORINSKY VEL FILTRADA
		////////////////////////////////////
		
		include "Matriz_VMSSmago_vel_2D.idp"
		
		////////////////////////////////////
		////MATRIZ SMAGORINSKY TEMP FILTRADA
		////////////////////////////////////
		
		include "Matriz_VMSSmago_temp_2D.idp"
		
		////////////////////////////////////
		/////MATRIZ LPS 
		////////////////////////////////////
		
		matrix LPSpres; 
		include "Matriz_LPS_pres_2D.idp"
		
		///////////////////////////
		//Matriz final 
		///////////////////////////
		
		matrix Afinal;
		Afinal=AvNSb + AvNS;
		Afinal+= Sma;
		Afinal+= SmaT;
		Afinal+= LPSpres;
		
		////////////////////////
		//Segundo miembro
		///////////////////////
		real[int] bNS = vNSb(0,Vh5P2L);
		bNS += bNSf;
		bNS += bTx;
		bNS += bTy;
		bNS += bTz;
		
		MatAVh5P2 = Afinal;
	
		bNS.resize(bNS.n+1);
		bNS(bNS.n-1) = 0;
	
		varf Lagrange([uu,uuY,uuZ,uuT,uuP],[vv,vvY,vvZ,vT,vP]) = intN(ThL)(vP);
		real[int] Lag = Lagrange(0,Vh5P2L);
	
		real[int] pLag;
		ChangeNumbering(MatAVh5P2,Lag,pLag);
		Mat Mfinal = [[MatAVh5P2,pLag],[pLag',1]];
	
		set(Mfinal,sparams=sparamsv);
		
		real[int] xsol = Mfinal^-1*bNS;
	
		Vh5P2L [uL,uLY,uLZ,uLT,uLP];
		uL[] = 0.;
	
		uL[] = xsol;
	
		reduceSolution(uL,u, MatAVh5P2.D, mapVh5P2);
		
	
		
		//Pintamos la solucion de cada iteracion
	
	//	VhP2 TEMP=t+G;
	
	//	plot(TEMP,wait=0,cmm="Solucion en la iteracion "+ii);
	
	    VhP2 eu1,eu2,eu3;
		eu1=u-u1tmp;
		eu2=uY-u2tmp;
		eu3=uZ-u3tmp;
	
		//Inicio calculo normas
		itercontrol1 = sqrt(intN(Th)(gradugradv(eu1,eu2,eu3,eu1,eu2,eu3)));  		    	 
	    //real itertmp1 = sqrt(intN(Th)(gradugradv(u1,u2,u3,u1,u2,u3))); 
	
		iterrelative1 = itercontrol1;///itertmp1;	
		if(mpirank==0){cout << itercontrol1 << endl;}
	//
	//	cout << "------------------------------------" << endl;	
	//	cout << "ERROR RELATIVO PARA u1: "<<iterrelative1<<endl;
	
		//ACTUALIZ.
		u1tmp=u;
		u2tmp=uY;
		u3tmp=uZ;
						
		udcAux[] = IPhP2P1*u1tmp[];
		u1dcX[]  = DXP2*udcAux[];		
		u1dcY[]  = DYP2*udcAux[];
		u1dcZ[]  = DZP2*udcAux[];
	 
		udcAux[] = IPhP2P1*u2tmp[];
		u2dcX[]  = DXP2*udcAux[];
		u2dcY[]  = DYP2*udcAux[];
		u2dcZ[]  = DZP2*udcAux[];
		
		udcAux[] = IPhP2P1*u3tmp[];
		u3dcX[]  = DXP2*udcAux[];
		u3dcY[]  = DYP2*udcAux[];
		u3dcZ[]  = DZP2*udcAux[];
	
		Gr=mod(u1dcX,u1dcY,u1dcZ,u2dcX,u2dcY,u2dcZ,u3dcX,u3dcY,u3dcZ);
		
		if(ii%20==0)
		{
			savevtk("../Data/PostProc/Snapshots_"+Ra+"_"+ii+".vtu",Th,[u,uY,uZ],uT,uP,dataname="Velocity Temperature Pressure",order=fforder);
 			if(mpirank==0){cout << "media pres:" << intN(Th)(uP) << endl;}
		}
	
	}
 	SnapUX = u;
	SnapUY = uY;
	SnapUZ = uZ;
	SnapT = uT;
	SnapP = uP;
	SnapVis = Gr;
	//Guardamos los snapshots 
	
	//Componente X de la velocidad
	ofstream SnapshotVX("../Data/Snapshots/Vx_" + Ra + ".txt");
	SnapshotVX<<SnapUX[]<<endl;
	//Componente Y de la velocidad
	ofstream SnapshotVY("../Data/Snapshots/Vy_" + Ra + ".txt");
	SnapshotVY<<SnapUY[]<<endl;
	//Componente Z de la velocidad
	ofstream SnapshotVZ("../Data/Snapshots/Vz_" + Ra + ".txt");
	SnapshotVZ<<SnapUZ[]<<endl;
	//Presion
	ofstream SnapshotP("../Data/Snapshots/P_" + Ra + ".txt");
	SnapshotP<<SnapP[]<<endl;
	//Temperatura
	ofstream SnapshotT("../Data/Snapshots/T_" + Ra + ".txt");
	SnapshotT<<SnapT[]<<endl;
	//Viscosidad turbulenta
	ofstream SnapshotsVis("../Data/Snapshots/Vis_" + Ra + ".txt");
	SnapshotsVis << SnapVis[] << endl;
	//Coeficiente de estabilizacion de la presion 
	ofstream SnapshotsTau("../Data/Snapshots/Tau_" + Ra + ".txt");
	SnapshotsTau << tau[] << endl;
	
	VhP2 T = uT+G;
	
 	
	
	
	
	
	
}

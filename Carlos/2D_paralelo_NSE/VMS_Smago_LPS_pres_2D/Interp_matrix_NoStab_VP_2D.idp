///////////////
// FreeROM 
/////////////// 

// Definimos las matrices de interpolacion Id-π_h y de derivadas

// Notacion de las matrices: IPhEFXEFY: Matriz de filtrado de EFX -> EFY -> EFX
//							 ------------------------------------------------------
//						     DXEFX: Matrix derivando respecto de x de TODOS los EF a la vez
//						     DYEFX: Matrix derivando respecto de y de TODOS los EF a la vez
//						     DZEFX: Matrix derivando respecto de z de TODOS los EF a la vez (3D)
//							 -------------------------------------------------------
//						     DNXEFX: Matrix derivando respecto de x de la componente N del EFX
//							 -------------------------------------------------------
//                           IPhDXNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           IPhDYNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           



// Matrices de filtrado. 
matrix IPhP2P1, IPh3P23P1, IPhP1dcP1, IPh2P22P1;

{
		matrix IdP2,Id3P2,IdP1dc,IdP1,Id2P2; // IdEFX: Matriz Identidad con dim(EFX) grados de libertad
		{
			VhP2 faux2=1.;
			VhP1dc faux1=1.;
			IdP2 = faux2[];
			IdP1dc = faux1[];
            VhP1 fauxp1 = 1.;
            IdP1 = fauxp1[];
			Id3P2=[[IdP2, 0, 0],[0, IdP2, 0],[0, 0, IdP2]];
			Id2P2=[[IdP2, 0],[0, IdP2]];
		}
		
		matrix PIg = interpolate(VhP1,VhP1dc); //(Id-πh) P1dc->P1->P1dc
		matrix IPg = interpolate(VhP1dc,VhP1); 
		matrix IPPIg = IPg*PIg;
		IPhP1dcP1 = IdP1dc + (-1.)*IPPIg;
		
		matrix PI=interpolate(VhP1,VhP2);
		matrix IP=interpolate(VhP2,VhP1);
		matrix IPPI=IP*PI;
		IPhP2P1 = IdP2 + (-1.)*IPPI;  // (Id-πh) P2->P1->P2 
		
		matrix PI3=interpolate(Vh3P1,Vh3P2);
		matrix IP3=interpolate(Vh3P2,Vh3P1);
		matrix IPPI3=IP3*PI3;
		IPh3P23P1 = Id3P2 + (-1)*IPPI3; // (Id-πh) 3P2->3P1->3P2
		
		matrix PI2=interpolate(Vh2P1,Vh2P2);
		matrix IP2=interpolate(Vh2P2,Vh2P1);
		matrix IPPI2=IP2*PI2;
		IPh2P22P1 = Id2P2 + (-1)*IPPI2; // (Id-πh) 2P2->2P1->2P2
}

// Matrices de derivadas	
matrix DX3P2, DY3P2; // ∂x, ∂y 3P2 -> 3P1dc en las 3 componentes 
matrix DX2P2, DY2P2; // ∂x, ∂y 3P2 -> 3P1dc en las 2 componentes de la velocidad
matrix DXP2, DYP2;   // ∂x, ∂y P2 -> P1dc (El elemento finito solo tiene una componente)
matrix D1X3P2, D2X3P2, D3X3P2; // ∂x 3P2 -> P1dc en la componente 1, 2 y 3 de 3P2
matrix D1Y3P2, D2Y3P2, D3Y3P2; // ∂y 3P2 -> P1dc en la componente 1, 2 y 3 de 3P2

{
	matrix D1,D2,D3; // Cada una de las componentes de EFX que derivo
	int[int] c0 = [0,-1,-1];
	int[int] c1 = [-1,1,-1];
	int[int] c2 = [-1,-1,2];
	
	D1 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c0,op=1);
	D2 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c1,op=1);
	D3 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c2,op=1);
	
	DX3P2 = D1 + D2 + D3;
	
	D1 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c0,op=2);
	D2 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c1,op=2);
	D3 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c2,op=2);
	
	DY3P2 = D1 + D2 + D3;
	
	matrix DD1, DD2; //Cada una de las componentes de EFX que derivo
	int[int] c00 = [0, -1];
	int[int] c11 = [-1, 1];
	
	DD1 = interpolate(Vh2P1dc,Vh2P2,U2Vc=c00,op=1);
	DD2 = interpolate(Vh2P1dc,Vh2P2,U2Vc=c11,op=1);
	
	DX2P2 = DD1 + DD2;
	
	DD1 = interpolate(Vh2P1dc,Vh2P2,U2Vc=c00,op=2);
	DD2 = interpolate(Vh2P1dc,Vh2P2,U2Vc=c11,op=2);
	
	DY2P2 = DD1 + DD2;
	
	/////////////////////////////////////////////////////////
	
	int[int] cs2=[0];
	D1X3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=1);
	D1Y3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=2);	

	cs2=[1];
	D2X3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=1);
	D2Y3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=2);	

	cs2=[2];
	D3X3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=1);
	D3Y3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=2);
	
	////////////////////////////////////////////////////////
	
	DXP2 = interpolate(VhP1dc,VhP2,op=1);
	DYP2 = interpolate(VhP1dc,VhP2,op=2);

}

// Matrices de derivada, con filtrado 
matrix IPhD3X3P2 = IPhP1dcP1 * D3X3P2; // (I-πh) de ∂x componente 3 de 3P2 (3P2 (derivo componente 3) -> P1dc (filtro)-> P1 -> P1dc)
matrix IPhD3Y3P2 = IPhP1dcP1 * D3Y3P2; // (I-πh) de ∂y componente 3 de 3P2 (3P2 (derivo componente 3) -> P1dc (filtro)-> P1 -> P1dc)

matrix IPhDXP2 = IPhP1dcP1 * DXP2; // (I-πh) de ∂x (P2 -> Derivo componente X -> P1dc (filtro) -> P1 -> P1dc) 
matrix IPhDYP2 = IPhP1dcP1 * DYP2; // (I-πh) de ∂y (P2 -> Derivo componente Y -> P1dc (filtro) -> P1 -> P1dc)   


// Matrices filtrado, con derivada (∂x((I-πh u)))
matrix DX2P2IPh = DX2P2 * IPh2P22P1; // Para las matrices de Prod. Escalar en la construccion de las matrices offline reducidas
matrix DY2P2IPh = DY2P2 * IPh2P22P1;

matrix DX3P2IPh = DX3P2 * IPh3P23P1;
matrix DY3P2IPh = DY3P2 * IPh3P23P1;

matrix DXP2IPh = DXP2 * IPhP2P1;
matrix DYP2IPh = DXP2 * IPhP2P1;



///////////////
// FreeROM 
/////////////// 

// Definimos las matrices de interpolacion Id-π_h y de derivadas

// Notacion de las matrices: IPhEFXEFY: Matriz de filtrado de EFX -> EFY -> EFX
//							 ------------------------------------------------------
//						     DXEFX: Matrix derivando respecto de x de TODOS los EF a la vez
//						     DYEFX: Matrix derivando respecto de y de TODOS los EF a la vez
//						     DZEFX: Matrix derivando respecto de z de TODOS los EF a la vez (3D)
//							 -------------------------------------------------------
//						     DNXEFX: Matrix derivando respecto de x de la componente N del EFX
//							 -------------------------------------------------------
//                           IPhDXNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           IPhDYNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           



// Matrices de filtrado. 
matrix IPhP2P1L, IPh3P23P1L, IPhP1dcP1L, IPh2P22P1L;

{
		matrix IdP2L,Id3P2L,IdP1dcL,IdP1L,Id2P2L; // IdEFX: Matriz Identidad con dim(EFX) grados de libertad
		{
			VhP2L faux2=1.;
			VhP1dcL faux1=1.;
			IdP2L = faux2[];
			IdP1dcL = faux1[];
            VhP1L fauxp1 = 1.;
            IdP1L = fauxp1[];
			Id3P2L=[[IdP2L, 0, 0],[0, IdP2L, 0],[0, 0, IdP2L]];
			Id2P2L=[[IdP2L, 0],[0, IdP2L]];
		}
		
		matrix PIgL = interpolate(VhP1L,VhP1dcL); //(Id-πh) P1dc->P1->P1dc
		matrix IPgL = interpolate(VhP1dcL,VhP1L); 
		matrix IPPIgL = IPgL*PIgL;
		IPhP1dcP1L = IdP1dcL + (-1.)*IPPIgL;
		
		matrix PIL=interpolate(VhP1L,VhP2L);
		matrix IPL=interpolate(VhP2L,VhP1L);
		matrix IPPIL=IPL*PIL;
		IPhP2P1L = IdP2L + (-1.)*IPPIL;  // (Id-πh) P2->P1->P2 
		
		matrix PI3L=interpolate(Vh3P1L,Vh3P2L);
		matrix IP3L=interpolate(Vh3P2L,Vh3P1L);
		matrix IPPI3L=IP3L*PI3L;
		IPh3P23P1L = Id3P2L + (-1)*IPPI3L; // (Id-πh) 3P2->3P1->3P2
		
		matrix PI2L=interpolate(Vh2P1L,Vh2P2L);
		matrix IP2L=interpolate(Vh2P2L,Vh2P1L);
		matrix IPPI2L=IP2L*PI2L;
		IPh2P22P1L = Id2P2L + (-1)*IPPI2L; // (Id-πh) 2P2->2P1->2P2
}

// Matrices de derivadas	
matrix DX3P2L, DY3P2L; // ∂x, ∂y 3P2 -> 3P1dc en las 3 componentes 
matrix DX2P2L, DY2P2L; // ∂x, ∂y 3P2 -> 3P1dc en las 2 componentes de la velocidad
matrix DXP2L, DYP2L;   // ∂x, ∂y P2 -> P1dc (El elemento finito solo tiene una componente)
matrix D1X3P2L, D2X3P2L, D3X3P2L; // ∂x 3P2 -> P1dc en la componente 1, 2 y 3 de 3P2
matrix D1Y3P2L, D2Y3P2L, D3Y3P2L; // ∂y 3P2 -> P1dc en la componente 1, 2 y 3 de 3P2

{
	matrix D1,D2,D3; // Cada una de las componentes de EFX que derivo
	int[int] c0 = [0,-1,-1];
	int[int] c1 = [-1,1,-1];
	int[int] c2 = [-1,-1,2];
	
	D1 = interpolate(Vh3P1dcL,Vh3P2L,U2Vc=c0,op=1);
	D2 = interpolate(Vh3P1dcL,Vh3P2L,U2Vc=c1,op=1);
	D3 = interpolate(Vh3P1dcL,Vh3P2L,U2Vc=c2,op=1);
	
	DX3P2L = D1 + D2 + D3;
	
	D1 = interpolate(Vh3P1dcL,Vh3P2L,U2Vc=c0,op=2);
	D2 = interpolate(Vh3P1dcL,Vh3P2L,U2Vc=c1,op=2);
	D3 = interpolate(Vh3P1dcL,Vh3P2L,U2Vc=c2,op=2);
	
	DY3P2L = D1 + D2 + D3;
	
	matrix DD1, DD2; //Cada una de las componentes de EFX que derivo
	int[int] c00 = [0, -1];
	int[int] c11 = [-1, 1];
	
	DD1 = interpolate(Vh2P1dcL,Vh2P2L,U2Vc=c00,op=1);
	DD2 = interpolate(Vh2P1dcL,Vh2P2L,U2Vc=c11,op=1);
	
	DX2P2L = DD1 + DD2;
	
	DD1 = interpolate(Vh2P1dcL,Vh2P2L,U2Vc=c00,op=2);
	DD2 = interpolate(Vh2P1dcL,Vh2P2L,U2Vc=c11,op=2);
	
	DY2P2L = DD1 + DD2;
	
	/////////////////////////////////////////////////////////
	
	int[int] cs2=[0];
	D1X3P2L = interpolate(VhP1dcL,Vh3P2L,U2Vc=cs2,op=1);
	D1Y3P2L = interpolate(VhP1dcL,Vh3P2L,U2Vc=cs2,op=2);	

	cs2=[1];
	D2X3P2L = interpolate(VhP1dcL,Vh3P2L,U2Vc=cs2,op=1);
	D2Y3P2L = interpolate(VhP1dcL,Vh3P2L,U2Vc=cs2,op=2);	

	cs2=[2];
	D3X3P2L = interpolate(VhP1dcL,Vh3P2L,U2Vc=cs2,op=1);
	D3Y3P2L = interpolate(VhP1dcL,Vh3P2L,U2Vc=cs2,op=2);
	
	////////////////////////////////////////////////////////
	
	DXP2L = interpolate(VhP1dcL,VhP2L,op=1);
	DYP2L = interpolate(VhP1dcL,VhP2L,op=2);

}

// Matrices de derivada, con filtrado 
matrix IPhD3X3P2L = IPhP1dcP1L * D3X3P2L; // (I-πh) de ∂x componente 3 de 3P2 (3P2 (derivo componente 3) -> P1dc (filtro)-> P1 -> P1dc)
matrix IPhD3Y3P2L = IPhP1dcP1L * D3Y3P2L; // (I-πh) de ∂y componente 3 de 3P2 (3P2 (derivo componente 3) -> P1dc (filtro)-> P1 -> P1dc)

matrix IPhDXP2L = IPhP1dcP1L * DXP2L; // (I-πh) de ∂x (P2 -> Derivo componente X -> P1dc (filtro) -> P1 -> P1dc) 
matrix IPhDYP2L = IPhP1dcP1L * DYP2L; // (I-πh) de ∂y (P2 -> Derivo componente Y -> P1dc (filtro) -> P1 -> P1dc)   


// Matrices filtrado, con derivada (∂x((I-πh u)))
matrix DX2P2IPhL = DX2P2L * IPh2P22P1L; // Para las matrices de Prod. Escalar en la construccion de las matrices offline reducidas
matrix DY2P2IPhL = DY2P2L * IPh2P22P1L;

matrix DX3P2IPhL = DX3P2L * IPh3P23P1L;
matrix DY3P2IPhL = DY3P2L * IPh3P23P1L;

matrix DXP2IPhL = DXP2L * IPhP2P1L;
matrix DYP2IPhL = DXP2L * IPhP2P1L;



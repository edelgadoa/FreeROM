///////////////
// FreeROM 
///////////////

/////////////////////////////////////////
//// NS + VMS-Smago + Estab Pres (LPS)///
/////////////////////////////////////////

// Codigo para resolver el problema de EF de VMS-Smago con estabilizacion LPS en la presion. 
// Elemento Finito P2-P2 (no estable) en vel-pres 


// Cargamos librerias
load "iovtk" 

// Cargamos macros y funciones i/o
include "../Auxiliary/Macros_2D.idp"
// include "../../Auxiliary/IO.idp" //falla el mpirank -> posiblemente necesite ejecutarlo con freefemmpi

// Creamos la matriz
include "../Mallas/CuadradoNxNy.idp"

// Definimos los espacios de EF
include "FE_Spaces_NoStab_VP_2D.idp"

// Definimos las matrices de interpolacion y derivacion
include "Interp_matrix_NoStab_VP_2D.idp"

// Definimos los parametros a usar
include "Parametros_2D.idp"

// Incluimos el levantamiento
include "Levantamiento.idp"

//Definimos el intervalo de Reynolds que  vamos a considerar para resolver el problema de EF
int nSnapshots = 83; // numero de Snapshots que voy a querer calcular 
real[int] vReynolds(nSnapshots);


Remin = 1000;
Remax = 5100;
for(int i=0; i<nSnapshots; i++){
	vReynolds(i)=Remin+i*(Remax-Remin)/(nSnapshots-1);
}

VhP2 SnapX, SnapY,SnapP;
VhP1dc SnapVis;

for(int i = 0;i<nSnapshots;i++){
//Componente X de la velocidad
ifstream SnapshotVX("../Data/Snapshots/Vx_" + vReynolds(i) + ".txt");
SnapshotVX>>SnapX[];

//Componente Y de la velocidad
ifstream SnapshotVY("../Data/Snapshots/Vy_" + vReynolds(i) + ".txt");
SnapshotVY>>SnapY[];

//Presion
ifstream SnapshotP("../Data/Snapshots/P_" + vReynolds(i) + ".txt");
SnapshotP>>SnapP[];

//Viscosidad turbulenta
ifstream SnapshotsVis("../Data/Snapshots/Vis_" + vReynolds(i) + ".txt");
SnapshotsVis>> SnapVis[];

plot(SnapP,fill=1,value=1,cmm="Velocidad X"+vReynolds(i),wait=1);


}
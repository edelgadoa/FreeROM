///////////////
// FreeROM 
/////////////// 

// Definimos las matrices de interpolacion Id-π_h y de derivadas

// Notacion de las matrices: IPhEFXEFY: Matriz de filtrado de EFX -> EFY -> EFX
//							 ------------------------------------------------------
//						     DXEFX: Matrix derivando respecto de x de TODOS los EF a la vez
//						     DYEFX: Matrix derivando respecto de y de TODOS los EF a la vez
//						     DZEFX: Matrix derivando respecto de z de TODOS los EF a la vez (3D)
//							 -------------------------------------------------------
//						     DNXEFX: Matrix derivando respecto de x de la componente N del EFX
//							 -------------------------------------------------------
//                           IPhDXNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           IPhDYNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           



// Matrices de filtrado. 
matrix IPhP2P1, IPh3P23P1, IPhP1dcP1,IPh3P13P0,IPhP0P1;

{
		matrix IdP2,Id3P2,IdP1dc,IdP1,Id3P1,IdP0; // IdEFX: Matriz Identidad con dim(EFX) grados de libertad
		{
			VhP2 faux2=1.;
			VhP1dc faux1=1.;
			IdP2 = faux2[];
			IdP1dc = faux1[];
            VhP1 fauxp1 = 1.;
            IdP1 = fauxp1[];
			VhP0 fauxp0 = 1.;
			IdP0 = fauxp0[];
			Id3P1=[[IdP1, 0, 0],[0, IdP1, 0],[0, 0, IdP1]];
			Id3P2=[[IdP2, 0, 0],[0, IdP2, 0],[0, 0, IdP2]];
		}
		
		matrix PIg = interpolate(VhP1,VhP1dc); //(Id-πh) P1dc->P1->P1dc
		matrix IPg = interpolate(VhP1dc,VhP1); 
		matrix IPPIg = IPg*PIg;
		IPhP1dcP1 = IdP1dc + (-1.)*IPPIg;
		
		matrix PIg0 = interpolate(VhP1,VhP0); //(Id - πh) P0 -> P1 -> P0
		matrix IPg0 = interpolate(VhP0,VhP1);
		matrix IPPIg0 = IPg0*PIg0;
		IPhP0P1 = IdP0 + (-1.)*IPPIg0;
		
		matrix PI=interpolate(VhP1,VhP2);
		matrix IP=interpolate(VhP2,VhP1);
		matrix IPPI=IP*PI;
		IPhP2P1 = IdP2 + (-1.)*IPPI;  // (Id-πh) P2->P1->P2 
		
		matrix PI3=interpolate(Vh3P1,Vh3P2);
		matrix IP3=interpolate(Vh3P2,Vh3P1);
		matrix IPPI3=IP3*PI3;
		IPh3P23P1 = Id3P2 + (-1)*IPPI3; // (Id-πh) 3P2->3P1->3P2
		
		matrix PI30=interpolate(Vh3P0,Vh3P1);
		matrix IP30=interpolate(Vh3P1,Vh3P0);
		matrix IPPI30=IP30*PI30;
		IPh3P13P0 = Id3P1 + (-1)*IPPI30; // (Id-πh) 3P1->3P0->3P1
		
}

// Matrices de derivadas	
matrix DX3P2, DY3P2; // ∂x, ∂y 3P2 -> 3P1dc en las 3 componentes 
matrix DXP2, DYP2;   // ∂x, ∂y P2 -> P1dc (El elemento finito solo tiene una componente)
matrix D1X3P2, D2X3P2, D3X3P2, D3X2P2P1; // ∂x 3P2 -> P1dc en la componente 1, 2 y 3 de 3P2
matrix D1Y3P2, D2Y3P2, D3Y3P2, D3Y2P2P1; // ∂y 3P2 -> P1dc en la componente 1, 2 y 3 de 3P2

{
	matrix D1,D2,D3; // Cada una de las componentes de EFX que derivo
	int[int] c0=[0,-1,-1];
	int[int] c1=[-1,1,-1];
	int[int] c2=[-1,-1,2];
	
	D1 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c0,op=1);
	D2 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c1,op=1);
	D3 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c2,op=1);
	
	DX3P2 = D1 + D2 + D3;
	
	D1 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c0,op=2);
	D2 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c1,op=2);
	D3 = interpolate(Vh3P1dc,Vh3P2,U2Vc=c2,op=2);
	
	DY3P2 = D1 + D2 + D3;
	
	/////////////////////////////////////////////////////////
	
	int[int] cs2=[0];
	D1X3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=1);
	D1Y3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=2);

	cs2=[1];
	D2X3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=1);
	D2Y3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=2);


	cs2=[2];
	D3X3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=1);
	D3Y3P2 = interpolate(VhP1dc,Vh3P2,U2Vc=cs2,op=2);
	
	cs2=[2];
	D3X2P2P1 = interpolate(VhP0,Vh2P2P1,U2Vc=cs2,op=1);
	D3Y2P2P1 = interpolate(VhP0,Vh2P2P1,U2Vc=cs2,op=2);
	
	////////////////////////////////////////////////////////
	
	DXP2 = interpolate(VhP1dc,VhP2,op=1);
	DYP2 = interpolate(VhP1dc,VhP2,op=2);

}

// Matrices de derivada, con filtrado
matrix IPhD3X3P2 = IPhP1dcP1 * D3X3P2; // (I-πh) de ∂x componente 3 de 3P2 (3P2 (derivo componente 3) -> P1dc (filtro)-> P1 -> P1dc)
matrix IPhD3Y3P2 = IPhP1dcP1 * D3Y3P2; // (I-πh) de ∂y componente 3 de 3P2 (3P2 (derivo componente 3) -> P1dc (filtro)-> P1 -> P1dc)

matrix IPhD3X2P2P1 = IPhP0P1 * D3X2P2P1;
matrix IPhD3Y2P2P1 = IPhP0P1 * D3Y2P2P1;

//Matrices de derivada, con filtrado para una componente solo

matrix IPhDXP2 = IPhP1dcP1*DXP2;
matrix IPhDYP2 = IPhP1dcP1*DYP2;

//Matrices de filtrado con derivada 
matrix DXP2IPh = DXP2*IPhP2P1;
matrix DYP2IPh = DYP2*IPhP2P1;


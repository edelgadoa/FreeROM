/////////////////////////////////////////
//// NS + VMS-Smago + LPS ///
/////////////////////////////////////////

macro dimension () 2//
include "macro_ddm.idp"

// Cargamos librerias
load "iovtk"
load "lapack" 

// Cargamos macros y funciones i/o
include "../Auxiliary/Macros_2D.idp"
// include "../../Auxiliary/IO.idp" //falla el mpirank -> posiblemente necesite ejecutarlo con freefemmpi

// Creamos la matriz
include "../Mallas/CuadradoNxNy.idp"

// Definimos los espacios de EF
include "../EF/FE_Spaces_NoStab_VP_2D.idp"


// Definimos los parametros a usar
include "../EF/Parametros_2D.idp"

// Incluimos el levantamiento
include "../EF/Levantamiento.idp"

////////////////////
//Cargamos datos y construimos la matriz total de snapshots
///////////////////


//Definimos el intervalo de Reynolds que  vamos a considerar para resolver el problema de EF
int nSnapshots = 165; // numero de Snapshots que voy a querer calcular 
real[int] vReynolds(nSnapshots);


Remin = 1000;
Remax = 5100;
for(int i=0; i<nSnapshots; i++){
	vReynolds(i)=Remin+i*(Remax-Remin)/(nSnapshots-1);
}


VhP2 SnapUX,SnapUY,SnapP,SnapT;
VhP1dc SnapVis;
VhP0 SnapTau;

real[int,int] Avx(VhP2.ndof,nSnapshots),Avy(VhP2.ndof,nSnapshots),Ap(VhP2.ndof,nSnapshots),Avis(VhP1dc.ndof,nSnapshots);
for(int i = 0;i<nSnapshots;i++)
{
	Reynolds = vReynolds(i);
	
	ifstream SnapshotsVX("../Data/Snapshots/Snapshots_VMS_P2P2/Vx_" + Reynolds + ".txt");
	SnapshotsVX >> SnapUX[];
	
	ifstream SnapshotsVY("../Data/Snapshots/Snapshots_VMS_P2P2/Vy_" + Reynolds + ".txt");
	SnapshotsVY >> SnapUY[];
	
	ifstream SnapshotsP("../Data/Snapshots/Snapshots_VMS_P2P2/P_" + Reynolds + ".txt");
	SnapshotsP >> SnapP[];
	
	
	ifstream SnapshotsVis("../Data/Snapshots/Snapshots_VMS_P2P2/Vis_" + Reynolds + ".txt");
	SnapshotsVis >> SnapVis[];
	
	
	Avx(:,i) = SnapUX[];
	Avy(:,i) = SnapUY[];
	Ap(:,i) = SnapP[];
	Avis(:,i) = SnapVis[];

}

//////////////////////////////////
//Construimos las matrices de correlacion 
/////////////////////////////////

real[int,int] KU(nSnapshots,nSnapshots),KP(nSnapshots,nSnapshots),KVis(nSnapshots,nSnapshots);

matrix prod;
{
	varf a(u,v)= 
	intN(Th)(Grad(u)'*Grad(v));
	prod = a(VhP2,VhP2);
}

matrix prodvis;
{
	varf a(u,v)=
	intN(Th)(Grad(u)'*Grad(v));
	prodvis = a(VhP1dc,VhP1dc);
}



real[int,int] KUL = KU, KPL = KP, KVisL=KVis;
for(int i=0;i<nSnapshots;i++)
{

	if(mpirank==i%mpisize)
	{
		real[int] auxU1 = prod*Avx(:,i);
		real[int] auxU2 = prod*Avy(:,i);
		real[int] auxP =  prod*Ap(:,i);
		real[int] auxVis = prodvis*Avis(:,i);
		
		for(int j=i;j<nSnapshots;j++)
		{
			KUL(i,j) = (Avx(:,j)'*auxU1 + Avy(:,j)'*auxU2)/nSnapshots;
			KPL(i,j) = (Ap(:,j)'*auxP)/nSnapshots;
			KVisL(i,j) = (Avis(:,j)'*auxVis)/nSnapshots;
			if(i!=j){KUL(j,i) = KUL(i,j); KPL(j,i)=KPL(i,j); KVisL(j,i)=KVisL(i,j);}
		}
	
	}

}

mpiAllReduce(KUL,KU,mpiCommWorld,mpiSUM);
mpiAllReduce(KPL,KP,mpiCommWorld,mpiSUM);
mpiAllReduce(KVisL,KVis,mpiCommWorld,mpiSUM);



///////////////
//SVD
//////////////

real[int,int] UU(nSnapshots,nSnapshots),VU(nSnapshots,nSnapshots),UP(nSnapshots,nSnapshots),VP(nSnapshots,nSnapshots),UVis(nSnapshots,nSnapshots),VVis(nSnapshots,nSnapshots);
real[int] SU(nSnapshots),SP(nSnapshots),SVis(nSnapshots); // Eigenvalues vector

dgesdd(KU,UU,SU,VU);
dgesdd(KP,UP,SP,VP);
dgesdd(KVis,UVis,SVis,VVis);


int dU; // dU = dimension ensemble of velocity snapshots 
int dP; // dP = dimension ensemble of pressure snapshots 
int dVis; // dVis = dimension ensemble of turbulence viscosity snapshots

//Criterio para la dimension

real sumU,sumP,sumVis;

for(int i = 0;i<nSnapshots;i++)
{
	sumU += SU(i);
	sumP += SP(i);
	sumVis += SVis(i);
}

real auxU,auxT,auxP,auxVis,auxTau;

real tol=1-1.e-10; // tolerance
auxU = 0.; auxP = 0.; auxVis=0.;
for(int i=0;i<nSnapshots;i++)
{
	auxU += SU(i);
	if ((auxU/sumU)>tol) {break;}
	if(mpirank==0){cout<< i+1 << " EigenvalueU = " << auxU/sumU << endl; }	
	dU=i+1;
}
if(mpirank==0){cout<< " Dimension ensemble of velocity snapshots = " << dU << endl;}	

for(int i=0;i<nSnapshots;i++)
{
	auxP += SP(i);
	if ((auxP/sumP)>tol) {break;}
	if(mpirank==0){cout<< i+1 << " EigenvalueP = " << auxP/sumP << endl;} 	
	dP=i+1;
}
if(mpirank==0){cout<< " Dimension ensemble of pressure snapshots = " << dP << endl;} 	



for(int i=0;i<nSnapshots;i++)
{
	auxVis += SVis(i);
	if ((auxVis/sumVis)>tol) {break;}
	if(mpirank==0){cout<< i+1 << " EigenvalueVis = " << (auxVis/sumVis) << endl;} 	
	dVis=i+1;
}
if(mpirank==0){cout<< " Dimension ensemble of viscosity snapshots = " << dVis << endl;}	



////////////////////////////////
//Construct the POD basis
///////////////////////////////
real[int,int] Viu(VhP2.ndof,dU),Viv(VhP2.ndof,dU),aiU(nSnapshots,dU),Vip(VhP2.ndof,dP),aiP(nSnapshots,dP); 
real[int,int] Vivis(VhP1dc.ndof,dVis),aiVis(nSnapshots,dVis);
real trapu,trapv,trapp,trapvis; // Variables to make the time integration
VhP2 modeu,modeuold,modev,modevold,velmagPOD,modep,modepold;
VhP1dc modevis,modevisold;



//Velocity POD basis
int[int] Order=[1];

for(int k=0;k<dU;k++)
{
	for(int i=0;i<VhP2.ndof;i++)
	{
		trapu=0.;	trapv=0.;
		for(int j=0;j<nSnapshots;j++)
		{	
			trapu+=Avx(i,j)*UU(j,k);			
			trapv+=Avy(i,j)*UU(j,k);			
			aiU(j,k)=sqrt(SU(k)*nSnapshots)*UU(j,k);
		}
		Viu(i,k)=trapu/sqrt(SU(k)*nSnapshots);
		Viv(i,k)=trapv/sqrt(SU(k)*nSnapshots); 		
	}
	modeu[]=Viu(:,k);	
  	modev[]=Viv(:,k);
  	real orthog,orthon;
  	
	/*
	// L2-POD basis
	orthog=int2d(Th)(modeu*modeuold+modev*modevold);
	orthon=int2d(Th)(modeu*modeu+modev*modev);
	*/
	
	
	// H1-POD basis
	orthog=int2d(Th)(Grad(modeu)'*Grad(modeuold)+Grad(modev)'*Grad(modevold));
	orthon=int2d(Th)(Grad(modeu)'*Grad(modeu)+Grad(modev)'*Grad(modev));
	
	if(mpirank==0){cout << "-------------------------------------------" << endl;
	cout << "Vel. Mode n. " << k+1 << ", orthog. = " << orthog << endl;
	cout << "Vel. Mode n. " << k+1 << ", orthon. = " << orthon << endl;}
	
	velmagPOD=sqrt(modeu^2+modev^2);
	
	plot(velmagPOD,fill=1,cmm="Velocity magnitude, POD mode n. "+(k+1));// Plot of POD modes velocity magnitude		
	savevtk("../Data/PODbasis/PostProc/VMS_P2P2/modeU_"+(k+1)+".vtk",Th,velmagPOD,dataname="velPOD",order=Order);//,bin=Bin)
	modeuold=modeu;
	modevold=modev;
} 
//------------Export data---------------------
ofstream outputaiU("../Data/PODbasis/VMS_P2P2/PODtimeCoU.txt");		outputaiU<<aiU;
ofstream outputbu("../Data/PODbasis/VMS_P2P2/BasePODvelocity1.txt");	outputbu<<Viu;
ofstream outputbv("../Data/PODbasis/VMS_P2P2/BasePODvelocity2.txt");	outputbv<<Viv;




//Pressure POD basis


for(int k=0;k<dP;k++)
{
	for(int i=0;i<VhP2.ndof;i++)
	{
		trapp=0.;
		for(int j=0;j<nSnapshots;j++)
		{	
			trapp+=Ap(i,j)*UP(j,k);			
			aiP(j,k)=sqrt(SP(k)*nSnapshots)*UP(j,k);
		}
		Vip(i,k)=trapp/sqrt(SP(k)*nSnapshots);
	}
	modep[]=Vip(:,k);	
  	real orthog,orthon;
  	
	/*
	// L2-POD basis
	orthog=int2d(Th)(modep*modepold);
	orthon=int2d(Th)(modep*modep);
	*/
	
	// H1-POD basis
	orthog=int2d(Th)(Grad(modep)'*Grad(modepold));
	orthon=int2d(Th)(Grad(modep)'*Grad(modep));
	
	if(mpirank==0){cout << "-------------------------------------------" << endl;
	cout << "Pres. Mode n. " << k+1 << ", orthog. = " << orthog << endl;
	cout << "Pres. Mode n. " << k+1 << ", orthon. = " << orthon << endl;}
		
	plot(modep,fill=1,cmm="Pressure, POD mode n. "+(k+1));// Plot of POD modes pressure	
	savevtk("../Data/PODbasis/PostProc/VMS_P2P2/modeP_"+(k+1)+".vtk",Th,modep,dataname="presPOD",order=Order);
	modepold=modep;
} 
ofstream outputaiP("../Data/PODbasis/VMS_P2P2/PODtimeCoP.txt");		outputaiP<<aiP;
ofstream outputbp("../Data/PODbasis/VMS_P2P2/BasePODpressure.txt");	outputbp<<Vip;



	//POD basis viscosity

	for(int k=0;k<dVis;k++)
	{
		for(int i=0;i<VhP1dc.ndof;i++)
		{
			trapvis=0.;
			for(int j=0;j<nSnapshots;j++)
			{	
				trapvis+=Avis(i,j)*UVis(j,k);			
				aiVis(j,k)=sqrt(SVis(k)*nSnapshots)*UVis(j,k);
			}
			Vivis(i,k)=trapvis/sqrt(SVis(k)*nSnapshots);
		}
		modevis[]=Vivis(:,k);	
	  	real orthog,orthon;
  		/*
		// L2-POD basis
		orthog=int2d(Th)(modevis*modevisold);
		orthon=int2d(Th)(modevis*modevis);
	*/
		
		// H1-POD basis
		orthog=int2d(Th)(Grad(modep)'*Grad(modepold));
		orthon=int2d(Th)(Grad(modep)'*Grad(modep));
		
		if(mpirank==0){cout << "-------------------------------------------" << endl;
		cout << "Vis. Mode n. " << k+1 << ", orthog. = " << orthog << endl;
		cout << "Vis. Mode n. " << k+1 << ", orthon. = " << orthon << endl;}
		
		//plot(modep,fill=1,cmm="Pressure, POD mode n. "+(k+1));// Plot of POD modes pressure	
		savevtk("../Data/PODbasis/PostProc/VMS_P2P2/modeVis_"+(k+1)+".vtk",Th,modevis,dataname="visPOD",order=Order);
		modevisold=modevis;
	} 
	ofstream outputaiVis("../Data/PODbasis/VMS_P2P2/PODtimeCoVis.txt");		outputaiVis<<aiVis;
	ofstream outputbvis("../Data/PODbasis/VMS_P2P2/BasePODviscosity.txt");	outputbvis<<Vivis;
	

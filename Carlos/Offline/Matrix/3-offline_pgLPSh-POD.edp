// Author: Samuele Rubino - 17/01/2019
/*
This script performs the offline phase of a LPSh-POD-ROM on pressure gradient for a 2D laminar unsteady flow around a circular cylinder.
*/

// MACRO DEFINITION
macro Grad(u) [dx(u),dy(u)]//EOM 2D Gradient operator

// PHYSICAL PARAMETERS
real nu  = 1.e-3; // Kinematic viscosity

// INFLOW CONDITION
real Um  = 1.5; 			 // Max inlet velocity
real Ubar= 2*Um/3; 			 // \int_{\Gamma_in} Uin / \int_{\Gamma_in} =1

////////////////////////////////////////////////////////////////////////////////
// READING Data
////////////////////////////////////////////////////////////////////////////////
int ndof,dP; //ndof and dP are, respectively, the number of FE space dof and dimension of ensemble of pressure snapshots 

mesh Th=readmesh("Data/Mesh.msh"); // Importing mesh
func PkP=P2;
func Pk1dc=P1dc; 
func Pk1=P1; 
fespace Qh(Th,PkP); 			 // Pressure FE space
fespace Xh1dc(Th,Pk1dc); 		 // 2D Piecewise linear DC FE space
fespace Xh1(Th,Pk1);	 		 // 2D Piecewise linear FE space
fespace Ph(Th,P0);
Ph h=hTriangle;Ph taum;cout << "size of mesh = " << h[].max << endl; 
cout << "------------------------------" << endl;

// TIME SETUP FOR NUMERICAL SIMULATION
real dt = 2.e-3;  // Time step
real dtt = 1./dt; // Inverse of time step

// STABILIZATION COEFF.
real cc1p=4;
int  dim=2;  //Dimension
int  l=2;    //Interpolation order
int gamma=2; //Time accuracy
real cc1=cc1p^2*l^4;
real cc2=sqrt(cc1);

//STAB. COEFF. CODINA FORM (constant U=Ubar)
taum=((gamma*dtt)^2 + dim*cc1*(nu^2)/(h^4) + cc2*(Ubar^2)/(h^2))^(-0.5);
//plot(taum,fill=1,value=1,cmm="Online Stab. Coef.");// Plot of taum

ifstream introPODp("Data/PODbasis/pressure/BasePODpressure_200-400_nu.txt"); // Importing p POD basis
introPODp>>ndof;introPODp>>dP;
real[int,int] Phip(ndof,dP);
for(int i=0;i<ndof;i++){for(int j=0;j<dP;j++){introPODp>>Phip(i,j);}}



// OFFLINE STAB. MATRIX CONSTRUCTION
Qh modepj,modepi;
Xh1dc xPmodepj,xPmodepi,yPmodepj,yPmodepi;

real[int,int] Projh(dP,dP);// Stab. Proj. pressure gradient matrix

//INTERP. MATRIX
matrix Dxp = interpolate(Xh1dc,Qh,op=1);
matrix Dyp = interpolate(Xh1dc,Qh,op=2);

matrix IPh;
{	
	matrix Idh;
	{
		Xh1dc fAux1dc=1.;
		Idh = fAux1dc[];
	}
	matrix PIg = interpolate(Xh1,Xh1dc); 
	matrix IPg = interpolate(Xh1dc,Xh1); 
	matrix IPPIg = IPg*PIg;
	IPh = Idh + (-1.)*IPPIg;
}


// MATRIX PRES. GRAD. STAB.
matrix DDx=IPh*Dxp;
matrix DDy=IPh*Dyp;

for(int j=0;j<dP;j++)
{	
	modepj[]=Phip(:,j);
	xPmodepj[]=DDx*modepj[];
	yPmodepj[]=DDy*modepj[];
	cout << j+1 << " Row of Stab. pgLPSh Matrix" << endl; 		
		
	for(int i=j;i<dP;i++)
	{	
		modepi[]=Phip(:,i);
		xPmodepi[]=DDx*modepi[];
		yPmodepi[]=DDy*modepi[];	
		Projh(j,i)=int2d(Th)(taum*(xPmodepj*xPmodepi+yPmodepj*yPmodepi));
		if (i!=j) {Projh(i,j)=Projh(j,i);}
	}	
}

cout << "Built Stab. pgLPSh Matrix" << endl;

//------------Export data----------------
ofstream outputProjh("Data/Matrixoff/Reynolds_100/pgProjh.txt");	outputProjh<<Projh; 
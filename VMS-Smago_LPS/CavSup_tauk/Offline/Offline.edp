//load "lapack"
load "iovtk"


int[int] fforder=[1,1,1]; // 0 save a cell value, 1 save point value

//verbosity=0;


include "betas.idp"
macro Grad(u) [dx(u), dy(u)]//
macro div(u1,u2) (dx(u1)+dy(u2))//
macro UgradV(u1,u2,v1,v2) [[u1,u2]'*[dx(v1),dy(v1)],[u1,u2]'*[dx(v2),dy(v2)]]//
macro mod(u1,u2) (sqrt((dx(u1))^2+(dy(u1))^2+(dx(u2))^2+(dy(u2))^2))//
macro moddc(u1x,u1y,u2x,u2y) (sqrt(u1x^2+u1y^2+u2x^2+u2y^2)) //
macro GradGrad(u1,u2,v1,v2) (dx(u1)*dx(v1)+dy(u1)*dy(v1)+dx(u2)*dx(v2)+dy(u2)*dy(v2))//

//Constantes varias
real CS=0.1;
real cc1=16.;
real cc2=sqrt(cc1);
real epspen=1e-8;


real betamub,romub;

mesh Th=readmesh("CavThRF.msh");
//Valor \mu fijo para el producto escalar
real Refijo=1000.; 

////////////////////////////////
//Constantes para el Reynolds//
///////////////////////////////
real Re; //Declaración del parámetro


int nbases=30;
int N=nbases; //Numero de bases final

real [int] REbest(nbases),ResMax(nbases-1),TaunMax(nbases-1), PresErrMax(nbases-1); //vRelog(nlog+1);


REbest(0)=Refijo;  //número máximo de bases que queremos hallar

//////////////////////////////////////////////////////////
//Resolvemos para hallar el primer elemento de la base////
//////////////////////////////////////////////////////////

fespace Vh3P2(Th,[P2,P2,P2]);
fespace Vh3P1(Th,[P1,P1,P1]);
fespace Vh3P1dc(Th,[P1dc,P1dc,P1dc]); 
fespace VhP0(Th,P0); 
fespace VhP1dc(Th,P1dc);
fespace VhP1(Th,P1);
fespace VhP2(Th,P2);
fespace Vh2P2(Th,[P2,P2]);

matrix IPh,IPh3,IPh1;
{
    matrix IdP2,Id3P2,IdP1dc;
	{
		VhP2 faux2=1.;
		VhP1dc faux1=1.;
		IdP2 = faux2[];
		IdP1dc = faux1[];
		Id3P2=[[IdP2,0,0],[0,IdP2,0],[0,0,IdP2]];
	}
		
	matrix PIg = interpolate(VhP1,VhP1dc); 
	matrix IPg = interpolate(VhP1dc,VhP1); 
	matrix IPPIg = IPg*PIg;
	IPh1 = IdP1dc + (-1.)*IPPIg;
	
	matrix PI=interpolate(VhP1,VhP2);
	matrix IP=interpolate(VhP2,VhP1);
	matrix IPPI=IP*PI;
	IPh=IdP2+(-1.)*IPPI;  // (Id-πh) P2->P1->P2, una componente de vel
	
	matrix PI3=interpolate(Vh3P1,Vh3P2);
	matrix IP3=interpolate(Vh3P2,Vh3P1);
	matrix IPPI3=IP3*PI3;
	IPh3=Id3P2+(-1)*IPPI3; // (Id-πh) 3P2->3P1->3P2; dos vel + pres (sin filtrar la p)
}	

VhP0 mk;
//Calculo la medida de los elementos |K|^(1/2)
varf med(unused,v)=int2d(Th)(1.*v);
real[int] medk=med(0,VhP0);
mk[]=sqrt(medk);

matrix DX3,DY3; //P2->P1dc en las 3 componentes (Se usa en la matriz Smago)
{
	matrix Du1,Du2,Dp;
	int[int] c0=[0,-1,-1];
	int[int] c1=[-1,1,-1];
	int[int] c2=[-1,-1,2];
	
	Du1=interpolate(Vh3P1dc,Vh3P2,U2Vc=c0,op=1);
	Du2=interpolate(Vh3P1dc,Vh3P2,U2Vc=c1,op=1);
	Dp =interpolate(Vh3P1dc,Vh3P2,U2Vc=c2,op=1);
	DX3=Du1+Du2+Dp;
	
	Du1=interpolate(Vh3P1dc,Vh3P2,U2Vc=c0,op=2);
	Du2=interpolate(Vh3P1dc,Vh3P2,U2Vc=c1,op=2);
	Dp =interpolate(Vh3P1dc,Vh3P2,U2Vc=c2,op=2);
	DY3=Du1+Du2+Dp;
	
}

	

int[int] cs=[2];
matrix DDPx=interpolate(VhP1dc,Vh3P2,U2Vc=cs,op=1);
matrix DDPy=interpolate(VhP1dc,Vh3P2,U2Vc=cs,op=2);

matrix DDx=IPh1*DDPx;
matrix DDy=IPh1*DDPy;

matrix DXun = interpolate(VhP1dc,VhP2,op=1);
matrix DYun = interpolate(VhP1dc,VhP2,op=2);

matrix DpX = IPh1*DXun;
matrix DpY = IPh1*DYun;


VhP0 hk=hTriangle;
real hT=hk[].max; //El máximo de los diámetros de la malla

//construyo el vector que bloqueara el residuo de SMAGO
varf CC([un1,un2,unp],[vvel1,vvel2,vpres])=on(1,2,3,4,6, un1=1,un2=1); 
real[int] cc=CC(0,Vh3P2);
for (int gf=0;gf<Vh3P2.ndof;gf++){
	cc(gf)= (cc(gf)>10^10) ? 0 : 1;
} 
//cout<<"Max h de la malla: "<<hT<<endl;


/// LEVANTAMIENTO DE FRONTERA
func G=1*(y>=1);

VhP2 G1=G;
VhP2 G2=0;

		
int sols=42; //De momento tengo 21 bases para el EIM
real[int] ibest(nbases);
VhP2[int] us1(sols),us2(sols),pss(sols);
ifstream Solu("LPSv1Cav.txt");
Solu>>sols;
ifstream Solv("LPSv2Cav.txt");
Solv>>sols;
ifstream Solp("LPSpCav.txt");
Solp>>sols;

for (int i=0;i<sols;i++){
	Solu>>us1[i][];
	Solv>>us2[i][];
	Solp>>pss[i][];
}

VhP1dc DxG1f,DyG1f,DxG2f,DyG2f;
VhP2 G1F,G2F;
G1F[]=IPh*G1[];
G2F[]=IPh*G2[];

DxG1f[]=DXun*G1F[];
DyG1f[]=DYun*G1F[];
DxG2f[]=DXun*G2F[];
DyG2f[]=DYun*G2F[];
//////////////////////////////////////////
////DEFINICION DE LOS ESPACIOS DE BR//////
//////////////////////////////////////////

VhP2[int] Bpres(nbases);

VhP2[int] Bvel1(nbases);
VhP2[int] Bvel2(nbases);

VhP2[int] Bsup1(nbases);
VhP2[int] Bsup2(nbases);


VhP2[int] Fvel1(nbases),Fvel2(nbases);
VhP2[int] Fsup1(nbases),Fsup2(nbases);

VhP1dc[int] DXFp(nbases), DYFp(nbases);

VhP1dc[int] Fv1dx(nbases),Fv1dy(nbases);
VhP1dc[int] Fv2dx(nbases),Fv2dy(nbases);

VhP1dc[int] Fs1dx(nbases),Fs1dy(nbases);
VhP1dc[int] Fs2dx(nbases),Fs2dy(nbases);

////////////////////////////////////////////
//Cargo los archivos del EIM
ifstream EIM("BaseGL52.txt");
int mbases;
EIM>>mbases;

VhP1dc[int] W(mbases); 
for (int i=0;i<mbases;i++){
	EIM>>W[i][];
}

ifstream MatrixBinf("MatrixBM52.txt");
int ibinf,jbinf;
MatrixBinf>>ibinf;
MatrixBinf>>jbinf;
real [int,int] Binf(ibinf,jbinf);
for(int i=0;i<ibinf;i++){
	for (int j=0;j<jbinf;j++){
		MatrixBinf>>Binf(i,j);
	}
}

matrix Binfm=Binf;
set(Binfm,solver=sparsesolver);

ifstream PuntosT("Tint52.txt");
int ntint;
PuntosT>>ntint;
real[int] Tint(ntint);
for (int i=0;i<ntint;i++){
	PuntosT>>Tint(i);
}
///////////////////////////////////////////////////////////
////////////////////////////////////////////
//Cargo los archivos del EIM TauK
ifstream EIMT("BaseTauL28.txt");
int taubases;
EIMT>>taubases;

VhP0[int] TAU(taubases); 
for (int i=0;i<taubases;i++){
	EIMT>>TAU[i][];
}

ifstream MatrixTBinf("TauBM28.txt");
int tibinf,tjbinf;
MatrixTBinf>>tibinf;
MatrixTBinf>>tjbinf;
real [int,int] TauBinf(tibinf,tjbinf);
for(int i=0;i<tibinf;i++){
	for (int j=0;j<tjbinf;j++){
		MatrixTBinf>>TauBinf(i,j);
	}
}

matrix TauBinfm=TauBinf;
set(TauBinfm,solver=sparsesolver);

ifstream PuntosTau("TauKi28.txt");
int tautint;
PuntosTau>>tautint;
real[int] TauTint(tautint);
for (int i=0;i<tautint;i++){
	PuntosTau>>TauTint(i);
}

///////////////////////////////////////////////////////////
//Cargo los datos del RBF
ifstream BetaI("BetamuI.txt");
int nbetas;
BetaI>>nbetas;
real[int] BetamubI(nbetas);
for(int i=0;i<nbetas;i++){
    BetaI>>BetamubI(i);
}

ifstream muI("vReI.txt");
int nmuj;
muI>>nmuj;
real[int] muj(nmuj);
for(int i=0;i<nmuj;i++){
    muI>>muj(i);
}

ifstream GammaI("gammaI.txt");
int ngamma;
GammaI>>ngamma;
real[int] gamma0(ngamma);
for (int i=0;i<ngamma;i++){
    GammaI>>gamma0(i);
}
////////////////////////////////////////////////////////////////

//Definicion del array de matrices del gradiente en los tj
real[int,int][int] GradTj(mbases);
real[int][int] DG(mbases);
for (int i=0;i<mbases;i++){
	real[int,int] Aux(4,2*nbases);
	Aux=0;
	DG[i]=[DxG1f[](Tint(i)),DyG1f[](Tint(i)),DxG2f[](Tint(i)),DyG2f[](Tint(i))];
	GradTj[i]=Aux(0:3,0:2*nbases-1);
}

//Definicion de los arrays para calcular el tauk en el (EIM 2)
real[int,int][int] NUK(taubases),NGUK(taubases);
for (int i=0;i<taubases;i++){
	real [int,int] Aux (2*nbases+1,2*nbases+1);
	Aux=0;
	
	varf Ngk(un1,v)=int2d(Th)((G1^2+G2^2)*v);
	real[int] ngk=Ngk(0,VhP0); 
	Aux(0,0)= ngk(TauTint(i)); //Tomo el valor en el elemento correspondiente
	NUK[i]=Aux(0:2*nbases,0:2*nbases);
	
	varf Ngradgk(un1,v)=int2d(Th)((DxG1f^2+DyG1f^2+DxG2f^2+DyG2f^2)*v);
	real[int] nggk=Ngradgk(0,VhP0); 
	Aux(0,0)= nggk(TauTint(i)); //Tomo el valor en el elemento correspondiente
	NGUK[i]=Aux(0:2*nbases,0:2*nbases);
}

////DEFINICION DE LAS MATRICES Y SEGUNDOS MIEMBROS PARA RESOLVER EL PB DE STOKES
real [int,int] StoNnu(3*nbases,3*nbases),StoNB(3*nbases,3*nbases),StoNpres(3*nbases,3*nbases),
               SPres(3*nbases,3*nbases);  
real [int] bStoNnu(3*nbases),bStop(3*nbases);
                                                       

////DEFINICION DE LAS MATRICES PARA RESOLVER EL PB DE LAS BASES
real[int,int] vNSc2N(3*nbases,3*nbases),vNSdt(3*nbases,3*nbases),bSmagoN(mbases,3*nbases),
vPres(3*nbases,3*nbases);

//Para "alocar" las matrices de los arrays!
real [int,int][int] vNSN(2*nbases),SmagoN(mbases),SpresN(taubases);

for (int k=0;k<2*nbases;k++){
	real[int,int] aux(3*nbases,3*nbases);
	aux=0;
	vNSN[k]=aux(0:3*nbases-1,0:3*nbases-1);
}

for (int k=0;k<mbases;k++){
	real[int,int] aux(3*nbases,3*nbases);
	aux=0;
	SmagoN[k]=aux(0:3*nbases-1,0:3*nbases-1);
}
for (int k=0;k<taubases;k++){
	real[int,int] aux(3*nbases,3*nbases);
	aux=0;
	SpresN[k]=aux(0:3*nbases-1,0:3*nbases-1);
}

real[int] bNSsegN(3*nbases),bNSsegNp(3*nbases);
bStoNnu=0;
bNSsegN=0;
bNSsegNp=0;
StoNnu=0;
StoNpres=0;
StoNB=0;//Aseguro que sean nulos
vNSc2N=0;
vNSdt=0;
bSmagoN=0;
vPres=0;
SPres=0;


real ErrBR=10;
real epsGreedy=7e-5;


////////////////////////////////////////////////
VhP2 U1N,U2N;
VhP1dc U1Ndx,U2Ndx,U1Ndy,U2Ndy; //Para la norma T

U1N=us1[0]+G1;
U2N=us2[0]+G2;


VhP2 U1f,U2f;
U1f[]=IPh*U1N[];
U1Ndx[]=DXun*U1f[];
U1Ndy[]=DYun*U1f[];
	
U2f[]=IPh*U2N[];
U2Ndx[]=DXun*U2f[];
U2Ndy[]=DYun*U2f[];

//Matriz de rectificacion
//real[int] Rfe(nbases,nbases),Rrb(nbases,nbases);



////////////////////////////
////CALCULO DE BASES////////
////////////////////////////
Vh3P2 [u1,u2,p];
 


real nu=1./Refijo;

cout<<"---Calulo de la constante de Inyeccion de Sobolev---"<<endl;
include "Sovolev.idp";

cout<<"START GREEDY ALGORITHM"<<endl;
for (int i=0; i<nbases; i++){

	if(i==0){
		Re=1000;
		VhP2 u1N,u2N;
		VhP2 pN;
		
		include "LPS.idp"
        
        u1N=u1;
        u2N=u2;
        pN=p;
        
	

		VhP2 UG1,UG2;
		UG1=u1N+G1;
		UG2=u2N+G2;
		plot([UG1,UG2],cmm="Sol FE");
		
    	VhP2 Proyp;
    	
    	for (int j=0;j<i;j++){
    		real pesc=int2d(Th)(Bpres[j]*pN);
    		Proyp[]+=pesc*Bpres[j][];
    	}
    	pN[]-=Proyp[];
    	real nl2=int2d(Th)(pN*pN);
    	pN[]/=sqrt(nl2);
	
	
    	Bpres[i][]=pN[];
    
    	DXFp[i][]=DpX*Bpres[i][];
    	DYFp[i][]=DpY*Bpres[i][];
    	//cout<<"Termino de estabilizacion"<<endl;
    	//cout<<int2d(Th)((hTriangle^2)*(DXFp[i]*DXFp[i]+DYFp[i]*DYFp[i]))<<endl;
    
    
    	Vh2P2 [US1,US2];//,vv1,vv2;
    
    	//Construyo los supremizadores
    	varf Sup(UU1,UU2,vv1,vv2)=
    	int2d(Th)(((1./Refijo)+((CS*hTriangle)^2)*mod(U1N,U2N))*
    	GradGrad(UU1,UU2,vv1,vv2))
    						-int2d(Th)(pN*div(vv1,vv2))
    						+on(1,2,3,4,UU1=0,UU2=0) //Para el enriquecimiento de la base
    						;
    						
    
    	matrix Tp=Sup(Vh2P2,Vh2P2);
    	real[int] btp=Sup(0,Vh2P2);
    
    	set(Tp, solver=sparsesolver);
    
    	US1[]=Tp^-1*btp;
    	VhP2 V1,V2;
    	V1=US1;
    	V2=US2;
    	
    
    	//-------------//
    //	
    	VhP2 proy1,proy2;
    	for (int j=0;j<i;j++){
    		real pesc=int2d(Th)(GradGrad(Bvel1[j],Bvel2[j],u1N,u2N));
    		proy1[]+=pesc*Bvel1[j][];
    		proy2[]+=pesc*Bvel2[j][];
    	}
    //	for (int j=0;j<i;j++){
    //		real pesc=
    //		int2d(Th)(GradGrad(Bsup1[j],Bsup2[j],u1N,u2N));
    //		proy1[]+=pesc*Bsup1[j][];
    //		proy2[]+=pesc*Bsup2[j][];
    //	}
    //	
    	u1N[]-=proy1[];
    	u2N[]-=proy2[];
    
    	real nh1=int2d(Th)(GradGrad(u1N,u2N,u1N,u2N));
    	u1N[]/=nh1^0.5;
    	u2N[]/=nh1^0.5;
    	
    
    	Bvel1[i][]=u1N[];
    	Bvel2[i][]=u2N[];
    	
    	//cout<<"Despues ortonom, (p,div u)="<<int2d(Th)(pN*div(u1N,u2N))<<endl;
    
    	//---------------//
    	
    	proy1=0;
    	proy2=0;
    //
    //	for (int j=0;j<=i;j++){
    //		real pesc=int2d(Th)(GradGrad(Bvel1[j],Bvel2[j],V1,V2));
    //		proy1[]+=pesc*Bvel1[j][];
    //		proy2[]+=pesc*Bvel2[j][];
    //	}
    	for (int j=0;j<i;j++){
    		real pesc=int2d(Th)(GradGrad(Bsup1[j],Bsup2[j],V1,V2));
    		proy1[]+=pesc*Bsup1[j][];
    		proy2[]+=pesc*Bsup2[j][];
    	}
    //	
    	V1[]-=proy1[];
    	V2[]-=proy2[];
    	
    	
    	nh1=int2d(Th)(GradGrad(V1,V2,V1,V2));
    	
    	V1[]/=nh1^0.5;
    	V2[]/=nh1^0.5;
    //	
    
    	Bsup1[i][]=V1[];
    	Bsup2[i][]=V2[];
    	
    	Fvel1[i][]=IPh*Bvel1[i][];
    	Fvel2[i][]=IPh*Bvel2[i][];
    	Fsup1[i][]=IPh*Bsup1[i][];
    	Fsup2[i][]=IPh*Bsup2[i][];
    	
    	Fv1dx[i][]=DXun*Fvel1[i][];
    	Fv1dy[i][]=DYun*Fvel1[i][];
    	Fv2dx[i][]=DXun*Fvel2[i][];
    	Fv2dy[i][]=DYun*Fvel2[i][];
    	
    	Fs1dx[i][]=DXun*Fsup1[i][];
    	Fs1dy[i][]=DYun*Fsup1[i][];
    	Fs2dx[i][]=DXun*Fsup2[i][];
    	Fs2dy[i][]=DYun*Fsup2[i][];
    	
    	
    	for (int k1=0;k1<mbases;k1++){
    	real[int,int] Dtk=GradTj[k1];
    	Dtk(0,2*i)=Fv1dx[i][](Tint(k1));
    	Dtk(1,2*i)=Fv1dy[i][](Tint(k1));
    	Dtk(2,2*i)=Fv2dx[i][](Tint(k1));
    	Dtk(3,2*i)=Fv2dy[i][](Tint(k1));
    	
    	Dtk(0,2*i+1)=Fs1dx[i][](Tint(k1));
    	Dtk(1,2*i+1)=Fs1dy[i][](Tint(k1));
    	Dtk(2,2*i+1)=Fs2dx[i][](Tint(k1));
    	Dtk(3,2*i+1)=Fs2dy[i][](Tint(k1));
    	
    	GradTj[k1]=Dtk;
    	}
	
		for (int ki=0;ki<taubases; ki++){
		    real[int,int] Ngk=NUK[ki];
		    VhP2 fvel1,fvel2;
    		varf NG(un,v)=int2d(Th)((fvel1*G1+fvel2*G2)*v);
    		fvel1=Bvel1[i]; fvel2=Bvel2[i];
    		real[int] ngaux=NG(0,VhP0);
    		Ngk(0,1+2*i)=ngaux(TauTint(ki));		
		
    		//Matriz simétrica
    		Ngk(1+2*i,0)=Ngk(0,1+2*i);
    		
    		
    		fvel1=Bsup1[i]; fvel2=Bsup2[i];
    		ngaux=NG(0,VhP0);
    		Ngk(0,1+2*i+1)=ngaux(TauTint(ki));		
    		
    		//Matriz simétrica
    		Ngk(1+2*i+1,0)=Ngk(0,1+2*i+1);
    		
    		NUK[ki]=Ngk;
    		///////////////////////////////////////////////
    		real[int,int] Nggk=NGUK[ki];
    		VhP1dc dxfv1,dyfv1,dxfv2,dyfv2;
    		varf NDG(un,v)=int2d(Th)((dxfv1*DxG1f+dyfv1*DyG1f+dxfv2*DxG2f+dyfv2*DyG2f)*v);
    		dxfv1=Fv1dx[i]; dyfv1=Fv1dy[i]; dxfv2=Fv2dx[i]; dyfv2=Fv2dy[i];
    		real[int] ndgaux=NDG(0,VhP0);
    		Nggk(0,1+2*i)=ndgaux(TauTint(ki));
    		//Matriz simétrica
    		Nggk(1+2*i,0)=Nggk(0,1+2*i);
    		
    		//////////////////
    		
    		dxfv1=Fs1dx[i]; dyfv1=Fs1dy[i]; dxfv2=Fs2dx[i]; dyfv2=Fs2dy[i];
    		ndgaux=NDG(0,VhP0);
    		Nggk(0,1+2*i+1)=ndgaux(TauTint(ki));
    		
    		
    		//Matriz simétrica
    		Nggk(1+2*i+1,0)=Nggk(0,1+2*i+1);
    		
    		NGUK[ki]=Nggk;
	   }
      	//cout<<NUK[0]<<endl;

	   {
	       ofstream fVN("VNH.txt",append);
         	fVN<<Bvel1[i][]<<endl;
         	fVN<<Bvel2[i][]<<endl;
         	fVN<<Bsup1[i][]<<endl;
         	fVN<<Bsup2[i][]<<endl;
         	fVN<<Bpres[i][]<<endl;
	    }
	

    }
    else{

///////////////////////////////////////////////////////
//Comienzo el Algoritmo Greedy para añadir mas bases///
///////////////////////////////////////////////////////
    	cout<<"ERR="<<ErrBR<<endl;
    	cout<<ResMax<<endl;
    
    	include "GreedyStab.idp";
    	
    	if (ErrBR<epsGreedy){
    		N=i;
    		cout<<"fin, nbases="<<N<<endl;
    		break;
    	}
    	else{
    		
    	    Re=REbest(i);
    	    
    	    
            VhP2 u1N,u2N;
    	    VhP2 pN;
    	    include "LPS.idp"
            
            u1N=u1;
            u2N=u2;
            pN=p;
            
            
            //cout<<"(p,div u)="<<int2d(Th)(p*div(u1,u2))<<endl;

        	
        	VhP2 Proyp;
        	
        	for (int j=0;j<i;j++){
        		real pesc=int2d(Th)(Bpres[j]*pN);
        		Proyp[]+=pesc*Bpres[j][];
        	}
        	pN[]-=Proyp[];
        	real nl2=int2d(Th)(pN*pN);
        	pN[]/=nl2^0.5;
        	
        	//Doble ortonormalizacion
			Proyp=0;
			
			for (int j=0;j<i;j++){
				real pesc=int2d(Th)(Bpres[j]*pN);
				Proyp[]+=pesc*Bpres[j][];
			}
			pN[]-=Proyp[];
			nl2=int2d(Th)(pN*pN);
			pN[]/=nl2^0.5;

        	
        	Bpres[i][]=pN[];
        	
        	DXFp[i][]=DpX*Bpres[i][];
        	DYFp[i][]=DpY*Bpres[i][];
        	
        	Vh2P2 [US1,US2];
        
        	
        	varf Sup(UU1,UU2,vv1,vv2)= int2d(Th)(((1./Refijo)+((CS*hTriangle)^2)*mod(U1N,U2N))*
    	                                   GradGrad(UU1,UU2,vv1,vv2))
    						-int2d(Th)(pN*div(vv1,vv2))
    						+on(1,2,3,4,UU1=0,UU2=0) //Para el enriquecimiento de la base
    						;
        
        	matrix Tp=Sup(Vh2P2,Vh2P2);
        	real[int] btp=Sup(0,Vh2P2);
        
        	set(Tp, solver=sparsesolver);
        
        	US1[]=Tp^-1*btp;
        	VhP2 V1,V2;
        	V1=US1;
        	V2=US2;
        	
        
        	//-------------//
        	
        	VhP2 proy1,proy2;
        	for (int j=0;j<i;j++){
        		real pesc=int2d(Th)(GradGrad(Bvel1[j],Bvel2[j],u1N,u2N));
        		proy1[]+=pesc*Bvel1[j][];
        		proy2[]+=pesc*Bvel2[j][];
        	}
//        	for (int j=0;j<i;j++){
//        		real pesc=int2d(Th)(GradGrad(Bsup1[j],Bsup2[j],u1N,u2N));
//        		proy1[]+=pesc*Bsup1[j][];
//        		proy2[]+=pesc*Bsup2[j][];
//        	}
//        	
        	u1N[]-=proy1[];
        	u2N[]-=proy2[];
        
        	real nh1=int2d(Th)(GradGrad(u1N,u2N,u1N,u2N));
        	u1N[]/=nh1^0.5;
        	u2N[]/=nh1^0.5;
        //	
        
            //Doble ortonormalizacion
			proy1=0; proy2=0;
			for (int j=0;j<i;j++){
				real pesc=int2d(Th)(GradGrad(Bvel1[j],Bvel2[j],u1N,u2N));
				proy1[]+=pesc*Bvel1[j][];
				proy2[]+=pesc*Bvel2[j][];
			}

			
			u1N[]-=proy1[];
			u2N[]-=proy2[];
		
			nh1=int2d(Th)(GradGrad(u1N,u2N,u1N,u2N));
			u1N[]/=nh1^0.5;
			u2N[]/=nh1^0.5;
			
            
        	Bvel1[i][]=u1N[];
        	Bvel2[i][]=u2N[];
        	
        	
        
        	//---------------//
        	
        	proy1=0;
        	proy2=0;
        
//        	for (int j=0;j<=i;j++){
//        		real pesc=int2d(Th)(GradGrad(Bvel1[j],Bvel2[j],V1,V2));
//        		proy1[]+=pesc*Bvel1[j][];
//        		proy2[]+=pesc*Bvel2[j][];
//        	}
        	for (int j=0;j<i;j++){
        		real pesc=int2d(Th)(GradGrad(Bsup1[j],Bsup2[j],V1,V2));
        		proy1[]+=pesc*Bsup1[j][];
        		proy2[]+=pesc*Bsup2[j][];
        	}
        	
        	V1[]-=proy1[];
        	V2[]-=proy2[];
        	
        	
        	nh1=int2d(Th)(GradGrad(V1,V2,V1,V2));
        	
        	V1[]/=nh1^0.5;
        	V2[]/=nh1^0.5;
        	
        	//Doble ortonormalizacion
			proy1=0; proy2=0;
		
			for (int j=0;j<i;j++){
				real pesc=int2d(Th)(GradGrad(Bsup1[j],Bsup2[j],V1,V2));
				proy1[]+=pesc*Bsup1[j][];
				proy2[]+=pesc*Bsup2[j][];
			}
			
			V1[]-=proy1[];
			V2[]-=proy2[];
			
			
			nh1=int2d(Th)(GradGrad(V1,V2,V1,V2));
			
			V1[]/=nh1^0.5;
			V2[]/=nh1^0.5;
        	
        
        	Bsup1[i][]=V1[];
        	Bsup2[i][]=V2[];
        	
        	
        	//Actualizo soluciones filtradas
        	Fvel1[i][]=IPh*Bvel1[i][];
        	Fvel2[i][]=IPh*Bvel2[i][];
        	Fsup1[i][]=IPh*Bsup1[i][];
        	Fsup2[i][]=IPh*Bsup2[i][];
        	
        	Fv1dx[i][]=DXun*Fvel1[i][];
        	Fv1dy[i][]=DYun*Fvel1[i][];
        	Fv2dx[i][]=DXun*Fvel2[i][];
        	Fv2dy[i][]=DYun*Fvel2[i][];
        	
        	Fs1dx[i][]=DXun*Fsup1[i][];
        	Fs1dy[i][]=DYun*Fsup1[i][];
        	Fs2dx[i][]=DXun*Fsup2[i][];
        	Fs2dy[i][]=DYun*Fsup2[i][];
        	
        	for (int k1=0;k1<mbases;k1++){
        	   real[int,int] Dtk=GradTj[k1];
        	   Dtk(0,2*i)=Fv1dx[i][](Tint(k1));
        	   Dtk(1,2*i)=Fv1dy[i][](Tint(k1));
        	   Dtk(2,2*i)=Fv2dx[i][](Tint(k1));
        	   Dtk(3,2*i)=Fv2dy[i][](Tint(k1));
        	
        	   Dtk(0,2*i+1)=Fs1dx[i][](Tint(k1));
        	   Dtk(1,2*i+1)=Fs1dy[i][](Tint(k1));
        	   Dtk(2,2*i+1)=Fs2dx[i][](Tint(k1));
        	   Dtk(3,2*i+1)=Fs2dy[i][](Tint(k1));
        	
        	   GradTj[k1]=Dtk;
        	}
        	
    	
    		for (int ki=0;ki<taubases; ki++){
    		real[int,int] Ngk=NUK[ki];
    		VhP2 fvel1,fvel2;
    		varf NG(un,v)=int2d(Th)((fvel1*G1+fvel2*G2)*v);
    		fvel1=Bvel1[i]; fvel2=Bvel2[i];
    		real[int] ngaux=NG(0,VhP0);
    		Ngk(0,1+2*i)=ngaux(TauTint(ki));		
    		
    		//Matriz simétrica
    		Ngk(1+2*i,0)=Ngk(0,1+2*i);
    		
    		fvel1=Bsup1[i]; fvel2=Bsup2[i];
    		ngaux=NG(0,VhP0);
    		Ngk(0,1+2*i+1)=ngaux(TauTint(ki));		
    		
    		//Matriz simétrica
    		Ngk(1+2*i+1,0)=Ngk(0,1+2*i+1);
    		
    		NUK[ki]=Ngk;
    		///////////////////////////////////////////////
    		real[int,int] Nggk=NGUK[ki];
    		VhP1dc dxfv1,dyfv1,dxfv2,dyfv2;
    		varf NDG(un,v)=int2d(Th)((dxfv1*DxG1f+dyfv1*DyG1f+dxfv2*DxG2f+dyfv2*DyG2f)*v);
    		dxfv1=Fv1dx[i]; dyfv1=Fv1dy[i]; dxfv2=Fv2dx[i]; dyfv2=Fv2dy[i];
    		real[int] ndgaux=NDG(0,VhP0);
    		Nggk(0,1+2*i)=ndgaux(TauTint(ki));
    		//Matriz simétrica
    		Nggk(1+2*i,0)=Nggk(0,1+2*i);
    		
    		//////////////////
    		
    		dxfv1=Fs1dx[i]; dyfv1=Fs1dy[i]; dxfv2=Fs2dx[i]; dyfv2=Fs2dy[i];
    		ndgaux=NDG(0,VhP0);
    		Nggk(0,1+2*i+1)=ndgaux(TauTint(ki));
    		
    		//Matriz simétrica
    		Nggk(1+2*i+1,0)=Nggk(0,1+2*i+1);
    		
    		NGUK[ki]=Nggk;
    	}
	   {
    	   ofstream fVN("VNH.txt",append);
    	   fVN<<Bvel1[i][]<<endl;
    	   fVN<<Bvel2[i][]<<endl;
    	   fVN<<Bsup1[i][]<<endl;
    	   fVN<<Bsup2[i][]<<endl;
    	   fVN<<Bpres[i][]<<endl;
	   }
	}
	
}
for (int j=0;j<=i; j++){
	//MATRICES DEL EIM 2
	for (int ki=0;ki<taubases;ki++){
			real[int,int] Ngk=NUK[ki];
			VhP2 fvel1,fvel2,ffvel1,ffvel2;
			varf NG(un,v)=int2d(Th)((fvel1*ffvel1+fvel2*ffvel2)*v);
		
			fvel1=Bvel1[i]; fvel2=Bvel2[i]; 
			ffvel1=Bvel1[j]; ffvel2=Bvel2[j];
			real[int] ngaux=NG(0,VhP0);
			Ngk(1+2*i,1+2*j)=ngaux(TauTint(ki));
			
			fvel1=Bvel1[i]; fvel2=Bvel2[i]; 
			ffvel1=Bsup1[j]; ffvel2=Bsup2[j];
			ngaux=NG(0,VhP0);
			Ngk(1+2*i,1+2*j+1)=ngaux(TauTint(ki));
			
			fvel1=Bsup1[i]; fvel2=Bsup2[i]; 
			ffvel1=Bvel1[j]; ffvel2=Bvel2[j];
			ngaux=NG(0,VhP0);
			Ngk(1+2*i+1,1+2*j)=ngaux(TauTint(ki));
			
			fvel1=Bsup1[i]; fvel2=Bsup2[i]; 
			ffvel1=Bsup1[j]; ffvel2=Bsup2[j];
			ngaux=NG(0,VhP0);
			Ngk(1+2*i+1,1+2*j+1)=ngaux(TauTint(ki));
								
			if(j<i){
				Ngk(1+2*j,1+2*i)=Ngk(1+2*i,1+2*j);
				Ngk(1+2*j,1+2*i+1)=Ngk(1+2*i+1,1+2*j);
				Ngk(1+2*j+1,1+2*i)=Ngk(1+2*i,1+2*j+1);
				Ngk(1+2*j+1,1+2*i+1)=Ngk(1+2*i+1,1+2*j+1);
			}
		
			NUK[ki]=Ngk;
			///////////////////////////////////////////////
			real[int,int] Nggk=NGUK[ki];
			VhP1dc dxfv1,dyfv1,dxfv2,dyfv2, DXFV1,DYFV1,DXFV2,DYFV2;
		    varf NDG(un,v)=int2d(Th)((dxfv1*DXFV1+dyfv1*DYFV1+dxfv2*DXFV2+dyfv2*DYFV2)*v);
			dxfv1=Fv1dx[i]; dyfv1=Fv1dy[i]; dxfv2=Fv2dx[i]; dyfv2=Fv2dy[i];
			DXFV1=Fv1dx[j]; DYFV1=Fv1dy[j]; DXFV2=Fv2dx[j]; DYFV2=Fv2dy[j];
			real[int] ndgaux=NDG(0,VhP0);
			Nggk(1+2*i,1+2*j)=ndgaux(TauTint(ki));
			
			dxfv1=Fv1dx[i]; dyfv1=Fv1dy[i]; dxfv2=Fv2dx[i]; dyfv2=Fv2dy[i];
			DXFV1=Fs1dx[j]; DYFV1=Fs1dy[j]; DXFV2=Fs2dx[j]; DYFV2=Fs2dy[j];
			ndgaux=NDG(0,VhP0);
			Nggk(1+2*i,1+2*j+1)=ndgaux(TauTint(ki));
			
			dxfv1=Fs1dx[i]; dyfv1=Fs1dy[i]; dxfv2=Fs2dx[i]; dyfv2=Fs2dy[i];
			DXFV1=Fv1dx[j]; DYFV1=Fv1dy[j]; DXFV2=Fv2dx[j]; DYFV2=Fv2dy[j];
			ndgaux=NDG(0,VhP0);
			Nggk(1+2*i+1,1+2*j)=ndgaux(TauTint(ki));
			
			dxfv1=Fs1dx[i]; dyfv1=Fs1dy[i]; dxfv2=Fs2dx[i]; dyfv2=Fs2dy[i];
			DXFV1=Fs1dx[j]; DYFV1=Fs1dy[j]; DXFV2=Fs2dx[j]; DYFV2=Fs2dy[j];
			ndgaux=NDG(0,VhP0);
			Nggk(1+2*i+1,1+2*j+1)=ndgaux(TauTint(ki));
			
			if(j<i){
				Nggk(1+2*j,1+2*i)=Nggk(1+2*i,1+2*j);
				Nggk(1+2*j,1+2*i+1)=Nggk(1+2*i+1,1+2*j);
				Nggk(1+2*j+1,1+2*i)=Nggk(1+2*i,1+2*j+1);
				Nggk(1+2*j+1,1+2*i+1)=Nggk(1+2*i+1,1+2*j+1);

			}
		
			NGUK[ki]=Nggk;
		
	}
	

for (int s=0;s<mbases;s++){

real [int,int] Sint=SmagoN[s];
Sint(2*i,2*j)=int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(Fvel1[j],Fvel2[j],Fvel1[i],Fvel2[i]));
Sint(2*i+1,2*j)=int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(Fvel1[j],Fvel2[j],Fsup1[i],Fsup2[i]));
Sint(2*i,2*j+1)=int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(Fsup1[j],Fsup2[j],Fvel1[i],Fvel2[i]));
Sint(2*i+1,2*j+1)=int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(Fsup1[j],Fsup2[j],Fsup1[i],Fsup2[i]));

if (j<i){
Sint(2*j,2*i)=int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(Fvel1[i],Fvel2[i],Fvel1[j],Fvel2[j]));
Sint(2*j+1,2*i)=int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(Fvel1[i],Fvel2[i],Fsup1[j],Fsup2[j]));
Sint(2*j,2*i+1)=int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(Fsup1[i],Fsup2[i],Fvel1[j],Fvel2[j]));
Sint(2*j+1,2*i+1)=int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(Fsup1[i],Fsup2[i],Fsup1[j],Fsup2[j]));	
}

SmagoN[s]=Sint;
}


for (int s=0;s<taubases;s++){

real [int,int] Presint=SpresN[s];
Presint(2*nbases+i,2*nbases+j)=int2d(Th)(TAU[s]*(DXFp[i]*DXFp[j]+DYFp[i]*DYFp[j]));

if (j<i){
Presint(2*nbases+j,2*nbases+i)=Presint(2*nbases+i,2*nbases+j);
}

SpresN[s]=Presint;
}

	

StoNnu(2*i,2*j)=int2d(Th)(GradGrad(Bvel1[j],Bvel2[j],Bvel1[i],Bvel2[i]));
StoNnu(2*i+1,2*j)=int2d(Th)(GradGrad(Bvel1[j],Bvel2[j],Bsup1[i],Bsup2[i]));
StoNnu(2*i,2*j+1)=int2d(Th)(GradGrad(Bsup1[j],Bsup2[j],Bvel1[i],Bvel2[i]));
StoNnu(2*i+1,2*j+1)=int2d(Th)(GradGrad(Bsup1[j],Bsup2[j],Bsup1[i],Bsup2[i]));

StoNB(i+2*nbases,2*j)=int2d(Th)(Bpres[i]*div(Bvel1[j],Bvel2[j]));
StoNB(i+2*nbases,2*j+1)=int2d(Th)(Bpres[i]*div(Bsup1[j],Bsup2[j]));


vNSc2N(2*i,2*j)=int2d(Th)(UgradV(G1,G2,Bvel1[j],Bvel2[j])'*[Bvel1[i],Bvel2[i]])
			   +int2d(Th)(UgradV(Bvel1[j],Bvel2[j],G1,G2)'*[Bvel1[i],Bvel2[i]]);
			   
vNSc2N(2*i+1,2*j)=int2d(Th)(UgradV(G1,G2,Bvel1[j],Bvel2[j])'*[Bsup1[i],Bsup2[i]])
				+int2d(Th)(UgradV(Bvel1[j],Bvel2[j],G1,G2)'*[Bsup1[i],Bsup2[i]]);
				
vNSc2N(2*i,2*j+1)=int2d(Th)(UgradV(G1,G2,Bsup1[j],Bsup2[j])'*[Bvel1[i],Bvel2[i]])
				+int2d(Th)(UgradV(Bsup1[j],Bsup2[j],G1,G2)'*[Bvel1[i],Bvel2[i]]);
				
vNSc2N(2*i+1,2*j+1)=int2d(Th)(UgradV(G1,G2,Bsup1[j],Bsup2[j])'*[Bsup1[i],Bsup2[i]])
					+int2d(Th)(UgradV(Bsup1[j],Bsup2[j],G1,G2)'*[Bsup1[i],Bsup2[i]]);

vNSdt(2*i,2*j)=int2d(Th)(Bvel1[i]*Bvel1[j]+Bvel2[i]*Bvel2[j]);
vNSdt(2*i+1,2*j)=int2d(Th)(Bsup1[i]*Bvel1[j]+Bsup2[i]*Bvel2[j]);
vNSdt(2*i,2*j+1)=int2d(Th)(Bvel1[i]*Bsup1[j]+Bvel2[i]*Bsup2[j]);
vNSdt(2*i+1,2*j+1)=int2d(Th)(Bsup1[i]*Bsup1[j]+Bsup2[i]*Bsup2[j]);


for (int s=0;s<=i;s++){
real [int,int] Cintu(3*nbases,3*nbases),Cintv(3*nbases,3*nbases);


Cintu=vNSN[2*s]; //aquí van las vel
Cintv=vNSN[2*s+1]; //aquí van los sup

Cintu(2*i,2*j)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bvel1[j],Bvel2[j])'*[Bvel1[i],Bvel2[i]]);
Cintv(2*i,2*j)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bvel1[j],Bvel2[j])'*[Bvel1[i],Bvel2[i]]);

Cintu(2*i,2*j+1)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bsup1[j],Bsup2[j])'*[Bvel1[i],Bvel2[i]]);
Cintv(2*i,2*j+1)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bsup1[j],Bsup2[j])'*[Bvel1[i],Bvel2[i]]);

Cintu(2*i+1,2*j)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bvel1[j],Bvel2[j])'*[Bsup1[i],Bsup2[i]]);
Cintv(2*i+1,2*j)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bvel1[j],Bvel2[j])'*[Bsup1[i],Bsup2[i]]);

Cintu(2*i+1,2*j+1)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bsup1[j],Bsup2[j])'*[Bsup1[i],Bsup2[i]]);
Cintv(2*i+1,2*j+1)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bsup1[j],Bsup2[j])'*[Bsup1[i],Bsup2[i]]);			

if(j<i){ 
	
Cintu(2*j,2*i)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bvel1[i],Bvel2[i])'*[Bvel1[j],Bvel2[j]]); 
Cintv(2*j,2*i)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bvel1[i],Bvel2[i])'*[Bvel1[j],Bvel2[j]]);

Cintu(2*j,2*i+1)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bsup1[i],Bsup2[i])'*[Bvel1[j],Bvel2[j]]); 
Cintv(2*j,2*i+1)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bsup1[i],Bsup2[i])'*[Bvel1[j],Bvel2[j]]);

Cintu(2*j+1,2*i)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bvel1[i],Bvel2[i])'*[Bsup1[j],Bsup2[j]]);
Cintv(2*j+1,2*i)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bvel1[i],Bvel2[i])'*[Bsup1[j],Bsup2[j]]);

Cintu(2*j+1,2*i+1)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bsup1[i],Bsup2[i])'*[Bsup1[j],Bsup2[j]]);
Cintv(2*j+1,2*i+1)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bsup1[i],Bsup2[i])'*[Bsup1[j],Bsup2[j]]);
}

if(s==i && (j!=i)){

for (int k=0;k<s;k++){
Cintu(2*k,2*j)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bvel1[j],Bvel2[j])'*[Bvel1[k],Bvel2[k]]);
Cintv(2*k,2*j)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bvel1[j],Bvel2[j])'*[Bvel1[k],Bvel2[k]]);

Cintu(2*k,2*j+1)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bsup1[j],Bsup2[j])'*[Bvel1[k],Bvel2[k]]);
Cintv(2*k,2*j+1)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bsup1[j],Bsup2[j])'*[Bvel1[k],Bvel2[k]]);

Cintu(2*k+1,2*j)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bvel1[j],Bvel2[j])'*[Bsup1[k],Bsup2[k]]);
Cintv(2*k+1,2*j)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bvel1[j],Bvel2[j])'*[Bsup1[k],Bsup2[k]]);

Cintu(2*k+1,2*j+1)=int2d(Th)(UgradV(Bvel1[s],Bvel2[s],Bsup1[j],Bsup2[j])'*[Bsup1[k],Bsup2[k]]);
Cintv(2*k+1,2*j+1)=int2d(Th)(UgradV(Bsup1[s],Bsup2[s],Bsup1[j],Bsup2[j])'*[Bsup1[k],Bsup2[k]]);

}	
}	

vNSN[2*s]=Cintu;
vNSN[2*s+1]=Cintv;
}





if(j<i){

StoNnu(2*j,2*i)=int2d(Th)(GradGrad(Bvel1[i],Bvel2[i],Bvel1[j],Bvel2[j]));
StoNnu(2*j+1,2*i)=int2d(Th)(GradGrad(Bvel1[i],Bvel2[i],Bsup1[j],Bsup2[j]));
StoNnu(2*j,2*i+1)=int2d(Th)(GradGrad(Bsup1[i],Bsup2[i],Bvel1[j],Bvel2[j]));
StoNnu(2*j+1,2*i+1)=int2d(Th)(GradGrad(Bsup1[i],Bsup2[i],Bsup1[j],Bsup2[j]));


StoNB(j+2*nbases,2*i)=int2d(Th)(Bpres[j]*div(Bvel1[i],Bvel2[i])); 
StoNB(j+2*nbases,2*i+1)=int2d(Th)(Bpres[j]*div(Bsup1[i],Bsup2[i]));


vNSc2N(2*j,2*i)=int2d(Th)(UgradV(G1,G2,Bvel1[i],Bvel2[i])'*[Bvel1[j],Bvel2[j]])
                +int2d(Th)(UgradV(Bvel1[i],Bvel2[i],G1,G2)'*[Bvel1[j],Bvel2[j]]);
vNSc2N(2*j+1,2*i)=int2d(Th)(UgradV(G1,G2,Bvel1[i],Bvel2[i])'*[Bsup1[j],Bsup2[j]])
                +int2d(Th)(UgradV(Bvel1[i],Bvel2[i],G1,G2)'*[Bsup1[j],Bsup2[j]]);
vNSc2N(2*j,2*i+1)=int2d(Th)(UgradV(G1,G2,Bsup1[i],Bsup2[i])'*[Bvel1[j],Bvel2[j]])
                +int2d(Th)(UgradV(Bsup1[i],Bsup2[i],G1,G2)'*[Bvel1[j],Bvel2[j]]);
vNSc2N(2*j+1,2*i+1)=int2d(Th)(UgradV(G1,G2,Bsup1[i],Bsup2[i])'*[Bsup1[j],Bsup2[j]])
                +int2d(Th)(UgradV(Bsup1[i],Bsup2[i],G1,G2)'*[Bsup1[j],Bsup2[j]]);

vNSdt(2*j,2*i)=int2d(Th)(Bvel1[j]*Bvel1[i]+Bvel2[j]*Bvel2[i]);
vNSdt(2*j+1,2*i)=int2d(Th)(Bsup1[j]*Bvel1[i]+Bsup2[j]*Bvel2[i]);
vNSdt(2*j,2*i+1)=int2d(Th)(Bvel1[j]*Bsup1[i]+Bvel2[j]*Bsup2[i]);
vNSdt(2*j+1,2*i+1)=int2d(Th)(Bsup1[j]*Bsup1[i]+Bsup2[j]*Bsup2[i]);


}
}
//Actualizacion segundo miembro

for (int s=0;s<mbases;s++){
bSmagoN(s,2*i)=-int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(G1F,G2F,Fvel1[i],Fvel2[i]));
bSmagoN(s,2*i+1)=-int2d(Th)(((CS*hTriangle)^2)*W[s]*GradGrad(G1F,G2F,Fsup1[i],Fsup2[i]));		
}
//cout<<bSmagoN<<endl;

bStoNnu(2*i)=-int2d(Th)(GradGrad(G1,G2,Bvel1[i],Bvel2[i]));
bStoNnu(2*i+1)=-int2d(Th)(GradGrad(G1,G2,Bsup1[i],Bsup2[i]));


			   
bNSsegN(2*i)=-int2d(Th)(UgradV(G1,G2,G1,G2)'*[Bvel1[i],Bvel2[i]]); 
bNSsegN(2*i+1)=-int2d(Th)(UgradV(G1,G2,G1,G2)'*[Bsup1[i],Bsup2[i]]);



cout<<"--------------------------FIN ITERACION "<<i<<"-----------------------------------"<<endl;
}

real[int,int] AN(3*N,3*N),BN(3*N,3*N),DN(3*N,3*N),DT(3*N,3*N),sN(mbases,3*N);
real[int] aN(3*N),cN(3*N);
real[int,int][int] CN(2*N),SN(mbases),GTjN(mbases),SP(taubases),Nuk(taubases),NGuk(taubases);


AN=StoNnu(0:3*N-1,0:3*N-1);
BN=StoNB(2*nbases-2*N:2*nbases+N-1,0:3*N-1);
DN=vNSc2N(0:3*N-1,0:3*N-1);
DT=vNSdt(0:3*N-1,0:3*N-1);
sN=bSmagoN(0:mbases-1,0:3*N-1);

aN=bStoNnu(0:3*N-1);
cN=bNSsegN(0:3*N-1);

for (int s=0;s<2*N;s++){
	real [int,int] cint(3*N,3*N),aux(3*nbases,3*nbases);
	aux=vNSN[s];
	cint=aux(0:3*N-1,0:3*N-1);
	CN[s]=cint(0:3*N-1,0:3*N-1);
}
for (int s=0;s<mbases;s++){
	real [int,int] sint(3*N,3*N),aux(3*nbases,3*nbases);
	aux=SmagoN[s];
	sint=aux(0:3*N-1,0:3*N-1);
	SN[s]=sint(0:3*N-1,0:3*N-1);
}
for (int s=0;s<mbases;s++){
	real [int,int] GTjint(4,2*N),aux(4,2*nbases);
	aux=GradTj[s];
	GTjint=aux(0:3,0:2*N-1);
	GTjN[s]=GTjint(0:3,0:2*N-1);
}

for (int s=0;s<taubases;s++){
    real[int,int] Spresint(3*N,3*N),aux(3*nbases,3*nbases);
    aux=SpresN[s];
    Spresint=aux(2*nbases-2*N:2*nbases+N-1,2*nbases-2*N:2*nbases+N-1);
    SP[s]=Spresint(2*nbases-2*N:2*nbases+N-1,2*nbases-2*N:2*nbases+N-1);
}

for (int s=0;s<taubases;s++){
    real[int,int] NUKint(2*N+1,2*N+1),aux(2*nbases+1,2*nbases+1);
    aux=NUK[s];
    NUKint=aux(0:2*N,0:2*N); 
    Nuk[s]=NUKint(0:2*N,0:2*N);
}

for (int s=0;s<taubases;s++){
    real[int,int] NGUKint(2*N+1,2*N+1),aux(2*nbases+1,2*nbases+1);
    aux=NGUK[s];
    NGUKint=aux(0:2*N,0:2*N); 
    NGuk[s]=NGUKint(0:2*N,0:2*N);
}



real[int] REfin(N),Resfin(N),Taufin(N),Presfin(N);
REfin=REbest(0:N-1);
Resfin=ResMax(0:N-1);
Taufin=TaunMax(0:N-1);
Presfin=PresErrMax(0:N-1);

cout<<REbest<<endl;
ofstream fmm("MatrixRB.txt",append);
fmm.precision(20);
fmm<<AN<<endl;
fmm<<BN<<endl;
fmm<<DN<<endl;
fmm<<DT<<endl;
fmm<<sN<<endl;
ofstream fmconv("MatrixC.txt");
fmconv.precision(20);
fmconv<<CN<<endl;
ofstream fmsmago("MatrixS.txt");
fmsmago.precision(20);
fmsmago<<SN<<endl;
ofstream fmpres("MatrixSPres.txt");
fmpres.precision(20);
fmpres<<SP<<endl;
ofstream fmpres2("PresEntera.txt");
fmpres2.precision(20);
fmpres2<<SpresN<<endl;
ofstream fmeim("MatrixGrad.txt",append);
fmeim.precision(20);
fmeim<<GTjN<<endl;
fmeim<<DG<<endl;
fmeim<<Nuk<<endl;
fmeim<<NGuk<<endl;
ofstream fmsm("SegMRB.txt",append);
fmsm.precision(20);
fmsm<<aN<<endl;
fmsm<<cN<<endl;
ofstream fmm2("Rebest.txt",append);
fmm2<<REfin<<endl;
fmm2<<Resfin<<endl;
fmm2<<Taufin<<endl;
fmm2<<Presfin<<endl;
cout<<"FINAL DE LA FASE OFFLINE"<<endl;

// Calculo de Errores

// Cargamos librerias
load "iovtk" 
load "lapack"
load "PETSc"

// Cargamos macros, funciones i/o
include "../Auxiliary/IO.idp"
include "../Auxiliary/Macros_2D.idp"
// include "../Auxiliary/macro_ddm.idp"
include "../Auxiliary/search.idp"

// Definimos los parametros a usar
include "../Auxiliary/Parametros_2D.idp"

// Creamos la Malla
include "../Auxiliary/Malla.idp"

// Definimos los espacios de EF
include "../FOM/FE_Spaces_NoStab_VP_2D.idp"

Vh3P2 [uEF,uEFY,uEFP];
Vh2P2 [u,uY];
Vh2P2 [uR,uRY];
Vh2P2 [err,errY];
int nn = period/dt+1;
real[int] errorl2(nn);
real[int] errorEstabR0l2(nn);
real[int] errorPODl2(nn);
int m = 0;

TFR = TF;
TF = TF - period;
VhP2 umod;

int NbasesConv = 2;
for(real ti=TF+dt;ti<=TFR+epsEF;ti+=dt){
    
	write("Output.txt","t = " + ti,0,1);

    readvector("../Snapshots/Vx_" + Reynolds + "_t_" +ti+ ".txt", real, SolX, 0); uEF[] = SolX;
    readvector("../Snapshots/Vy_" + Reynolds + "_t_" +ti+ ".txt", real, SolY, 0); uEFY[] = SolY;
    [u,uY] = [uEF,uEFY];
    
    // Galerkin
    /*
    readvector("Datos/Vx_" + Reynolds + "_t_" +ti+ ".txt", real, SEX, 0); uR[] = SEX;
    readvector("Datos/Vy_" + Reynolds + "_t_" +ti+ ".txt", real, SEY, 0); uRY[] = SEY;
    [err,errY] = [u-uR,uY-uRY];
    umod = err^2+errY^2;
    //plot(umod,fill=1,value=1,cmm="t = "+ti);
    errorPODl2(m) = sqrt(int2d(Th)(err^2+errY^2)/int2d(Th)(u^2+uY^2));
    cout << "Error without Estabilization (L2) = " << errorPODl2(m) << endl;
    */

    // Penalizacion sin Filtrado
    /*
    readvector("Datos/VxEstabR0_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ "_t_" +ti+ ".txt", real, SEX, 0); uR[] = SEX;
    readvector("Datos/VyEstabR0_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ "_t_" +ti+ ".txt", real, SEY, 0); uRY[] = SEY;
    [err,errY] = [u-uR,uY-uRY];
    umod = err^2+errY^2;
    //plot(umod,fill=1,value=1,cmm="t = "+ti);
    errorEstabR0l2(m) = sqrt(int2d(Th)(err^2+errY^2)/int2d(Th)(u^2+uY^2));
    cout << "Error with Estabilization (R=0) (L2) = " << errorEstabR0l2(m) << endl;
    */

    // Penalizacion con Filtrado
    
    readvector("Datos/VxEstabR_" + NbasesConv + "_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ "_t_" +ti+ ".txt", real, SX, 0); uR[] = SX;
    readvector("Datos/VyEstabR_" + NbasesConv + "_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ "_t_" +ti+ ".txt", real, SY, 0); uRY[] = SY;
    
    [err,errY] = [u-uR,uY-uRY];
    umod = err^2+errY^2;
    // plot(umod,fill=1,value=1,cmm="t = "+ti);
    errorl2(m) = sqrt(int2d(Th)(err^2+errY^2)/int2d(Th)(u^2+uY^2));
    cout << "Error with Estabilization (R=" + NbasesConv + ") (L2) = " << errorl2(m) << endl;
    
    /*
    VhP1 tau;
    readvector("../Offline/Estabilizador/tau_" + Reynolds + "_t_" +ti+ ".txt", real, tauvec, 0);
    tau[] = tauvec; 
    
    VhP2 aux, aux2;
    // aux = u*dx(tau)+uY*dy(tau);

    Vh2P2 [uxtau, uytau];
    aux = tau*u; aux2 = tau*uY;
    [uxtau, uytau] = [aux,aux2];
    aux = uxtau^2+uytau^2; 
    // plot(aux,fill=1,value=1,cmm="t="+ti);
    //plot(tau,fill=1,value=1,cmm="t = "+ti);
    */
    
    
    m+=1;
}
write("Errores/ErrorNoEstabR_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ "_Macro.txt", errorPODl2, 0, 0);
//write("Errores/ErrorEstabR_" + NbasesConv + "_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ "_Macro.txt", errorl2, 0, 0);
//write("Errores/ErrorEstabR0_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ "_Macro.txt", errorEstabR0l2, 0, 0);
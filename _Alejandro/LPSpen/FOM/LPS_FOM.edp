// BASE 

// PRE√ÅMBULO

load "iovtk" 

// Cargamos macros
include "../Auxiliary/IO.idp"
include "../Auxiliary/Macros_2D.idp"
include "../Auxiliary/macro_ddm.idp"
include "../Auxiliary/search.idp"

// Definimos los parametros a usar
include "../Auxiliary/Parametros_2D.idp"

// Creamos la malla
include "../Auxiliary/Malla.idp"

// Definimos los espacios de EF 
include "FE_Spaces_NoStab_VP_2D.idp"

// INICIALIZACION

// Variables de elementos finitos
Vh3P2 [uEF,uEFY,uEFP]; // Etapa a calcular
Vh3P2 [uEF0,uEF0Y,uEF0P]; // Etapa anterior
Vh3P2 [uEF1,uEF1Y,uEF1P]; // Etapa 2anterior

// Condicion inicial
if(t0<1e-6){
    [uEF0,uEF0Y,uEF0P]=[0,0,0]; 
}
else{
	readvector("../Snapshots/Vx_" + Reynolds + "_t_" +t0+ ".txt", real, SolX, 0); uEF0[]  = SolX;
	readvector("../Snapshots/Vy_" + Reynolds + "_t_" +t0+ ".txt", real, SolY, 0); uEF0Y[] = SolY;
	readvector("../Snapshots/P_"  + Reynolds + "_t_" +t0+ ".txt", real, SolP, 0); uEF0P[] = SolP;
}

// Matrices fijas
include "MatricesFijas_2D.idp"

for(real ti=t0+dt;ti<=TF+epsEF;ti+=dt){
	write("Output.txt","t = " + ti,0,1);
	// Comenzamos el bucle iterativo para resolver el problema de EF
	
    // Matrices variables
    include "MatricesVariables_2D.idp"

    matrix MFinal;
    real[int] bFinal(Vh3P2.ndof);

    MFinal = MNS;
    MFinal += Mvar;
    MFinal += Mcon;

    bFinal = bNS;
    bFinal += bvar;
    bFinal += bcon;

	set(MFinal, solver=sparsesolver);
	uEF[]=MFinal^-1*bFinal;

    // Guardamos los snapshots 
	write("../Snapshots/Vx_" + Reynolds + "_t_" +ti+ ".txt", uEF[], 0, 0);
	write("../Snapshots/Vy_" + Reynolds + "_t_" +ti+ ".txt", uEFY[], 0, 0);	
	write("../Snapshots/P_" + Reynolds + "_t_" +ti+ ".txt", uEFP[], 0, 0);

    // Actualizamos
    [uEF1,uEF1Y,uEF1P]=[uEF0,uEF0Y,uEF0P];
    [uEF0,uEF0Y,uEF0P]=[uEF, uEFY, uEFP];

    /*
    VhP2 uEFmod;
	uEFmod = (uEF)^2+(uEFY)^2;
	plot(uEFmod,fill=1,value=1,cmm="t="+ti);
	plot([uEF,uEFY],fill=1,value=1,cmm="t="+ti);
    */
}
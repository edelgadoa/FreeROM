// Matrices Online

// Matrices usuales
real[int,int] MMasaR(NbasesV,NbasesV);
MMasaR = 0;
real[int,int] MGradR(NbasesV,NbasesV);
real[int,int] MConvRaux(NbasesV,NbasesV);
real[int,int][int] MsConvR(NbasesV);
for(int i=0; i<NbasesV; i++){
    MsConvR[i] = MMasaR(0:NbasesV-1,0:NbasesV-1);
}

// real[int,int] MContR(NbasesV,NbasesV);

// Elementos de la media
real[int] bMasaR(NbasesV);
real[int] bGradR(NbasesV);
real[int] bConvR(NbasesV);
real[int,int] MConvMGR(NbasesV,NbasesV);
real[int,int] MConvGMR(NbasesV,NbasesV);

{
    // Relativas al termino temporal
    varf varmasa([u,uY],[v,vY]) = int2d(Th)(u*v+uY*vY);
    matrix MMasa = varmasa(Vh2P2,Vh2P2);
    varf varmasam([u,uY],[v,vY]) = int2d(Th)(uM*v+uMY*vY);
    real[int] bMasa = varmasam(0,Vh2P2);

    // Relativas al termino de difusion
    varf vargrad([u,uY],[v,vY]) = int2d(Th)(GradUGradV(u,v));
    matrix MGrad = vargrad(Vh2P2,Vh2P2);
    varf vargradm([u,uY],[v,vY]) = int2d(Th)(GradUGradV(uM,v));
    real[int] bGrad = vargradm(0,Vh2P2);

    // Relativas al termino de conveccion
    varf varconvmm([u,uY],[v,vY]) = int2d(Th)(UGradVW(uM,uM,v));
    real[int] bConv = varconvmm(0,Vh2P2);
    varf varconvmg([u,uY],[v,vY]) = int2d(Th)(UGradVW(uM,u,v));
    matrix MConvMG = varconvmg(Vh2P2,Vh2P2);
    varf varconvgm([u,uY],[v,vY]) = int2d(Th)(UGradVW(u,uM,v));
    matrix MConvGM = varconvgm(Vh2P2,Vh2P2);

    // Relativas al termino de contorno
    // varf varcont([u,uY],[v,vY]) = on(1,2, u=0., uY=0.);
    // matrix MCont = varcont(Vh2P2,Vh2P2);
 
    // Bucle para calcular elemento a elemento
    Vh2P2 [uu,uuY];
    for(int i = 0; i<NbasesV; i++){
        real[int] Vi = BV(:,i);
        
        real[int] auxmasav = MMasa*Vi;
        bMasaR(i) = Vi'*bMasa;
        
        real[int] auxgradv = MGrad*Vi;
        bGradR(i) = Vi'*bGrad;
        
        uu[]=Vi;
        varf varconv([u,uY],[v,vY]) = int2d(Th)(UGradVW(uu,u,v));
        matrix MConv = varconv(Vh2P2,Vh2P2);
        bConvR(i) = Vi'*bConv;
        real[int] auxconvmgv = MConvMG*Vi;
        real[int] auxconvgmv = MConvGM*Vi;

        // real[int] auxcontv = MCont*Vi;
    
        for(int j=0; j<NbasesV; j++){
            real[int] Vj = BV(:,j);

            real auxmasa = Vj'*auxmasav;
            MMasaR(j,i) = auxmasa;

            real auxgrad = Vj'*auxgradv;
            MGradR(j,i) = auxgrad;

            real auxconvgm = Vj'*auxconvgmv;
            MConvGMR(j,i) = auxconvgm;
            real auxconvmg = Vj'*auxconvmgv;
            MConvMGR(j,i) = auxconvmg;

            real[int] auxconvv = MConv*Vj;
            for(int k=0; k<NbasesV; k++){
                real auxconv = BV(:,k)'*auxconvv;
                MConvRaux(k,j)=auxconv; 
            }

            //real auxcont = Vj'*auxcontv;
            //MContR(j,i) = auxcont;
        }
        MsConvR[i] = MConvRaux;
    }
}

// Matrices
write("ElementosOffline/MMasaR_"  + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", MMasaR, 0, 0);
write("ElementosOffline/MGradR_"  + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", MGradR, 0, 0);	
write("ElementosOffline/MConvMGR_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", MConvGMR, 0, 0);
write("ElementosOffline/MConvGMR_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", MConvMGR, 0, 0);	

// Vector de matrices
write("ElementosOffline/MsConvR_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", MsConvR, 0, 0);

// Vectores
write("ElementosOffline/bMasaR_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", bMasaR, 0, 0);
write("ElementosOffline/bGradR_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", bGradR, 0, 0);
write("ElementosOffline/bConvR_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", bConvR, 0, 0);	
///////////////
// FreeROM 
/////////////// 

//////////////////////////////////////////////////
/////////// FASE OFFLINE /////////////////////////
//// Unsteady NS + Smago + BC periodicas /////////
//////////////////////////////////////////////////

verbosity = 0;

// Codigo para calcular la fase offline VMS-Smago con estabilizacion LPS en la presion. 
// Elemento Finito P2-P2 (no estable) en vel-pres SIN SUPREMIZER

// Cargamos librerias
load "iovtk" 
load "lapack"
load "PETSc"

// Cargamos macros, funciones i/o
include "../Auxiliary/IO.idp"
include "../Auxiliary/Macros_2D.idp"
include "../Auxiliary/macro_ddm.idp"
include "../Auxiliary/search.idp"

// Definimos los parametros a usar
include "../Auxiliary/Parametros_2D.idp"

// Creamos la Malla
include "../Auxiliary/Malla.idp"

// Definimos los espacios de EF
include "../FOM/FE_Spaces_NoStab_VP_2D.idp"

include "../Auxiliary/Normas.idp"

////////////////////////////////////////////////////////////////////////////////////

// Carga de datos importantes
real tS0 = TF-period;
real tSF = TF;
int niS = period/dt+1;

//Definicion de Constantes y variables varias
real[int,int] MBaseV(Vh2P2.ndof,niS);    real[int] MediaV(Vh2P2.ndof);     MediaV = 0.;
real[int,int] MBaseConv(Vh2P2.ndof,niS); real[int] MediaConv(Vh2P2.ndof);  MediaConv = 0.;
real[int,int] MBaseVTau(Vh2P2.ndof,niS); real[int] MediaVTau(Vh2P2.ndof);  MediaVTau = 0.;
real[int,int] MBaseVDTau(VhP2.ndof,niS); real[int] MediaVDTau(Vh2P2.ndof); MediaVDTau = 0.;

// Recuperacion de resultados en tiempo
for(int iter=0; iter <niS; iter++){
    real ti = tS0+iter*dt;
    write("Output.txt","t = "+ti,1,1);

    VhP2 aux, aux2;
    // Snapshots
    Vh3P2 [SnapX,SnapY,SnapP];
    readvector("../Snapshots/Snap_Re_" + Reynolds + "_t_" +ti+ ".txt", real, Sol, 0);
    SnapX[] = Sol;

    Vh2P2 [SX,SY];
    [SX,SY] = [SnapX, SnapY];

    //aux = SX^2+SY^2;
    //plot(aux,fill=1,value=1,cmm="t="+ti);

    MBaseV(:,iter) = SX[];
    MediaV += SX[];

    // Estabilizador
    VhP1 tau;
    readvector("Estabilizador/tau_" + Reynolds + "_t_" +ti+ ".txt", real, tauvec, 0);
    tau[] = tauvec;
    // plot(tau,fill=1,value=1,cmm="t="+ti);

    // Definicion de elementos para hacer la POD
    // u por tau (2 componentes)
    Vh2P2 [uxtau, uytau];
    aux = tau*SX; aux2 = tau*SY;
    [uxtau, uytau] = [aux,aux2];

    //aux = uxtau^2+uytau^2;
    //plot(aux,fill=1,value=1,cmm="t="+ti);
    
    MBaseVTau(:,iter) = uxtau[];
    //MediaVTau += 1/(niS+1)*uxtau[];

    // Conveccion (2 componentes)
    Vh2P2 [zx,zy];
    [zx,zy] = ugradv(SX,SY,SX,SY);

    //aux = zx^2+zy^2;
    //plot(aux,fill=1,value=1,cmm="t="+ti);

    MBaseConv(:,iter) = zx[];
    // MediaConv += 1/(niS+1)*zx[];
    
    // u por gradiente de tau (1 componente)
    VhP2 udtau;
    udtau = SX*dx(tau)+SY*dy(tau);

    MBaseVDTau(:,iter) = udtau[];
    //MediaVDTau += 1/(niS+1)*udtau[];

    // plot(udtau,fill=1,value=1,cmm="t="+ti);
}

// Hay que quitar la media
write("Output.txt","Substracting and saving mean value ...",1,1);
MediaV /= MBaseV.m; 
for(int i=0; i <niS; i++){
    MBaseV(:,i) -= MediaV; 
}
write("Bases/MediaV_" + Reynolds + ".txt", MediaV, 0, 0);

write("Output.txt","Mean values OK.",1,1);

// Calculamos la POD
write("Output.txt","Computing the complete basis...",1,1);
int NbasesV, NbasesVTau, NbasesConv, NbasesVDTau;
Vh2P2[int] [BaseV,BaseVY](niS);
Vh2P2[int] [BaseConv,BaseConvY](niS);
Vh2P2[int] [BaseVTau,BaseVTauY](niS);
VhP2[int] BaseVDTau(niS);
{
    varf scalar2L2([u,uY],[v,vY]) = int2d(Th)(u*v+uY*vY);
    varf scalarL2(u,v) = int2d(Th)(u*v);
	matrix MScalar = scalarL2(VhP2, VhP2);
	matrix MScalar2 = scalar2L2(Vh2P2, Vh2P2);
    include "POD.idp" // Hay que hacerla en paralelo, para que todo vaya bien (TODO)
    POD(MBaseV,MScalar2,BaseV,NbasesV,autovalV);
    POD(MBaseConv,MScalar2,BaseConv,NbasesConv,autovalVConv);
    POD(MBaseVTau,MScalar2,BaseVTau,NbasesVTau,autovalVTau);
    POD(MBaseVDTau,MScalar,BaseVDTau,NbasesVDTau,autovalVDTau);
}
write("Output.txt","After POD, for vel "+NbasesV+" basis, for veltau "+NbasesVTau+" basis, for conv "+NbasesConv+", and for ugradtau "+NbasesVDTau+".",1,1);

write("Output.txt","Saving basis...",1,1);
real[int,int] BV(Vh2P2.ndof,NbasesV);
real[int,int] BConv(Vh2P2.ndof,NbasesConv);
real[int,int] BVTau(Vh2P2.ndof,NbasesVTau);
real[int,int] BVDTau(VhP2.ndof,NbasesVDTau);

for(int i=0; i<NbasesV; i++){
    BV(:,i) = BaseV[i][];
    // plot([BaseV[i],BaseVY[i]],fill=1,wait=1,value=1,cmm = "Modo "+(i+1));
}
write("Bases/BaseV_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", BV, 0, 0);

for(int i=0; i<NbasesConv; i++){
    BConv(:,i) = BaseConv[i][];
    //plot([BaseConv[i],BaseConvY[i]],fill=1,wait=1,value=1,cmm = "Modo "+(i+1));
}
write("Bases/BaseConv_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", BConv, 0, 0);

for(int i=0; i<NbasesVTau; i++){
    BVTau(:,i) = BaseVTau[i][];
    //plot([BaseVTau[i],BaseVTauY[i]],fill=1,wait=1,value=1,cmm = "Modo "+(i+1));
}
write("RBF/BaseVTau_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", BVTau, 0, 0);

for(int i=0; i<NbasesVDTau; i++){
    BVDTau(:,i) = BaseVDTau[i][];
    //plot(BaseVDTau[i],fill=1,wait=1,value=1,cmm = "Modo "+(i+1));
}
write("RBF/BaseVDTau_" + Reynolds + "_PODtol_" +(-log10(epsPOD))+ ".txt", BVDTau, 0, 0);
write("Output.txt","Basis saved.",1,1);

write("Output.txt","Building offline matrices...",1,1);
Vh2P2 [uM,uMY];
uM[] = MediaV;
include "MatricesOffline.idp"
write("Output.txt","Reduced Matrices Ok.",1,1);

write("Output.txt","Saving data for RBF...",1,1);
write("RBF/DataVTau_" + Reynolds + ".txt", MBaseVTau, 0, 0);
write("RBF/DataVDTau_" + Reynolds + ".txt", MBaseVDTau, 0, 0);
write("RBF/DataV_" + Reynolds + ".txt", MBaseV, 0, 0);
include "RBF.idp"
write("Output.txt","RBF Ok.",1,1);
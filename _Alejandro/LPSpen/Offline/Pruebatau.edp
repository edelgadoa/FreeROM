// Prueba tauk en P0 a P1

// GEOMETRICAL PARAMETERS
real H 	  = 0.5; // Channel height
real D    = 0.1;  // Cylinder diameter
real xCyl = 0.5;  // Cylinder center x-position
real yCyl = 0.25;  // Cylinder center y-position
real xin  = 0.;   // Inlet position
real xout = 2.;  // Outlet position


// MESH PARTITIONING (Intermediate grid)
int n0 = 4;     // Mesh density base number 
int n1 = 25*n0; // Points density on cylinder
int n2 = 25*n0; // Points density on inlet
int n3 = 15*n0; // Points density on top, outlet and bottom
// BUILDING MESH
border cylinder(t=2*pi,0)   {x=xCyl+D/2*cos(t); y=yCyl+D/2*sin(t); label=1;} ;
border inlet   (t=H,0)      {x=xin;             y=t;               label=2;} ;
border top     (t=xout,xin) {x=t;               y=H;               label=3;} ;
border outlet  (t=0,H)      {x=xout;            y=t;               label=4;} ;
border bottom  (t=xin,xout) {x=t;               y=0;               label=5;} ;
mesh Th = buildmesh(cylinder(n1*pi*D)+inlet(n2*H)+top(n3*(xout-xin))+outlet(n3*H)+bottom(n3*(xout-xin))) ;
// plot(Th,cmm="Mesh") ;

real[int,int] Triangles(Th.nv,Th.nt);
Triangles = -1;
int[int] headv(Th.nv), next(Th.nt*3);

headv=-1; //
for(int k =0;k< Th.nt; ++k){
for(int i =0;i< 3; ++i)
{ int v = Th[k][i]; // vertex number
next[3*k+i] = headv[v];
headv[v]= 3*k+i;
}
}
// show the list of triangle of vertex v
int[int] NTri(Th.nv);
for(int v=0; v<Th.nv;++v)
{ cout << v << " : ";
int ind = 0;
for(int p=headv[v]; p >=0; p=next[p])
{
int k = p/3, i = p%3;
assert( Th[k][i]==v); // check â€¦
cout << k << " " ;
Triangles(v,ind) = k;
++ind;
}
NTri(v) = ind;
cout << endl;
}

Triangles.resize(Th.nv, NTri.max);
//cout << Triangles << endl;

fespace VhP0(Th,P0);
VhP0 th;
VhP0[int] indv(Th.nv);

real[int] areav(Th.nv);

for(int i=0; i< Th.nv; i++){
    indv[i] = 0;
    th[] = 0;
    for(int j=0; j<NTri.max;j++){
        int indT = Triangles(i,j);
        if(indT!=-1) th[][indT] = 1;
    }
    indv[i] = th;
    areav(i) = int2d(Th,qforder=0)(indv[i]);
}
cout << areav << endl;
///////////////////////////////////////////////////////////////
/////////"PROBLEMA DEL ESCALON" SMAGO CON B.R./////////////////
///////////////////////////////////////////////////////////////

///////////////
// FreeROM 
/////////////// 

// Programa principal que calcula el error exacto RB-FE LPS 2D (P2-P2)

// Cargamos librerias
load "iovtk" 

// Cargamos macros y funciones i/o
include "../Auxiliary/Macros_2D.idp"
include "../Auxiliary/IO.idp" //falla el mpirank -> posiblemente necesite ejecutarlo con freefemmpi
include "../Auxiliary/search.idp"

// Creamos la malla
include "../Auxiliary/CuadradoNxNy.idp"

// Definimos los espacios de EF
include "../FOM/FE_Spaces_NoStab_VP_2D.idp"

// Definimos las matrices de interpolacion y derivacion
include "../FOM/Interp_matrix_NoStab_VP_2D.idp"

// Definimos los parametros a usar
include "../Auxiliary/Parametros_2D.idp"

// Incluimos el levantamiento
include "../FOM/Levantamiento.idp"

// Defino funciones para ortonormalizar y productos escalares / normas
include "../Auxiliary/Normas.idp"

varf NormaT([uu,uuY,uuP],[vv,vvY,vvP]) = int2d(Th)(GradUGradV(uu,vv) + uuP*vvP);
matrix MNormaT = NormaT(Vh3P2, Vh3P2);

// Cargamos Bases y Matrices
include "Load_Basis_Data.idp"

// Cargo los elementos del EIM (tanto para Smago como para LPS)
include "../Offline/EIM_Data.idp"

//Definimos el intervalo de Reynolds que  vamos a considerar para resolver el problema de EF

int nSnapshots = 81; // numero de Snapshots que voy a querer calcular 
real[int] vReynolds(nSnapshots), ErrorRB(nSnapshots);

Remin = 5000;
Remax = 7000;
for(int i=0; i<nSnapshots; i++){
	vReynolds(i)=Remin+i*(Remax-Remin)/(nSnapshots-1); //ESTOS SON LOS QUE ESTÁN SEGUROS QUE ESTÁN RESUELTOS
}

Vh3P2 [uEF, uEFY, uEFP]; 
VhP2 SnapX, SnapY;
VhP2 SnapP;

Vh2P2 [uN, uNY];
VhP2 uNP;

Vh3P2 [uRBN, uRBNY, uRBNP], [err, errY, errP];

for (int i=0; i<nSnapshots; i++){
	
	Reynolds = vReynolds(i);
	real nu = 1./Reynolds;
	
	// Leo las soluciones calculadas de EF
	readvector("../Snapshots/Vx_" + Reynolds + ".txt", real, SolX, 0);
	SnapX[] = SolX;
	readvector("../Snapshots/Vy_" + Reynolds + ".txt", real, SolY, 0);
	SnapY[] = SolY;
	readvector("../Snapshots/P_" + Reynolds + ".txt", real, SolP, 0);
	SnapP[] = SolP;		
	
	[uEF, uEFY, uEFP] = [SnapX, SnapY, SnapP];
	
	
	
	// Resuelvo el problema de RB
	include "RB_LPS_VMSSmago.idp"

	uN[] = MBaseV*uRB(0:Nbases-1);
	uNP[] = MBaseP*uRB(Nbases:2*Nbases-1);
	
	
	[uRBN, uRBNY, uRBNP] = [uN, uNY, uNP];
	
	
	err[] = uEF[] - uRBN[];
	
	ErrorRB(i) = normX(err[], MNormaT);
	cout<<"Re = "<<Reynolds<<", error = "<<ErrorRB(i)<<endl;
}

write("ErrorRB.txt", ErrorRB, 0, 0);
	
	

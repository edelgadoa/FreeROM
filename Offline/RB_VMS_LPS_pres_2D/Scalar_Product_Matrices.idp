///////////////
// FreeROM 
/////////////// 

// Defino las matrices de producto escalar T que voy a considerar para la ortonormalizacion
varf pescT ([uu, uuY], [v,vY]) = int2d(Th)((1./Refijo + MOD(uFijo))*GradUGradV(uu,v));
matrix MPescT = pescT(Vh2P2, Vh2P2);

varf pescX ([uu, uuY, uuP], [v,vY, vP]) = int2d(Th)((1./Refijo + MOD(uFijo))*GradUGradV(uu,v) + uuP*vP);
matrix MPescX = pescX(Vh3P2, Vh3P2);

varf NormaVel([uu,uuY],[vv,vvY]) = int2d(Th)(GradUGradV(uu,vv));
matrix MNormaVel = NormaVel(Vh2P2, Vh2P2);

///////////////////////////////////////////////////////

varf DiffPE([uu,uuY], [v,vY]) = int2d(Th)(GradUGradV(uu,v));
matrix DiffPEM = DiffPE(Vh2P2,Vh2P2);

varf DivPPE([uu,uuY], [vP]) = int2d(Th)(Div(uu)*vP);
matrix DivPPEM = DivPPE(Vh2P2, VhP2);

varf PenPE(uP, vP) = int2d(Th)(epspen*uP*vP);
matrix PenPEM = PenPE(VhP2, VhP2);

varf ConvLevPE([uu,uuY], [v,vY]) = int2d(Th)(UGradVW(Lev, uu, v) + UGradVW(uu, Lev, v));
matrix ConvLevPEM = ConvLevPE(Vh2P2, Vh2P2);

varf DTPE([uu,uuY], [v,vY]) = int2d(Th)(UporV(uu,v));
matrix DTPEM = DTPE(Vh2P2, Vh2P2);

varf StabhK(uP,vP) = int2d(Th)(hTriangle^2*uP*vP);
matrix FiltroX, FiltroY;
matrix SPPEM2 = StabhK(VhP1dc, VhP1dc);
{
	FiltroX = SPPEM2 * IPhDXP2;
	FiltroX = (IPhDXP2') * FiltroX;
	FiltroY = SPPEM2 * IPhDYP2;
	FiltroY = (IPhDYP2') * FiltroY;	
}
matrix StabhkPEM = FiltroX + FiltroY;


matrix[int] ConvPEM(Nbases); // Simplemente inicializo, dentro del bucle del greedy definir√© los prod. esc. segun vaya calculando las bases


matrix[int] SmagoPEM(Mbases), StabPPEM(Taubases);
{ 
	int contS = 0; 
	for (int s=0; s<Mbases; s++){
		//if(mpirank==contS%mpisize){ //Si lo pongo para que lo haga en paralelo, me da un segmentation fault
			// Matrices Smago
			varf SmagoPE([uu,uuY],[v,vY]) = int2d(Th)((CS*hTriangle)^2*EIMSmago[s]*UporV(uu,v));
			matrix SPEM = SmagoPE(Vh2P1dc, Vh2P1dc);
			matrix FiltroX, FiltroY;
			{
				FiltroX = (DX2P2IPh') * SPEM;
				FiltroX = SPEM * DX2P2IPh;
				FiltroY = (DY2P2IPh') * SPEM;
				FiltroY = SPEM * DY2P2IPh;
			}
			SmagoPEM[s] = FiltroX + FiltroY;
			//}
		contS++;
	}
	
	contS = 0;
	for (int s=0; s<Taubases; s++){
		//if(mpirank==contS%mpisize){
			// Matrices LPS
			varf StabPPE(uP,vP) = int2d(Th)(EIMTau[s]*uP*vP);
			matrix SPPEM = StabPPE(VhP1dc, VhP1dc);
			matrix FiltroX, FiltroY;
			{
				FiltroX = SPPEM * IPhDXP2;
				FiltroX = (IPhDXP2') * FiltroX;
				FiltroY = SPPEM * IPhDYP2;
				FiltroY = (IPhDYP2') * FiltroY;	
			}
			StabPPEM[s] = FiltroX + FiltroY;
			//}
		contS++;
	}
}

varf bDiffPE([un, unY], [v, vY]) = int2d(Th)(GradUGradV(Lev, v));
real[int] bDiffPEv = bDiffPE(0, Vh2P2);
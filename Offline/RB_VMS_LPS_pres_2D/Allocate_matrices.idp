///////////////
// FreeROM 
/////////////// 

///////////////////////////
// Codigo donde inicializo las matrices que almacenaré de manera offline
///////////////////////////

// Defino el filtrado de las derivadas del levantamiento
VhP1dc DxFLev, DyFLev, DxFLevY, DyFLevY;
VhP2 FLev, FLevY;

FLev = Lev; 
FLevY = LevY; //Los llamo asi para poder filtrarlos despues más facil


{
	VhP2 auxF;
	auxF[] = IPhP2P1 * FLev[];
	DxFLev[] = DXP2 * auxF[]; 
	DyFLev[] = DYP2 * auxF[];
	
	auxF[] = IPhP2P1 * FLevY[];
	DxFLevY[] = DXP2 * auxF[];
	DyFLevY[] = DYP2 * auxF[];
}


// Definicion del array de matrices del gradiente en los Puntos mágicos
real[int,int][int] GradPM(Mbases);
real[int][int] GradPMLev(Mbases); 

for (int i=0;i<Mbases;i++){
	real[int,int] Aux(4,Nbases);
	Aux=0;
	GradPMLev[i]=[DxFLev[](PuntosMSmago(i)), DyFLev[](PuntosMSmago(i)), DxFLevY[](PuntosMSmago(i)), DyFLevY[](PuntosMSmago(i))];
	GradPM[i]=Aux(0:3,0:Nbases-1);
}

//Definicion de los arrays para calcular el tauk en el EIM de Tau
real[int,int][int] NUK(Taubases), NGUK(Taubases);
for (int i=0; i<Taubases; i++){
	real [int,int] Aux (Nbases+1,Nbases+1);
	Aux=0;
	
	varf Ngk(un1,v) = int2d(Th)((Lev^2+LevY^2)*v);
	real[int] ngk = Ngk(0,VhP0); 
	Aux(0,0) = ngk(PuntosMTau(i)); //Tomo el valor en el elemento correspondiente
	NUK[i] = Aux(0:Nbases,0:Nbases);
	
	varf Ngradgk(un1,v)=int2d(Th)((DxFLev^2+DyFLev^2+DxFLevY^2+DyFLevY^2)*v);
	real[int] nggk = Ngradgk(0,VhP0); 
	Aux(0,0)= nggk(PuntosMTau(i)); //Tomo el valor en el elemento correspondiente
	NGUK[i] = Aux(0:Nbases,0:Nbases);
}

// Definicion de las Matrices Reducidas fijas
real[int,int] DiffRB(2*Nbases, 2*Nbases), DivPRB(2*Nbases, 2*Nbases), PenRB(2*Nbases, 2*Nbases), 
			  ConvLevRB(2*Nbases, 2*Nbases), DTRB(2*Nbases, 2*Nbases);
			  
DiffRB = 0;
DivPRB = 0;
PenRB = 0;
ConvLevRB = 0;
DTRB = 0;



// Definicion de Matrices y Tensores variables
real[int,int][int] ConvRB(2*Nbases), SmagoRB(Mbases), StabPRB(Taubases);

for (int k=0; k<Nbases; k++){
	real[int,int] aux(2*Nbases, 2*Nbases);
	aux=0;
	ConvRB[k] = aux(0:2*Nbases-1, 0:2*Nbases-1);
}

for (int k=0;k<Mbases;k++){
	real[int,int] aux(2*Nbases,2*Nbases);
	aux=0;
	SmagoRB[k]=aux(0:2*Nbases-1,0:2*Nbases-1);
}
for (int k=0;k<Taubases;k++){
	real[int,int] aux(2*Nbases,2*Nbases);
	aux=0;
	StabPRB[k]=aux(0:2*Nbases-1,0:2*Nbases-1);
}


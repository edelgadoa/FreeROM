///////////////
// FreeROM 
/////////////// 

/////////////////////////////////////////
/////////// FASE OFFLINE ////////////////
//// NS + VMS-Smago + Estab Pres (LPS)///
/////////////////////////////////////////
/////////// NO SUPREMIZER ///////////////
/////////////////////////////////////////

// Codigo para calcular la fase offline VMS-Smago con estabilizacion LPS en la presion. 
// Elemento Finito P2-P2 (no estable) en vel-pres SIN SUPREMIZER

// Cargamos librerias
load "iovtk" 
load "lapack"

// Creamos la Malla
include "../../Mallas/CuadradoNxNy.idp"


// Cargamos macros, funciones i/o
include "../../Auxiliary/Macros_2D.idp"
include "../../Auxiliary/search.idp"
include "../../Auxiliary/IO.idp" 


// Definimos los espacios de EF
include "../../Full_Order/VMS_Smago_LPS_pres_2D/FE_Spaces_NoStab_VP_2D.idp"

// Definimos las matrices de interpolacion y derivacion
include "../../Full_Order/VMS_Smago_LPS_pres_2D/Interp_matrix_NoStab_VP_2D.idp"

// Definimos los parametros a usar
include "../../Full_Order/VMS_Smago_LPS_pres_2D/Parametros_2D.idp"

// Incluimos el levantamiento
include "../../Full_Order/VMS_Smago_LPS_pres_2D/Levantamiento.idp"

// Defino funciones para ortonormalizar y productos escalares / normas
include "../../Auxiliary/Normas.idp"

// Cargo las funciones del RBF
include "../../Auxiliary/betas.idp"


//Definicion de Constantes y variables varias
int Nbases = 40; 

real[int] MuBest(Nbases + 1), DeltaN(Nbases), TauN(Nbases), ErrorVN(Nbases), ErrorPN(Nbases);


// Leo los valores de los parámetros para los cuales he calculado ya Snapshots
readvector("../../Snapshots/VMS_Smago_LPS_pres_2D/Snapshots.txt", real, ReSnapshots, 0);

//////////////////////////////////////////
////DEFINICION DE LOS ESPACIOS DE BR//////
//////////////////////////////////////////

VhP2[int] BaseP(Nbases);
Vh2P2[int] [BaseV, BaseVY](Nbases);

VhP2[int] BaseVel(Nbases);
VhP2[int] BaseVelY(Nbases);

Vh2P2[int] [FBaseV, FBaseVY](Nbases);//, FBaseVY(Nbases);

VhP2[int] FBaseVel(Nbases), FBaseVelY(Nbases);;

VhP1dc[int] FPdX(Nbases), FPdY(Nbases);

VhP1dc[int] FVdX(Nbases), FVdY(Nbases);
VhP1dc[int] FVYdX(Nbases),FVYdY(Nbases);

// Defino las matrices donde almaceno los snapshots por columnas, para la reconstrucción de la solución reducida
real[int, int] MBaseV(Vh2P2.ndof, Nbases), MBaseP(VhP2.ndof, Nbases);

/////////////////////////////////////////
readvector("../../No_lineales/EIM_VMS_Smago_2D/Bases_EIM/muEIM_Smago.txt", real, muEIM, 0);
readvector("../../No_lineales/EIM_tau_LPS_2D/Bases_EIM/muEIM_LPS.txt", real, muEIMTau, 0);

int Mbases = muEIM.n;
int Taubases = muEIMTau.n;

VhP1dc[int] EIMSmago(Mbases);
VhP0[int] EIMTau(Taubases);


// Cargo los elementos del EIM (tanto para Smago como para LPS)
include "EIM_Data.idp"


// Cargo los datos del RBF
readvector("../RBF_2D_1Parametro/BetaMuI.txt", real, BetaI, 0);
readvector("../RBF_2D_1Parametro/vMuI.txt", real, muI, 0);
readvector("../RBF_2D_1Parametro/gammaI.txt", real, gammaI, 0);

// Inicializo las matrices para la fase offline
include "Allocate_matrices.idp"

/////////////////////////////////////////
// Comenzamos con el Algoritmo Greedy

Reynolds = Refijo; // Inicializamos el Reynolds, y todas las variables para resolver el problema de EF
MuBest(0) = Reynolds;

// Calculo la constante de Sobolev
include "../../Auxiliary/Sobolev.idp"

VhP2 uFijo, uFijoY; //Para la normaT
VhP1dc uFijodX, uFijodY, uFijoYdX, uFijoYdY;

Vh3P2 [uEF, uEFY, uEFP]; // Serán las soluciones para el Re_fijo
VhP1dc uEFdX, uEFdY, uEFYdX, uEFYdY; //las derivadas de uEF del paso anterior CON LEVANTAMIENTO
VhP2 uprevL, uprevLY; // La sol del paso anterior con Levantamiento
VhP1dc Gr; // Para el termino de VMS-Smagorinsky


if (search(ReSnapshots, Refijo, 1.e-9)==-1){
	// Si no lo he calculado todavía, lo calculo
	Reynolds = Refijo;
	include "../../Full_Order/VMS_Smago_LPS_pres_2D/FE_VMS_LPS_2D.idp"	
	
	uFijo = uEF + Lev;
	uFijoY = uEFY + LevY;
}
else{
	readvector("../../Snapshots/VMS_Smago_LPS_pres_2D/Vx_" + Refijo + ".txt", real, SolX, 0);
	uFijo[] = SolX;
	readvector("../../Snapshots/VMS_Smago_LPS_pres_2D/Vy_" + Refijo + ".txt", real, SolY, 0);
	uFijoY[] = SolY;

	uFijo = uFijo + Lev;
	uFijoY = uFijoY + LevY;
	
}



// Defino los diferentes productos escalares para construir las matrices reducidas
include "Scalar_Product_Matrices.idp"

for (int i=0; i<Nbases; i++){
	
	if (search(ReSnapshots, Reynolds, 1.e-9)==-1){
		// Si no lo he calculado todavía, lo calculo

		include "../../Full_Order/VMS_Smago_LPS_pres_2D/FE_VMS_LPS_2D.idp"	
		
		[BaseV[i], BaseVY[i]] = [uEF, uEFY];
		BaseP[i] = uEFP;
		
		BaseVel[i] = uEF; BaseVelY[i] = uEFY; // Para construir las funciones filtradas después
		//BaseVel[i] = BaseVel[i] + Lev; BaseVelY[i] = BaseVelY[i] + LevY;
		

		FBaseV[i][] = IPh2P22P1 * BaseV[i][];
		
		real[int] ReSnapshotsNEW(ReSnapshots.n + 1); //Voy a redefinir el vector con los Snapshots calculados
		ReSnapshotsNEW(0:ReSnapshots.n - 1) = ReSnapshots;
		ReSnapshotsNEW(ReSnapshots.n) = Reynolds;
		
		
		write("../../Snapshots/VMS_Smago_LPS_pres_2D/Snapshots.txt", ReSnapshotsNEW, 0, 0); 
		
	}
	else{
		readvector("../../Snapshots/VMS_Smago_LPS_pres_2D/Vx_" + Reynolds + ".txt", real, SolX, 0);
		BaseVel[i][] = SolX;
		readvector("../../Snapshots/VMS_Smago_LPS_pres_2D/Vy_" + Reynolds + ".txt", real, SolY, 0);
		BaseVelY[i][] = SolY;
		readvector("../../Snapshots/VMS_Smago_LPS_pres_2D/P_" + Reynolds + ".txt", real, SolP, 0);
		BaseP[i][] = SolP;		
		
		[BaseV[i], BaseVY[i]] = [BaseVel[i], BaseVelY[i]];
		//BaseVel[i] = BaseVel[i] + Lev; BaseVelY[i] = BaseVelY[i] + LevY;
		FBaseV[i][] = IPh2P22P1 * BaseV[i][];

	
	}
	VhP2 UL, ULY;
	UL = BaseV[i] + Lev; ULY = BaseVY[i] + LevY;
	//plot([UL, ULY], cmm="FE para Re = " + Reynolds, fill=1);
	plot([BaseV[i],BaseVY[i]], cmm="FE para Re = " + Reynolds, value=1);
	plot(BaseP[i],cmm="FE para Re = " + Reynolds, fill=1, value=1);
	
	//include "GramSchmidt.idp"
	
	// Almaceno en las matrices las Bases ortonormalizadas por columnas
	MBaseV(:,i) = BaseV[i][];
	MBaseP(:,i) = BaseP[i][];
	
	// TODO: GUARDAR LOS SNAPSHOTS -> PUEDO GUARDAR LA MATRIZ HASTA LA ITERACIÓN i

	// Actualizo las soluciones filtradas
	FBaseVel[i][] = IPhP2P1*BaseVel[i][]; FBaseVelY[i][] = IPhP2P1*BaseVelY[i][]; 
	
	FVdX[i][] = DXP2*FBaseVel[i][]; FVdY[i][] = DYP2*FBaseVel[i][];
	FVYdX[i][] = DXP2*FBaseVelY[i][]; FVYdY[i][] = DYP2*FBaseVelY[i][];
	
	FPdX[i][] = IPhDXP2*BaseP[i][]; FPdY[i][] = IPhDYP2*BaseP[i][];
	
	
	// Defino el nuevo producto escalar para la convección
	varf ConvPE([uu,uuY], [v,vY]) = int2d(Th)(antisimetric(BaseV[i],BaseVY[i],uu,uuY,v,vY));
	ConvPEM[i] = ConvPE(Vh2P2, Vh2P2);
	
	// Construyo las matrices
	include "MatricesOffline.idp"
		
	// Hago el algoritmo Greedy para determinar el nuevo valor del parámetro
	include "Greedy.idp"
	
	// Actualizo el nuevo Reynolds
	Reynolds = MuBest(i+1);
	mpi(cout<<"New Reynolds:"<<Reynolds<<endl;)
	
	mpi(cout<<"-------FIN DE LA ITERACION "<<i<<"-------"<<endl;)
}


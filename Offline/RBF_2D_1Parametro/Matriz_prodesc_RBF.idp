///////////////
// FreeROM 
///////////////

// Codigo que calcula las matrices usadas para el RBF modelo VMS_Smago con LPS en presion 
readvector("../../Snapshots/VMS_Smago_LPS_pres_2D/Snapshots.txt", real, ReSnapshots, 0);

Vh3P2 [uEF, uEFY, uEFP]; // Serán las soluciones para el Re_fijo
VhP1dc uEFdX, uEFdY, uEFYdX, uEFYdY; //las derivadas de uEF del paso anterior CON LEVANTAMIENTO
VhP2 SnapX, SnapY; 

if (search(ReSnapshots, Refijo, 1.e-9)==-1){
	// Si no lo he calculado todavía, lo calculo
	Reynolds = Refijo;
	VhP2 uprevL, uprevLY;
	VhP1dc Gr;
	include "../../Full_Order/VMS_Smago_LPS_pres_2D/FE_VMS_LPS_2D.idp"	
	
	SnapX = uEF + Lev;
	SnapY = uEFY + LevY;
}
else{
	readvector("../../Snapshots/VMS_Smago_LPS_pres_2D/Vx_" + Refijo + ".txt", real, SolX, 0);
	SnapX[] = SolX;
	readvector("../../Snapshots/VMS_Smago_LPS_pres_2D/Vy_" + Refijo + ".txt", real, SolY, 0);
	SnapY[] = SolY;

	SnapX = SnapX + Lev;
	SnapY = SnapY + LevY;
	
}

// Calculo las derivadas de la solucion CON LEVANTAMIENTO
{
	VhP2 udcAux;
	udcAux[] = IPhP2P1*SnapX[];
	uEFdX[] = DXP2*udcAux[]; uEFdY[] = DYP2*udcAux[];

	udcAux[] = IPhP2P1*SnapY[];
	uEFYdX[] = DXP2*udcAux[]; uEFYdY[] = DYP2*udcAux[];
}


varf prodesc([uu,uuY,uuP],[v,vY,vP])=
		int2d(Th)((1./Refijo + (CS*hTriangle)^2*MOD(uEF))*GradUGradV(uu,v) + uuP*vP)
					+on(1,2,3,4, uu=0, uuY=0);

matrix Xt = prodesc(Vh3P2,Vh3P2);
X = [[Xt, 0],[0, 1]];	
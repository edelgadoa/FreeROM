///////////////
// FreeROM 
/////////////// 

// Definimos las matrices de interpolacion Id-π_h y de derivadas PARA LOS EF LOCALES

// Notacion de las matrices: IPhEFXEFY: Matriz de filtrado de EFX -> EFY -> EFX
//							 ------------------------------------------------------
//						     DXEFX: Matrix derivando respecto de x de TODOS los EF a la vez
//						     DYEFX: Matrix derivando respecto de y de TODOS los EF a la vez
//						     DZEFX: Matrix derivando respecto de z de TODOS los EF a la vez (3D)
//							 -------------------------------------------------------
//						     DNXEFX: Matrix derivando respecto de x de la componente N del EFX
//							 -------------------------------------------------------
//                           IPhDXNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           IPhDYNEFX: Matrix del filtrado derivando respecto de x de la componente N del EFX
//                           



// Matrices de filtrado. 
matrix IPhP2P1L, IPh4P24P1L, IPhP1dcP1L;

{
		matrix IdP2L,Id4P2L,IdP1dcL,IdP1L; // IdEFX: Matriz Identidad con dim(EFX) grados de libertad
		{
			VhP2L faux2=1.;
			VhP1dcL faux1=1.;
			IdP2L = faux2[];
			IdP1dcL = faux1[];
            VhP1L fauxp1 = 1.;
            IdP1L = fauxp1[];
			Id4P2L=[[IdP2L, 0, 0, 0],[0, IdP2L, 0, 0],[0, 0, IdP2L, 0],[0, 0, 0, IdP2L]]; 
		}
		
		matrix PIgL = interpolate(VhP1L,VhP1dcL); //(Id-πh) P1dc->P1->P1dc
		matrix IPgL = interpolate(VhP1dcL,VhP1L); 
		matrix IPPIg = IPgL*PIgL;
		IPhP1dcP1L = IdP1dcL + (-1.)*IPPIg;
		
		matrix PI=interpolate(VhP1L,VhP2L);
		matrix IP=interpolate(VhP2L,VhP1L);
		matrix IPPI=IP*PI;
		IPhP2P1L = IdP2L + (-1.)*IPPI;  // (Id-πh) P2->P1->P2 
		
		matrix PI4=interpolate(Vh4P1L,Vh4P2L);
		matrix IP4=interpolate(Vh4P2L,Vh4P1L);
		matrix IPPI4=IP4*PI4;
		IPh4P24P1L = Id4P2L + (-1)*IPPI4; // (Id-πh) 3P2->3P1->3P2
}

// Matrices de derivadas	
matrix DX4P2L, DY4P2L, DZ4P2L; // ∂x, ∂y, ∂z 4P2 -> 4P1dc en las 4 componentes 
matrix DXP2L, DYP2L, DZP2L;   // ∂x, ∂y, ∂z P2 -> P1dc (El elemento finito solo tiene una componente)
matrix D1X4P2L, D2X4P2L, D3X4P2L, D4X4P2L; // ∂x 4P2 -> P1dc en la componente 1, 2, 3 y 4 de 4P2
matrix D1Y4P2L, D2Y4P2L, D3Y4P2L, D4Y4P2L; // ∂y 4P2 -> P1dc en la componente 1, 2, 3 y 4 de 4P2
matrix D1Z4P2L, D2Z4P2L, D3Z4P2L, D4Z4P2L; // ∂z 4P2 -> P1dc en la componente 1, 2, 3 y 4 de 4P2

{
	matrix D1,D2,D3,D4; // Cada una de las componentes de EFX que derivo
	int[int] c0=[0,-1,-1,-1];
	int[int] c1=[-1,1,-1,-1];
	int[int] c2=[-1,-1,2,-1];
	int[int] c3=[-1,-1,-1,3];
	
	D1 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c0,op=1);
	D2 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c1,op=1);
	D3 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c2,op=1);
	D4 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c3,op=1);
	
	DX4P2L = D1 + D2 + D3 + D4;
	
	D1 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c0,op=2);
	D2 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c1,op=2);
	D3 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c2,op=2);
	D4 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c3,op=2);
	
	DY4P2L = D1 + D2 + D3 + D4;
	
	D1 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c0,op=3);
	D2 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c1,op=3);
	D3 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c2,op=3);
	D4 = interpolate(Vh4P1dcL,Vh4P2L,U2Vc=c3,op=3);
	
	DZ4P2L = D1 + D2 + D3 + D4;
	
	/////////////////////////////////////////////////////////
	
	int[int] cs2=[0];
	D1X4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=1);
	D1Y4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=2);
	D1Z4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=3);

	cs2=[1];
	D2X4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=1);
	D2Y4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=2);
	D2Z4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=3);

	cs2=[2];
	D3X4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=1);
	D3Y4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=2);
	D3Z4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=3);
	
	cs2=[3];
	D4X4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=1);
	D4Y4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=2);
	D4Z4P2L = interpolate(VhP1dcL,Vh4P2L,U2Vc=cs2,op=3);
	
	////////////////////////////////////////////////////////
	
	DXP2L = interpolate(VhP1dcL,VhP2L,op=1);
	DYP2L = interpolate(VhP1dcL,VhP2L,op=2);
	DZP2L = interpolate(VhP1dcL,VhP2L,op=3);

}

// Matrices de derivada, con filtrado
matrix IPhD4X4P2L = IPhP1dcP1L * D4X4P2L; // (I-πh) de ∂x componente 4 de 4P2 (4P2 (derivo componente 4) -> P1dc (filtro)-> P1 -> P1dc)
matrix IPhD4Y4P2L = IPhP1dcP1L * D4Y4P2L; // (I-πh) de ∂y componente 4 de 4P2 (4P2 (derivo componente 4) -> P1dc (filtro)-> P1 -> P1dc)
matrix IPhD4Z4P2L = IPhP1dcP1L * D4Z4P2L; // (I-πh) de ∂z componente 4 de 4P2 (4P2 (derivo componente 4) -> P1dc (filtro)-> P1 -> P1dc)

// Global a local 

matrix Vh4P2GL = interpolate(Vh4P2L,Vh4P2);
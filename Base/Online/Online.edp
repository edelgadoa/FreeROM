///////////////
// FreeROM 
/////////////// 

// Programa principal que resuelve la fase ONLINE LPS 2D (P2-P2)

// Cargamos librerias
load "iovtk" 

// Cargamos macros y funciones i/o
include "../Auxiliary/Macros_2D.idp"
include "../Auxiliary/IO.idp" //falla el mpirank -> posiblemente necesite ejecutarlo con freefemmpi
include "../Auxiliary/search.idp"

// Creamos la malla
include "../Auxiliary/CuadradoNxNy.idp"

// Definimos los espacios de EF
include "../FOM/FE_Spaces_NoStab_VP_2D.idp"

// Definimos las matrices de interpolacion y derivacion
include "../FOM/Interp_matrix_NoStab_VP_2D.idp"

// Definimos los parametros a usar
include "../Auxiliary/Parametros_2D.idp"

// Incluimos el levantamiento
include "../FOM/Levantamiento.idp"

// Defino funciones para ortonormalizar y productos escalares / normas
include "../Auxiliary/Normas.idp"

varf NormaVel([uu,uuY],[vv,vvY]) = int2d(Th)(GradUGradV(uu,vv));
matrix MNormaVel = NormaVel(Vh2P2, Vh2P2);

// Cargamos Bases y Matrices
include "Load_Basis_Data.idp"

// Cargo los elementos del EIM (tanto para Smago como para LPS)
include "../Offline/EIM_Data.idp"

Reynolds = 4892;

//////////////////////////
// Resolvemos el problema de FE, y calculamos el tiempo en resolver
real timeFE = clock();

Vh3P2 [uEF, uEFY, uEFP]; 
VhP1dc uEFdX, uEFdY, uEFYdX, uEFYdY; //las derivadas de uEF del paso anterior CON LEVANTAMIENTO
VhP2 uprevL, uprevLY; // La sol del paso anterior con Levantamiento
VhP1dc Gr; // Para el termino de VMS-Smagorinsky

include "../FOM/FE_VMS_LPS_2D.idp"

uEF[] = uEF[] + Lev[];

VhP2 UEF, UEFY, UEFP;
UEF = uEF; UEFY = uEFY; UEFP = uEFP;

//plot([uEF, uEFY], cmm = "FE solution for Re = " + Reynolds);
//plot(UEFP, cmm = "FE solution for Re = " + Reynolds);

timeFE = clock() - timeFE; 

/////////////////////////

/////////////////////////
//	Resolvemos el problema de RB, y calculamos el tiempo en resolver
real timeRB = clock();

include "RB_VMS_LPS_2D.idp"

Vh2P2 [uN, uNY];
VhP2 uNP;

VhP2 UN, UNY;


uN[] = MBaseV*uRB(0:Nbases-1);
uNP[] = MBaseP*uRB(Nbases:2*Nbases-1);


uN[] += LevV[];

//plot([uN, uNY], cmm = "RB solution for Re = " + Reynolds);
plot(uNP, cmm = "RB solution for Re = " + Reynolds);
UN = uN; UNY = uNY;

timeRB = clock() - timeRB;
////////////////////////

// Calculo errores y speedups
Vh2P2 [uERR, uERRY];
VhP2 uERRP;
VhP2 UERR, UERRY;

UERR = abs(UEF - UN);
UERRY = abs(UEFY - UNY);
uERRP = abs(UEFP - uNP);


[uERR, uERRY] = [UERR, UERRY];

real normErrorV = normX(uERR[], MNormaVel);
real normErrorP = normL2(uERRP[]);


real speedup = timeFE/timeRB;

mpi(cout<<"-------------------------------"<<endl;
cout<<" "<<endl;
cout<<" "<<endl;
cout<<"-------------------------------"<<endl;
cout<<"Error T para velocidades= "<<normErrorV<<endl;
cout<<"Error L2 para presiones=  "<<normErrorP<<endl;
cout<<"-------------------------------"<<endl;
cout<<"Tiempo en resolver por F.E.:  "<<timeFE<<"s"<<endl;
cout<<"Tiempo en resolver por B.R.:  "<<timeRB<<"s"<<endl;
// cout<<"Numero iteraciones para B.R.: "<<RBit<<"s"<<endl;
cout<<"-------------------------------"<<endl;
cout<<"Speedup de la resolucion :    "<<speedup<<endl;
cout<<"-------------------------------"<<endl;)



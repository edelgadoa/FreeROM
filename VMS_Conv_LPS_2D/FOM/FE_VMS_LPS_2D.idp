///////////////
// FreeROM 
///////////////


// Defininimos la matriz y segundo miembro fijos
matrix MFija;
real[int] bFija(Vh3P2.ndof);

include "Matrices_fijas_NS_2D.idp"
ERROR = 10;

// Comenzamos el bucle iterativo para resolver el problema de EF
for (int ii=1; ii<=niterFE && (ERROR > epsFE) ; ii++){
	
	// Definimos la solución del paso anterior con levantamiento, y  calculamos sus derivadas
	
	uprevL = uEF + Lev;
	uprevLY = uEFY + LevY;
	
	
	{
		VhP2 udcAux;
		udcAux[] = IPhP2P1*uprevL[];
		uEFdX[] = DXP2*udcAux[];
		uEFdY[] = DYP2*udcAux[];

		udcAux[] = IPhP2P1*uprevLY[];
		uEFYdX[] = DXP2*udcAux[];
		uEFYdY[] = DYP2*udcAux[];

	}
	
	// incluimos la matriz del término de convección y segundo miembro término temporal
	matrix MNS;
	real[int] bNS(Vh3P2.ndof);
	
	include "Matrices_variables_NS_2D.idp"
	
	// incluimos la matriz y segundo miembro de VMS-Smagorinsky
	matrix Smago;
	real[int] bSmago(Vh3P2.ndof);
	
	include "Matriz_VMSSmago_2D.idp"
	
	
	//COEF. ESTAB. CODINA
	varf tauK(unused,v)=int2d(Th)((uprevL^2+uprevLY^2)*v);
	varf tauKT(unused,v)=int2d(Th)(((uEFdX)^2+(uEFdY)^2+(uEFYdX)^2+(uEFYdY)^2)*v);
	real[int] tK=tauK(0,VhP0);
	real[int] tKT=tauKT(0,VhP0);

	tKcod[] = sqrt(tK);
	tKTcod[] = sqrt(tKT);

	tau = ((cc1*(nu+((CS*hTriangle)^2)*(tKTcod/mk))/hTriangle^2) + (cc2*(tKcod/mk)/hTriangle))^(-1.);

	// incluimos la matriz de estabilizacion LPS de la presion
	matrix LPSpres;
	include "Matriz_LPS_Pres_2D.idp"
	
	// incluimos la matriz de estabilización LPS de la convección
	matrix LPSConv;
	real[int] bLPSConv(Vh3P2.ndof);
	include "Matriz_LPS_Conv_2D.idp"

	// Definimos la matriz final y segundo miembro final, y resolvemos el sistema
	matrix MFinal;
	real[int] bFinal(Vh3P2.ndof);
	
	MFinal = MFija;
	MFinal += MNS;
 	MFinal += Smago;
	MFinal += LPSpres;
	MFinal += LPSConv;
	
	bFinal = bFija;
	bFinal += bNS;
	bFinal += bSmago;
	// bFinal += bLPSConv;
	
	set(MFinal, solver=sparsesolver);
	
	Vh3P2 [uEFp, uEFpY, uEFpP]; // guardamos la iteración anterior para calcular el error
	uEFp[] = uEF[];
	
	uEF[] = MFinal^-1*bFinal;

	
	// Calculamos el error cometido (en velocidad)
	VhP2 errEF, errEFY;
	errEF = uEF - uEFp;
	errEFY = uEFY - uEFpY;
	
	real ERRORabs = sqrt(int2d(Th)([errEF, errEFY]'*[errEF, errEFY]) + int2d(Th)(GradUGradV(errEF,errEF)));
	ERROR = ERRORabs / sqrt(int2d(Th)([uEF,uEFY]'*[uEF, uEFY]) + int2d(Th)(GradUGradV(uEF, uEF)));
	// cout<<ERROR<<endl;
}


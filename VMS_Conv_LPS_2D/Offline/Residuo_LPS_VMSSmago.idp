///////////////
// FreeROM 
/////////////// 

// Programa que calcula el residuo de la soluci√≥n de RBM
matrix MRes;
real[int] bRes(Vh3P2.ndof);

// Termino de Navier-Stokes
real[int] bNSRes(Vh3P2.ndof);

{
	varf NSRes([u,uY,uP],[v,vY,vP]) = int2d(Th)((1./Refijo + MOD(uFijo))*GradUGradV(u,v) + uP*vP)
									// Segundo miembro
									+ int2d(Th)(nuRB*GradUGradV(uRB,v) + Antisimetric(uRB,uRB,v) - Div(v)*uRBP + Div(uRB)*vP)
									+ on(1,2,3,4, u=0, uY=0);
    MRes = NSRes(Vh3P2, Vh3P2);
	set(MRes, solver = sparsesolver);									
	bNSRes = NSRes(0, Vh3P2);
}
								
// Termino residuo VMS-Smagorinsky
real[int] bSmagoRes(Vh3P2.ndof); 

{
	real[int] bSx(Vh3P2.ndof), bSy(Vh3P2.ndof), bSaux(Vh3P1dc.ndof);
	VhP1dc uFRB, uFRBY;
	VhP1dc GrN = MOD(uRB);
	varf SmagoRes([u,uY,uP],[v,vY,vP]) = int2d(Th)((CS*hTriangle)^2*GrN*UporV(uFRB,v));
	
	// Componente X
	uFRB = uRBdX; uFRBY = uRBYdX;
	bSaux = SmagoRes(0, Vh3P1dc);
	bSx = DX3P2IPh'*bSaux;
	
	// Componente Y
	uFRB = uRBdY; uFRBY = uRBYdY;
	bSaux = SmagoRes(0, Vh3P1dc);
	bSy = DY3P2IPh'*bSaux;
	
	bSmagoRes = bSx + bSy;
	bSmagoRes = bSmagoRes.*cc; // bloqueo de las condiciones de contorno

}

// Termino LPS Pres + Conv
real[int] bStabPRes(Vh3P2.ndof);
real[int] bStabConv(Vh3P2.ndof);
bStabConv = 0;


{
	VhP0 tKres, tKTres, taures;
	varf tauKres(un,v) = int2d(Th)(UporV(uRB, uRB)*v);
	varf tauKTres(un,v) = int2d(Th)((MOD(uRB)^2)*v);
	real[int] tK = tauKres(0, VhP0);
	real[int] tKT = tauKTres(0, VhP0);
	tKres[] = sqrt(tK); tKTres[] = sqrt(tKT);
	
	taures = ((cc1*(nuRB+((CS*hTriangle)^2)*(tKTres/mk))/hTriangle^2) + (cc2*(tKres/mk)/hTriangle))^(-1.); 

	
	// PRESION
	VhP1dc uFRB;
	varf StabRes(un,v) = int2d(Th)(taures*uFRB*v);
	
	real[int] bSPx(Vh3P2.ndof), bSPy(Vh3P2.ndof), bSPaux(VhP1dc.ndof);
	// Componente X
	uFRB[] = IPhDXP2 * uRBP[];
	bSPaux = StabRes(0, VhP1dc);
	bSPx = IPhD3X3P2'*bSPaux;  
	
	// Componente Y
	uFRB[] = IPhDYP2 * uRBP[];
	bSPaux = StabRes(0, VhP1dc);
	bSPy = IPhD3Y3P2'*bSPaux;  

	bStabPRes = bSPx + bSPy;
	//////////////////////////
	// //CONVECCION
	VhP1dc uRBdc = uRBNL, uRBYdc = uRBNLY; // - LevY;
	matrix URBdc = uRBdc[];
	matrix URBYdc = uRBYdc[];

	real[int] bSCx(Vh3P2.ndof), bSCy(Vh3P2.ndof);
	
	//Componente X
	matrix UXD1X = URBdc * D1X3P2;
	matrix UYD1Y = URBYdc * D1Y3P2;
	matrix UD1 = UXD1X + UYD1Y;
	matrix IPhUD1 = IPhP1dcP1 * UD1;
	
	
	uFRB[] = IPhUD1 * uRBNL[];
	real[int] bConv1 = StabRes(0, VhP1dc);
	bSCx = IPhUD1'* bConv1;
	
	
	// Componente Y
	matrix UXD2X = URBdc * D2X3P2;
	matrix UYD2Y = URBYdc * D2Y3P2;
	matrix UD2 = UXD2X + UYD2Y;
	matrix IPhUD2 = IPhP1dcP1 * UD2;
	
	
	uFRB[] = IPhUD2 * uRBNL[];
	real[int] bConv2 = StabRes(0, VhP1dc);
	bSCy = IPhUD2'* bConv2;
	
	bStabConv = bSCx + bSCy;
	// bStabConv = bStabConv .* cc; //bloqueo de las condiciones de contorno


}

bRes = bNSRes;
bRes += bSmagoRes;
bRes += bStabPRes;
bRes += bStabConv;

{
	
	Vh3P2 [RES, RESY, RESP];
	RES[] = MRes^-1*bRes;
	ResG(iRB) = normX(RES[], MPescX);
}
///////////////
// FreeROM 
/////////////// 

write("DeltaNmax.txt", DeltaG, 0, 0);
write("DeltaN.txt", DeltaN(0:NRB), 0, 0);
write("TauN.txt", TauN(0:NRB), 0, 0);
write("MuBest.txt", MuBest(0:NRB), 0, 0);


real[int,int] DiffN(2*NRB,2*NRB), DivPN(2*NRB,2*NRB), ConvLevN(2*NRB,2*NRB), DTN(2*NRB,2*NRB), PenN(2*NRB,2*NRB), bSmagoN(Mbases,2*NRB);
real[int] bDiffN(2*NRB), bConvN(2*NRB);
real[int,int][int] ConvN(NRB), SmagoN(Mbases), StabPN(Taubases), NukN(Taubases), NGukN(Taubases), StabCN(Taubases*NRB^2);


DiffN = DiffRB(0:2*NRB-1, 0:2*NRB-1);
DivPN = DivPRB(Nbases-NRB:Nbases+NRB-1, 0:2*NRB-1);
ConvLevN = ConvLevRB(0:2*NRB-1, 0:2*NRB-1);
DTN = DTRB(0:2*NRB-1, 0:2*NRB-1);
PenN = PenRB(Nbases-NRB:Nbases+NRB-1, Nbases-NRB:Nbases+NRB-1);
bSmagoN = bSmagoRB(0:Mbases-1, 0:2*NRB-1);

bDiffN = bDiffRB(0:2*NRB-1);
bConvN = bConvRB(0:2*NRB-1);

for (int s=0; s<NRB; s++){
	real [int,int] cint(2*NRB,2*NRB), aux(2*Nbases,2*Nbases);
	aux = ConvRB[s];
	cint = aux(0:2*NRB-1, 0:2*NRB-1);
	ConvN[s] = cint(0:2*NRB-1, 0:2*NRB-1);
}
for (int s=0; s<Mbases; s++){
	real [int,int] sint(2*NRB,2*NRB), aux(2*Nbases,2*Nbases);
	aux=SmagoRB[s];
	sint=aux(0:2*NRB-1, 0:2*NRB-1);
	SmagoN[s]=sint(0:2*NRB-1, 0:2*NRB-1);
}

for (int s=0; s<Taubases; s++){
    real[int,int] Spresint(2*NRB,2*NRB), aux(2*Nbases,2*Nbases);
    aux = StabPRB[s];
    Spresint = aux(Nbases-NRB:Nbases+NRB-1, Nbases-NRB:Nbases+NRB-1);
    StabPN[s] = Spresint(0:2*NRB-1, 0:2*NRB-1);
}

for (int s=0;s<Taubases;s++){
    real[int,int] StabCint(2*NRB,2*NRB), aux(2*Nbases,2*Nbases);
	for (int ui=0;ui<NRB; ui++){
		for(int uj=0;uj<NRB; uj++){
			aux = StabCUURB[s + ui*Nbases + uj*Taubases*Nbases];
		    StabCint = aux(0:2*NRB-1, 0:2*NRB-1); 
		    StabCN[s + ui*NRB + uj*Taubases*NRB] = StabCint(0:2*NRB-1, 0:2*NRB-1);
		}
	}

}

for (int s=0;s<Mbases;s++){
	real [int,int] GradPMint(4,NRB), aux(4,Nbases); 
	aux = GradPM[s];
	GradPMint = aux(0:3,0:NRB-1);
	GradPM[s] = GradPMint(0:3,0:NRB-1);
}

for (int s=0; s<Taubases; s++){
    real[int,int] NUKint(NRB+1,NRB+1), aux(Nbases+1,Nbases+1);
    aux = NUK[s];
    NUKint = aux(0:NRB,0:NRB); 
    NukN[s] = NUKint(0:NRB,0:NRB);
}

for (int s=0;s<Taubases;s++){
    real[int,int] NGUKint(NRB+1,NRB+1), aux(Nbases+1,Nbases+1);
    aux = NGUK[s];
    NGUKint = aux(0:NRB,0:NRB); 
    NGukN[s] = NGUKint(0:NRB,0:NRB);
}



// Guardamos las matrices en archivos txt para leerlos despuÃ©s al hacer la fase online
write("MatricesRB/Diff.txt", DiffN, 0 , 0, 0, 20);
write("MatricesRB/DivP.txt", DivPN, 0, 0, 0, 20);
write("MatricesRB/ConvLev.txt", ConvLevN, 0, 0, 0, 20);
write("MatricesRB/DT.txt", DTN, 0, 0, 0, 20);
write("MatricesRB/Pen.txt", PenN, 0, 0, 0, 20);
write("MatricesRB/bSmago.txt", bSmagoN, 0, 0, 0, 20);
write("MatricesRB/bDiff.txt", bDiffN, 0, 0, 0, 20);
write("MatricesRB/bConv.txt", bConvN, 0, 0, 0, 20);
write("MatricesRB/Conv.txt", ConvN, 0, 0, 0, 20);
write("MatricesRB/Smago.txt", SmagoN, 0, 0, 0, 20);
write("MatricesRB/StabP.txt", StabPN, 0, 0, 0, 20);
write("MatricesRB/StabC.txt", StabCN, 0, 0, 0, 20);
write("MatricesRB/GradPMLev.txt", GradPMLev, 0, 0, 0, 20);
write("MatricesRB/GradPM.txt", GradPM, 0, 0, 0, 20);
write("MatricesRB/NUK.txt", NukN, 0, 0, 0, 20);
write("MatricesRB/NGUK.txt", NGukN, 0, 0, 0, 20);

// Guardo los Snapshots calculados

real[int, int] MBaseVN(Vh2P2.ndof, NRB), MBasePN(VhP2.ndof, NRB);
MBaseVN = MBaseV(0:Vh2P2.ndof-1, 0:NRB-1);
MBasePN = MBaseP(0:VhP2.ndof-1, 0:NRB-1);

write("MatricesRB/BaseV.txt", MBaseVN, 0, 0, 0, 20);
write("MatricesRB/BaseP.txt", MBasePN, 0, 0, 0, 20);


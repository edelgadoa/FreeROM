///////////////
// FreeROM 
/////////////// 

///////////////////////////
// Codigo donde inicializo las matrices que almacenaré de manera offline
///////////////////////////


// Definicion del array de matrices del gradiente en los Puntos mágicos
real[int,int][int] GradPM(Mbases);
real[int][int] GradPMLev(Mbases); 

for (int i=0;i<Mbases;i++){
	real[int,int] Aux(4,Nbases);
	Aux=0;
	GradPMLev[i]=[FLevdX[](PuntosMSmago(i)), FLevdY[](PuntosMSmago(i)), FLevYdX[](PuntosMSmago(i)), FLevYdY[](PuntosMSmago(i))];
	GradPM[i]=Aux(0:3,0:Nbases-1);
}


//Definicion de los arrays para calcular el tauk en el EIM de Tau
real[int,int][int] NUK(Taubases), NGUK(Taubases);
for (int i=0; i<Taubases; i++){
	real [int,int] Aux (Nbases+1,Nbases+1);
	Aux=0;
	
	varf Ngk(un1,v) = int2d(Th)((Lev^2+LevY^2)*v);
	real[int] ngk = Ngk(0,VhP0); 
	Aux(0,0) = ngk(PuntosMTau(i)); //Tomo el valor en el elemento correspondiente
	NUK[i] = Aux(0:Nbases,0:Nbases);
	
	varf Ngradgk(un1,v)=int2d(Th)((FLevdX^2+FLevdY^2+FLevYdX^2+FLevYdY^2)*v);
	real[int] nggk = Ngradgk(0,VhP0); 
	Aux(0,0)= nggk(PuntosMTau(i)); //Tomo el valor en el elemento correspondiente
	NGUK[i] = Aux(0:Nbases,0:Nbases);
}

// Definicion de las Matrices Reducidas fijas
real[int,int] DiffRB(2*Nbases, 2*Nbases), DivPRB(2*Nbases, 2*Nbases), PenRB(2*Nbases, 2*Nbases), 
			  ConvLevRB(2*Nbases, 2*Nbases), DTRB(2*Nbases, 2*Nbases), StabhkRB(2*Nbases, 2*Nbases);
			  
DiffRB = 0;
DivPRB = 0;
PenRB = 0;
ConvLevRB = 0;
DTRB = 0;
StabhkRB = 0;

// Definicion de los segundos miembros
real[int] bDiffRB(2*Nbases), bConvRB(2*Nbases), bDTRB(2*Nbases), bSmagoRBi(2*Nbases);			   
real[int,int] bSmagoRB(Mbases, 2*Nbases);

bDiffRB = 0;
bConvRB = 0;
bDTRB = 0;
bSmagoRBi = 0;
bSmagoRB = 0;

// segundos miembros de estab Conv
real[int,int] bStabCUURB(Taubases*Nbases^2,2*Nbases), bStabCULRB(Taubases*Nbases,2*Nbases), bStabCLURB(Taubases*Nbases,2*Nbases), bStabCLLRB(Taubases,2*Nbases);


// Definicion de Matrices y Tensores variables
real[int,int][int] ConvRB(Nbases), SmagoRB(Mbases), StabPRB(Taubases), StabCUURB(Taubases*Nbases^2),
				   StabCULRB(Taubases*Nbases), StabCLURB(Taubases*Nbases), StabCLLRB(Taubases);

for (int k=0; k<Nbases; k++){
	real[int,int] aux(2*Nbases, 2*Nbases);
	aux=0;
	ConvRB[k] = aux(0:2*Nbases-1, 0:2*Nbases-1);
}

for (int k=0;k<Mbases;k++){
	real[int,int] aux(2*Nbases,2*Nbases);
	aux=0;
	SmagoRB[k]=aux(0:2*Nbases-1,0:2*Nbases-1);
}
for (int k=0;k<Taubases;k++){
	real[int,int] aux(2*Nbases,2*Nbases);
	aux=0;
	StabPRB[k]=aux(0:2*Nbases-1,0:2*Nbases-1);

}
for (int k=0;k<Taubases*Nbases^2;k++){
	real[int,int] aux(2*Nbases,2*Nbases);
	real[int,int] baux(Taubases*Nbases^2,2*Nbases);
	aux=0; baux=0;
	StabCUURB[k] = aux(0:2*Nbases-1,0:2*Nbases-1);
	bStabCUURB = baux;
}
for (int k=0;k<Taubases*Nbases;k++){
	real[int,int] aux(2*Nbases,2*Nbases);
	real[int,int] baux(Taubases*Nbases,2*Nbases);
	aux=0; baux=0;
	StabCULRB[k]=aux(0:2*Nbases-1,0:2*Nbases-1);
	StabCLURB[k]=aux(0:2*Nbases-1,0:2*Nbases-1);
	bStabCULRB = baux;
	bStabCLURB = baux;
}
for (int k=0;k<Taubases;k++){
	real[int,int] aux(2*Nbases,2*Nbases);
	real[int,int] baux(Taubases, 2*Nbases);
	aux=0; baux=0;
	StabCLLRB[k] = aux(0:2*Nbases-1,0:2*Nbases-1);
	bStabCLLRB = baux;
}
///////////////
// FreeROM 
/////////////// 

/////////////////////////////////////////
/////////// FASE OFFLINE ////////////////
//// NS + VMS-Smago + Estab Pres (LPS)///
/////////////////////////////////////////
/////////// NO SUPREMIZER ///////////////
/////////////////////////////////////////

verbosity = 0;

// Codigo para calcular la fase offline VMS-Smago con estabilizacion LPS en la presion. 
// Elemento Finito P2-P2 (no estable) en vel-pres SIN SUPREMIZER

// Cargamos librerias
load "iovtk" 
load "lapack"
load "MUMPS_mpi" // Para calcular la constante de Sovolev en paralelo

// Creamos la Malla
include "../../Auxiliary/CuboNxNyNz.idp"


// Cargamos macros, funciones i/o
include "../../Auxiliary/Macros_3D.idp"
include "../../Auxiliary/IO.idp" 

// Definimos los espacios de EF
include "../../FOM/FE_Spaces_NoStab_VP_3D.idp"

// Definimos los parametros a usar
include "../../Auxiliary/Parametros_3D.idp"

// Definimos las matrices de interpolacion y derivacion
include "../../FOM/Interp_matrix_NoStab_VP_3D.idp"
include "../../FOM/Interp_matrix_NoStab_VP_3D_Local.idp"

// Defino funciones para ortonormalizar y productos escalares / normas
include "../../Auxiliary/Normas_3D.idp"


// Defino los diferentes productos escalares para construir las matrices reducidas


varf StabhK(uP,vP) = int3d(Th)(hTriangle^2*uP*vP);
matrix FiltroX, FiltroY, FiltroZ;
matrix SPPEM2 = StabhK(VhP1dc, VhP1dc);
{
	FiltroX = SPPEM2 * IPhDXP2;
	FiltroX = (IPhDXP2') * FiltroX;
	FiltroY = SPPEM2 * IPhDYP2;
	FiltroY = (IPhDYP2') * FiltroY;	
	FiltroZ = SPPEM2 * IPhDZP2;
	FiltroZ = (IPhDZP2') * FiltroZ;	
}
matrix StabhkPEM = FiltroX + FiltroY;
StabhkPEM += FiltroZ;

write("LPSMatrix.txt", StabhkPEM, 0, 0);







// Parametros del PETSC
int petsc = 1; //Para usar el paralelo = 1

macro dimension()2 //EOM
include "macro_ddm.idp";


load "PETSc";
Mat MatAVh4P2;
Mat MatAVhP1dc;
int[int] mapVh4P2,mapVhP1dc;
string sparamsv = "-pc_type fieldsplit -pc_fieldsplit_detect_saddle_point -pc_factor_mat_solver_type mumps -ksp_monitor_true_residual -ksp_converged_reason";


if(petsc){	
	int[int] myN2o;
	macro ThLN2O() myN2o // EOM
	buildDmesh(ThL);
	mapVh4P2 = restrict(Vh4P2L,Vh4P2,myN2o);  
	{
		macro def(i) [i, iY, iT, iP] //
		macro init(i) [i, i, i, i] // EOM
		// macro ThPkPart() [Edge03ds0, Edge03ds0, Edge03ds0, Edge03ds0]// EOM special FE for the domain partitioning
		createMat(ThL, MatAVh4P2, [P2, P2, P2, P2]); 
	}	
	mapVhP1dc = restrict(VhP1dcL,VhP1dc,myN2o);
	{
		macro def(i) [i] //
		macro init(i) [i] //
		createMat(ThL,MatAVhP1dc,P1dc);
	}
	
	
}



real[int] auxD = MatAVhP1dc.D;


VhP0 mk,tau,h,tKcod,tKTcod;


varf med(unused,v)=intN(Th)(1.*v);
real[int] medk=med(0,VhP0);
mk[]=sqrt(medk); 


h = hTriangle;
//Constantes varias
real CS=0.1;
real cc1=16.;
real cc2=sqrt(cc1);


real Pr=0.71; //Prandlt aire

real dt=1.e-2;//2.e-3
real dtt = 1./dt;
real epspen=1.e-6;//1.e-8

real Ramin=1.e3;//1.e5
real Ramax=1.e5;//1.e6


int ni=2;


int nIterations=2000;
real epsError = 1.e-2;//1.e-8


///////////////
// FreeROM 
/////////////// 
load "msh3"
load "gmsh"
load "iovtk"

int[int] fforder=[1,1,1,1];
// Cargamos las funciones para pasar la numeracion de IEfluids a FreeFem
include "IE2FF.idp"

mesh3 Th = readmesh3("IEfluids.mesh"); 
// mesh3 Th = readmesh3("IEfluids.msh");
// mesh3 Th = vtkload3("IEfluids.vtk");
// mesh3 Th = vtkload3("IEfluids.vtu");
// mesh3 Th = gmshload3("IEfluids.msh"); 

fespace VhP1(Th, P1);
fespace Vh3P1(Th, [P1,P1,P1]);

real[int][int] MeshIE(Th.nv), MeshIENew(Th.nv);

ifstream ReadSnapshot("field.txt");
int mx, my, mz;
ReadSnapshot>>mx;
ReadSnapshot>>my;
ReadSnapshot>>mz;

real[int] Vx(mx*my*mz), Vy(mx*my*mz), Vz(mx*my*mz), Pp(mx*my*mz);
for (int i=0; i<mx*my*mz; i++){
	ReadSnapshot>>Vx(i);
	ReadSnapshot>>Vy(i);
	ReadSnapshot>>Vz(i);
	ReadSnapshot>>Pp(i);
}
cout<<Vx<<endl;
Pp = IE2FF(Pp, mx, my, mz);
Vx = IE2FF(Vx, mx, my, mz);
Vy = IE2FF(Vy, mx, my, mz);
Vz = IE2FF(Vz, mx, my, mz);

Vh3P1 [VX,VY,VZ];
VhP1 Vxh,Vyh,Vzh;
VhP1 Ph;

Vxh[] = Vx;
Vyh[] = Vy;
Vzh[] = Vz;
[VX, VY, VZ] = [Vxh, Vyh, Vzh];
Ph[] = Pp;

savevtk("IEfluidsSnapshot.vtu", Th, Ph, [VX, VY, VZ], dataname="Pressure Velocity", order=fforder);
//
// ifstream ReadMesh("grid.txt");
// int mx, my, mz;
// ReadMesh>>mx;
// ReadMesh>>my;
// ReadMesh>>mz;
//
// for (int i=0; i<mx*my*mz; i++){
// 	real xx, yy, zz;
// 	ReadMesh>>xx;
// 	ReadMesh>>yy;
// 	ReadMesh>>zz;
// 	MeshIE[i] = [xx,yy,zz];
// 	MeshIENew[i] = [0,0,0];
// }
//
// ofstream WriteMesh("MallaIE.txt");
// WriteMesh<<MeshIE<<endl;




// MeshIENew = IE2FF(MeshIE, mx, my, mz);

// int cont = 0;
// for (int j=0; j<my; j++){
// 	for (int i=0; i<mx; i++){
// 		for (int k=0; k<mz; k++){
// 			MeshIENew[cont] = MeshIE[i + mx*j + k*my*mx];
// 			cont++;
// 		}
// 	}
// }

// int elemen = 928346;
// cout<<"Malla IE: ("<<MeshIENew[elemen](0)<<", "<<MeshIENew[elemen](1)<<", "<<MeshIENew[elemen](2)<<")"<<endl;
// cout<<"Malla FF: ("<<Th(elemen).x<<", "<<Th(elemen).y<<", "<<Th(elemen).z<<")"<<endl;

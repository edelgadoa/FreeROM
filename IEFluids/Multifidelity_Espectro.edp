///////////////
// FreeROM 
/////////////// 
load "msh3"
load "gmsh"
load "iovtk"
load "lapack"

int[int] fforder=[1,1,1,1];

// Cargo los archivos auxiliares
macro dimension() 3 //EOM
include "macro_ddm.idp"
load "PETSc"
macro UporV(U,V) ([U,U#Y,U#Z]'*[V,V#Y,V#Z]) //EOM 
macro mpi(variable) if(mpirank==0){variable} //EOM
include "IO.idp"

// Cargo/Creo la malla 
mpi(cout<<"Cargando malla global y creando mallas locales...";)
mesh3 Th = readmesh3("IEfluids.mesh"); 
mesh3 ThG = Th; // For the global mesh

int[int] myN2o;
macro ThN2O() myN2o // EOM
macro Pk3P1() [P1,P1,P1] // EOM
macro PkP1() P1 // EOM // No sÃ© si este es necesario

buildDmesh(Th);
mpi(cout<<"Hecho." << endl;)

// Parametros 
mpi(cout<<"Cargando parametros y otros...";)
include "Parametros.idp"

MatCreate(Th, MatVhP1, PkP1);
{
    macro def(i) [i, iY, iP] // EOM
    macro init(i) [i, i, i] // EOM
    MatCreate(Th, MatVh3P1, Pk3P1);
}

// Variables donde guardo los snapshots que cargo
fespace VhP1(Th, P1);           fespace VhP1G(ThG, P1);
fespace Vh3P1(Th, [P1,P1,P1]);  fespace Vh3P1G(ThG, [P1,P1,P1]);

mapVhP1 = restrict(VhP1, VhP1G, myN2o);
mapVh3P1 = restrict(Vh3P1,Vh3P1G,myN2o);

// Defino funciones para ortonormalizar y productos escalares / normas
include "Normas_3D.idp"
mpi(cout<< "Creando matriz de productos escalares...";)
Mat MatNormV;
{
	macro def(i) [i, iY, iZ] //
	macro init(i) [i, i, i] // EOM
	createMat(Th, MatNormV, [P1, P1, P1]);
	varf NormV([u, uY, uZ],[v, vY, vZ]) = int3d(Th)(UporV(u,v));
	matrix MPescV = NormV(Vh3P1, Vh3P1); //H1PEMat;
	MatNormV = MPescV;
}
mpi(cout<< "Hecho." << endl;)

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

// Cargamos el modulo de transformadas de fourier y calculamos el espectro
Vh3P1G [SnapG, SnapGY, SnapGZ];
Vh3P1 [Snap, SnapY, SnapZ];
VhP1<complex> SF, SFY, SFZ, auxc; auxc = 0.;
include "fourier3D_IEFluids.idp";
Reynolds = 1;
int i = 1;

readvector("Snapshots/V_"+Reynolds+"_meanfile" + i + ".txt", real, SolG, 0);
SnapG[] = SolG;
Snap[] = SnapG[](mapVh3P1);

SF = Snap + auxc;
SFY = SnapY + auxc;
SFZ = SnapZ + auxc;

int kmax = 50;
real[int] espectroIEFluids = espectro3D(SF[], SFY[], SFZ[], kmax);

write("Espectros/Espectro_Re_"+Reynolds+"_t_"+i+".txt", espectroIEFluids, 0 , 0, 0, 20);
///////////////
// FreeROM 
/////////////// 
load "msh3"
load "gmsh"
load "iovtk"
load "lapack"
verbosity = 0;
int[int] fforder=[1,1,1,1];

// Cargo los archivos auxiliares
macro dimension() 3 //EOM
include "macro_ddm.idp"
load "PETSc"
macro UporV(U,V) ([U,U#Y,U#Z]'*[V,V#Y,V#Z]) //EOM 
macro mpi(variable) if(mpirank==0){variable} //EOM
include "IO.idp"

// Cargo/Creo la malla 
mpi(cout<<"Cargando malla global y creando mallas locales...";)
mesh3 Th = readmesh3("IEfluids.mesh"); 
mesh3 ThG = Th; // For the global mesh

int[int] myN2o;
macro ThN2O() myN2o // EOM
macro Pk3P1() [P1,P1,P1] // EOM
macro PkP1() P1 // EOM // No sÃ© si este es necesario

//buildDmesh(Th);

// Creo la malla truncada
// mpi(cout<<"Truncando malla global y creando mallas truncadas locales...";)
mesh3 ThTrunc = trunc(ThG, ((x<1800)),split=1); 
ThTrunc = trunc(ThTrunc, ((x>1350)),split=1);
ThTrunc = trunc(ThTrunc, ((y<240)),split=1); 
ThTrunc = trunc(ThTrunc, ((y>40)),split=1);
ThTrunc = trunc(ThTrunc, ((z<350)),split=1); 
ThTrunc = trunc(ThTrunc, ((z>150)),split=1);
mesh3 ThTruncG = ThTrunc; // For the global mesh

// Macros PETSc truncamiento
int[int] myN2oTrunc;
macro ThTruncN2O() myN2oTrunc // EOM

buildDmesh(ThTrunc);

// Parametros 
mpi(cout<<"Cargando parametros y otros...";)
include "Parametros.idp"

MatCreate(Th, MatVhP1, PkP1);
{
    macro def(i) [i, iY, iP] // EOM
    macro init(i) [i, i, i] // EOM
    MatCreate(Th, MatVh3P1, Pk3P1);
}

// Parametros truncamiento
Mat MatVhP1trunc; 	int[int] mapVhP1trunc;
Mat MatVh3P1trunc;	int[int] mapVh3P1trunc;

MatCreate(ThTrunc, MatVhP1trunc, PkP1);
{
    macro def(i) [i, iY, iP] // EOM
    macro init(i) [i, i, i] // EOM
    MatCreate(ThTrunc, MatVh3P1trunc, Pk3P1);
}

// Variables donde guardo los snapshots que cargo
fespace VhP1G(ThG, P1);
fespace Vh3P1G(ThG, [P1,P1,P1]);
fespace VhP1trunc(ThTrunc, P1);           fespace VhP1truncG(ThTruncG, P1);
fespace Vh3P1trunc(ThTrunc, [P1,P1,P1]);  fespace Vh3P1truncG(ThTruncG, [P1,P1,P1]);

mapVh3P1trunc = restrict(Vh3P1trunc,Vh3P1truncG,myN2oTrunc);

// Defino funciones para ortonormalizar y productos escalares / normas
//include "Normas_3D.idp"
/*
mpi(cout<< "Creando matriz de productos escalares...";)
Mat MatNormV;
{
	macro def(i) [i, iY, iZ] //
	macro init(i) [i, i, i] // EOM
	createMat(Th, MatNormV, [P1, P1, P1]);
	varf NormV([u, uY, uZ],[v, vY, vZ]) = int3d(Th)(UporV(u,v));
	matrix MPescV = NormV(Vh3P1, Vh3P1); //H1PEMat;
	MatNormV = MPescV;
}
mpi(cout<< "Hecho." << endl;)

mpi(cout<< "Creando matriz de productos escalares truncado...";)
Mat MatNormVtrunc;
{
	macro def(i) [i, iY, iZ] //
	macro init(i) [i, i, i] // EOM
	createMat(ThTrunc, MatNormVtrunc, [P1, P1, P1]);
	varf NormVtrunc([u, uY, uZ],[v, vY, vZ]) = int3d(ThTrunc)(UporV(u,v));
	matrix MPescVtrunc = NormVtrunc(Vh3P1trunc, Vh3P1trunc); //H1PEMat;
	MatNormVtrunc = MPescVtrunc;
}
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

// Cargamos el modulo de transformadas de fourier y calculamos el espectro
Vh3P1G [SnapG, SnapGY, SnapGZ];
Vh3P1truncG [SnapTruncG, SnapTruncGY, SnapTruncGZ];
Vh3P1trunc [Snap, SnapY, SnapZ];
VhP1trunc<complex> SF, SFY, SFZ, auxc; auxc = 0.;
include "fourier3D_IEFluids_trunc.idp";
Reynolds = 18;
int i = 6;

readvector("Snapshots/V_" + Reynolds + "_meanfile" + i + ".txt", real, SolG, 0);
SnapG[] = SolG;

[SnapTruncG, SnapTruncGY, SnapTruncGZ] = [SnapG, SnapGY, SnapGZ];
Snap[] = SnapTruncG[](mapVh3P1trunc);

SF = Snap + auxc;
SFY = SnapY + auxc;
SFZ = SnapZ + auxc;


///////////////////////////////////////////////////////
/// Establecemos Espectro artificial///
///////////////////////////////////////////////////////
int kmax = 16;


complex[int,int][int] CoefsArtificial(2*kmax+1);

// Creamos el espectro artificialmente
real module;
for (int kz=-kmax; kz<=kmax; kz++){
    // CoefsArtificial[kz+kmax] = 0;
    complex[int, int] CoefsArtAux(2*kmax+1, 2*kmax+1);
    for(int kx=-kmax; kx<=kmax; kx++){
	    for(int ky=-kmax; ky<=kmax; ky++){
		    module = sqrt(kx^2 + ky^2 + kz^2);
            CoefsArtAux(kx+kmax, ky+kmax) = module^(-5./3); 
                                                        //Se supone que consigue k^-5/3
	    }
    }
    
    CoefsArtificial[kz+kmax] = CoefsArtAux(0:2*kmax, 0:2*kmax);
}


//write("../PruebaTransformada/Coefs.txt", Coefs, 0,0);
//real[int, int] CoefsArtificialKmax = CoefsArtificial[kmax](0:2*kmax, 0:2*kmax);



//real[int] espectroIEFluids = espectro3D(SF[], SFY[], SFZ[], kmax);
//write("Espectros/Espectro_Re_"+Reynolds+"_"+i+"_"+kmax+".txt", espectroIEFluids, 0 , 0, 0, 20);


real[int,int][int] energyhat(2*kmax+1);
for (int kk=-kmax; kk<=kmax; kk++){
    real[int,int] energyhatAux = energycomputation(CoefsArtificial[kk+kmax], CoefsArtificial[kk+kmax], CoefsArtificial[kk+kmax], kk);
    energyhat[kk+kmax] = energyhatAux(0:2*kmax, 0:2*kmax);
}   

real[int] energykk = energyk3d(energyhat);

write("Espectros/Espectro_Artificial.txt", energykk, 0 , 0, 0, 20);

// Archivo auxiliar calculo de transformadas de fourier


real[int] dFourier;
PartitionCreate(ThTrunc, dFourier, PkP1); 
VhP1trunc DP1; DP1[] = dFourier;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Si tengo varias componentes, debo llamar varias veces a la transformada de fourier.
// El vector en el argumento debe ser un vector en P2.

// func complex[int,int][int] FourierTransform3D(complex[int] uFourierv, int kmax){
//     VhP1trunc<complex> uFourier;
//     uFourier[] = uFourierv;
//     complex[int,int][int] FCoefs(2*kmax+1);
//     // Inicializo el tensor FCoefs (De momento pruebo sin inicializar, puede que no sea necesario)
//     // for (int kk=-kmax; kk<=kmax; kk++){
//     //     complex[int, int] auxFCoef (2*kmax+1, 2*kmax+1);
//     //     auxFCoef = 0;
//     //     FCoefs[kk] = auxFCoef;
//     // }
//
//     for(int kk=-kmax; kk <= kmax; kk++){
//         complex[int,int] auxFCoef (2*kmax+1, 2*kmax+1);
//         for(int ii=-kmax; ii <= kmax; ii++){
//             for(int jj=-kmax; jj <= kmax; jj++){
//                 func fourier = exp(-1i*pi*(x*ii + y*jj + z*kk));
//                 VhP1trunc<complex> EFufourier = fourier;
//                 auxFCoef(ii+kmax, jj+kmax) = int3d(ThTrunc)(DP1*EFufourier*uFourier);
//             }
//         }
//         FCoefs[kk+kmax] = auxFCoef;
//     }
//     return FCoefs; // Los devuelve en local
// }


/////////////////////////////////////////////////////////////////////////////////
func complex[int,int] FourierTransform3D(complex[int] uFourierv, int kmax, int kZ){
    VhP1trunc<complex> uFourier;
    uFourier[] = uFourierv;
    complex[int,int] FCoefs(2*kmax+1, 2*kmax+1);
    // Inicializo el tensor FCoefs (De momento pruebo sin inicializar, puede que no sea necesario)
    // for (int kk=-kmax; kk<=kmax; kk++){
    //     complex[int, int] auxFCoef (2*kmax+1, 2*kmax+1);
    //     auxFCoef = 0;
    //     FCoefs[kk] = auxFCoef;
    // }
    for(int ii=-kmax; ii <= kmax; ii++){
        for(int jj=-kmax; jj <= kmax; jj++){
            func fourier = exp(-1i*pi*(x*ii + y*jj + z*kZ));
			VhP1trunc<complex> EFufourier = fourier;
            FCoefs(ii+kmax, jj+kmax) = int3d(ThTrunc)(DP1*EFufourier*uFourier);
		}
    }
    return FCoefs; // Los devuelve en local
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Transformada de fourier inversa.
func complex[int] FourierInverse3D(complex[int,int] Coefs){
    int kcoefs = (Coefs.n-1)/2;
    VhP1trunc<complex> uFourier;
	
	uFourier = 0;
    for(int ii = -kcoefs; ii<kcoefs; ii++){
        for(int jj = -kcoefs; jj<kcoefs; jj++){
			for(int kk = -kcoefs; kk<kcoefs; kk++){
				complex FCoef = Coefs(ii+kcoefs,(jj+kcoefs)*(2.*kcoefs+1)+kk+kcoefs);
            	func BaseFourier = FCoef*exp(-1i*pi*(x*ii+y*jj+z*kk));
				VhP1trunc<complex> EFBaseFourier = BaseFourier;
				uFourier =  uFourier + EFBaseFourier;
			}
        }
	}
	return uFourier[];
}

// Función en 2D para la transformada inversa con DD (no mejora frente a la utilizada)
// func complex[int] FourierInverse2D(complex[int,int] &Coefs, int &kmax){
// 	int Nk = Coefs.n -1 ;
//     mesh ThTruncKG = square(Nk, Nk, [-kmax+(2*kmax)*x, -kmax+(2*kmax)*y], flags=1);
	
// 	mesh ThTruncK = ThTruncKG;
// 	int[int] mykN2o;
// 	macro ThTruncKN2O() mykN2o // EOM
// 	buildDmesh(ThTruncK);
// 	fespace VhKP1G(ThTruncKG, P1);
	
// 	fespace VhKP1(ThTruncK, P1);
// 	int[int] mapVhKP1;

// 	real[int] DP1K;
// 	VhKP1 DP1KEF;
	
// 	VhKP1G xxk, yyk;
// 	xxk = x; yyk = y;
	
// 	mapVhKP1 = restrict(VhKP1, VhKP1G, mykN2o);
	
// 	PartitionCreate(ThTruncK, DP1K, P1);
// 	DP1KEF[] = DP1K;
// 	VhKP1G<complex> TFourieruG;
// 	TFourieruG = 0;
// 	for(int kk=-kmax; kk<=kmax; kk++){
// 		for(int jj=-kmax; jj<=kmax; jj++){
// 			TFourieruG[][kk+kmax + (2*kmax+1)*(jj+kmax)] = Coefs(kk+kmax, jj+kmax); //paso la matriz a EF P1<complex>
// 		}
// 	}
	
// 	VhKP1<complex> TFourieru;
// 	TFourieru[] = TFourieruG[](mapVhKP1);
// 	VhKP1 Transu = real(TFourieru);
	
// 	VhP1truncG<complex> uFourierG, uFourierGL;
// 	VhP1trunc<complex> uFourier;
// 	uFourierG = 0;
	
// 	VhP1truncG xx, yy;
// 	xx = x; yy = y; // Para tener la informacion de las coordenadas espaciales
// 	for (int ii=0; ii<VhP1truncG.ndof; ii++){
// 		func BaseFourier = exp(1i*pi*(xx[][ii]*x+yy[][ii]*y));
// 		VhKP1<complex> BaseFourierEF = BaseFourier;
// 		uFourierGL[][ii] = int2d(ThTruncK)(DP1KEF*TFourieru*BaseFourierEF);
// 	}
// 	mpiAllReduce(uFourierGL[], uFourierG[], mpiCommWorld, mpiSUM);
// 	uFourier[] = uFourierG[](mapVhP1trunc);
//     return uFourier[];
// }

///////////////////////////////////////////////////////////////////////////////////////////////////
// Cálculo del espectro.
func real[int,int][int] energycomputation(complex[int,int][int] & CoefsX, complex[int,int][int] & CoefsY, complex[int,int][int] & CoefsZ)
{
    int kmax = (CoefsX.n-1)/2;
    real[int,int][int] resultL(2*kmax+1), result(2*kmax+1);
	// resultL=0.; result=0.; 
	
    for(int kk=-kmax; kk<=kmax; kk++){
        real[int,int] resultAux(2*kmax+1, 2*kmax+1);
	    for(int ii=-kmax;ii<=kmax;ii++){
            for(int jj=-kmax; jj<=kmax; jj++){
            	resultAux(ii+kmax,jj+kmax) = (1./2)*(abs(CoefsX[kk+kmax](ii+kmax,jj+kmax))
                                                 + abs(CoefsY[kk+kmax](ii+kmax,jj+kmax))
                                                 + abs(CoefsZ[kk+kmax](ii+kmax,jj+kmax)));
				}
			}
        result[kk+kmax] = resultAux;
    }
	return result;
}


func real[int,int] energycomputation(complex[int,int][int] & CoefsX, complex[int,int][int] & CoefsY, complex[int,int][int] & CoefsZ, int kk)
{
    int kmax = (CoefsX.n-1)/2;
    mpi(cout<<"kmax = "<<kmax<<", CoefsXYZ.n = "<<CoefsX.n<<", "<<CoefsY.n<<", "<<CoefsZ.n<<endl;)
    real[int,int] result(2*kmax+1, 2*kmax+1);
	// resultL=0.; result=0.; 
	
    for(int ii=-kmax;ii<=kmax;ii++){
        for(int jj=-kmax; jj<=kmax; jj++){
            result(ii+kmax,jj+kmax) = (1./2)*(abs(CoefsX[kk+kmax](ii+kmax,jj+kmax))
                                            + abs(CoefsY[kk+kmax](ii+kmax,jj+kmax))
                                            + abs(CoefsZ[kk+kmax](ii+kmax,jj+kmax)));
		}
	}
    
	return result;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Suma de la energía por coronas.
func real[int] energyk3d(real[int,int][int] & Energy)
{
    int kmax = (Energy.n-1)/2;
    int LN = sqrt(3*kmax^2);
	real[int] energykbycrowns(LN+1);
	energykbycrowns = 0.;
	real module; 
    int l;

	for(int k1=-kmax; k1<=kmax; k1++){
		for(int k2=-kmax; k2<=kmax; k2++){
			for(int k3=-kmax; k3<=kmax; k3++){
				module = sqrt(k1^2+k2^2+k3^2);
				l = module;
				energykbycrowns[l] += Energy[k3+kmax](k1+kmax,k2+kmax);
			}
		}
	}
	return energykbycrowns;
}
//**Se puede evitar calcular puntos superfluos fuera del círculo cincunscrito al dominio.

///////////////////////////////////////////////////////////////////////////////////////////////////
// Función simplificadora.

func real[int] espectro3D(complex[int] uFourierv, complex[int] uFouriervY, complex[int] uFouriervZ, int kmax){

	write("Output.txt", " - Calculando Coeficientes...", 1, 1);
    complex[int,int][int] FCoefsX(2*kmax+1);//,(2*kmax+1)^2);
    complex[int,int][int] FCoefsY(2*kmax+1);//,(2*kmax+1)^2);
    complex[int,int][int] FCoefsZ(2*kmax+1);//,(2*kmax+1)^2);
    complex[int,int] FCoefsXL(2*kmax+1, 2*kmax+1);
    complex[int,int] FCoefsYL(2*kmax+1, 2*kmax+1);
    complex[int,int] FCoefsZL(2*kmax+1, 2*kmax+1);
    
    for (int kk=-kmax; kk<=kmax; kk++){
        mpi(cout<<"iteracion: "<<kk<<"/"<<2*kmax+1<<endl;)
        complex[int, int] AuxFCoefsX(2*kmax+1, 2*kmax+1), AuxFCoefsY(2*kmax+1, 2*kmax+1), 
                          AuxFCoefsZ(2*kmax+1, 2*kmax+1);
        
        FCoefsXL = FourierTransform3D(uFourierv, kmax, kk);
        mpiAllReduce(FCoefsXL, AuxFCoefsX, mpiCommWorld, mpiSUM);
        FCoefsX[kk+kmax] = AuxFCoefsX;
    
        FCoefsYL = FourierTransform3D(uFouriervY, kmax, kk);
        mpiAllReduce(FCoefsYL, AuxFCoefsY, mpiCommWorld, mpiSUM);
        FCoefsY[kk+kmax] = AuxFCoefsY;
    
	    FCoefsZL = FourierTransform3D(uFouriervZ, kmax, kk);
        mpiAllReduce(FCoefsZL, AuxFCoefsZ, mpiCommWorld, mpiSUM);
        FCoefsZ[kk+kmax] = AuxFCoefsZ;
    
    }   

	write("Output.txt", " - Calculando energia...", 1, 1);
    real[int,int][int] energyhat(2*kmax+1);
    for (int kk=-kmax; kk<=kmax; kk++){
        mpi(cout<<"iteracion: "<<kk<<"/"<<2*kmax+1<<endl;)
        real[int,int] energyhatAux = energycomputation(FCoefsX, FCoefsY, FCoefsZ, kk);
        energyhat[kk+kmax] = energyhatAux;
    }   
    
	write("Output.txt", " - Sumando por coronas...", 1, 1);
    real[int] energykk = energyk3d(energyhat);
    return energykk;
}

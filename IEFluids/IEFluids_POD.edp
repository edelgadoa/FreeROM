///////////////
// FreeROM 
///////////////
verbosity = 0;
 
load "msh3"
load "gmsh"
load "iovtk"
load "lapack" // Eigenvalue problem solving
include "IO.idp" // Para leer y guardar 

// Calculo en paralelo
macro dimension() 3 //EOM
include "macro_ddm.idp";
load "PETSc";



// Defino algun macro que necesitare
macro GradUGradV(U,V) (dx(U)*dx(V)     + dy(U)*dy(V)     + dz(U)*dz(V) 
					 + dx(U#Y)*dx(V#Y) + dy(U#Y)*dy(V#Y) + dz(U#Y)*dz(V#Y)
					 + dx(U#Z)*dx(V#Z) + dy(U#Z)*dy(V#Z) + dz(U#Z)*dz(V#Z)) //EOM
					 
macro UporV(U,V) ([U,U#Y,U#Z]'*[V,V#Y,V#Z]) //EOM 

int[int] fforder=[1,1,1,1];
// Cargamos las funciones para pasar la numeracion de IEfluids a FreeFem
include "IE2FF.idp"

// Cargo las funciones para el calculo de productos escalares y normas
include "Normas_3D.idp"

mesh3 ThG = readmesh3("IEfluids.mesh"); 
mesh3 Th = ThG;

// PETSc matrices
Mat MatNormP;
Mat MatNormV;
int[int] mapVh3P1, mapVhP1;

int[int] myN2o;
macro ThN2O() myN2o //EOM
buildDmesh(Th);

fespace VhP1G(ThG, P1);
fespace Vh3P1G(ThG, [P1,P1,P1]);

fespace VhP1(Th, P1);
fespace Vh3P1(Th, [P1,P1,P1]);


mapVh3P1 = restrict(Vh3P1,Vh3P1G,myN2o);
mapVhP1 = restrict(VhP1,VhP1G,myN2o);

{
	macro def(i) [i, iY, iZ] //
	macro init(i) [i, i, i] // EOM
	createMat(Th, MatNormV, [P1, P1, P1]);
}
{
	createMat(Th, MatNormP, P1);
}


{
	varf NormV([u, uY, uZ],[v, vY, vZ]) = int3d(Th)(UporV(u,v));
	
	matrix PescV = NormV(Vh3P1, Vh3P1); //H1PEMat;
	MatNormV = PescV;

	varf NormP(p,q) = int3d(Th)(p*q);
	
	matrix PescP = NormP(VhP1, VhP1); //L2PEMat;
	MatNormP = PescP;
}


int ReSnap = 20; // numero de Snapshots de Reynolds
int TimeSnap = 6; // numero de Snapshots en tiempo por cada Reynolds
int Nsnap = ReSnap*TimeSnap;

// Variables donde guardo los snapshots que cargo

Vh3P1[int] [Vh ,VhY, VhZ](Nsnap);
VhP1[int] Ph(Nsnap);

// Comienzo bucle de lectura de snapshots

for (int NRe=1; NRe<=ReSnap; NRe++){
	for (int NTemp=1; NTemp<=TimeSnap; NTemp++){
		int i = (NTemp-1) + (NRe-1)*TimeSnap;
		if(mpirank==0)cout<<"V_"+NRe+"_meanfile"+NTemp<<endl;
		{
			Vh3P1G [VhG,VhGY,VhGZ];			
			readvector("Snapshots/V_"+NRe+"_meanfile"+NTemp+".txt", real, Vel, 0);
			VhG[] = Vel;
			Vh[i][] = VhG[](mapVh3P1); // Load in the local mesh
		}	
			
		if(mpirank==0)cout<<"P_"+NRe+"_meanfile"+NTemp<<endl;
		{
			VhP1G PhG;	
			readvector("Snapshots/P_"+NRe+"_meanfile"+NTemp+".txt", real, Pres, 0);
			PhG[] = Pres; 
			Ph[i][] = PhG[](mapVhP1); // Load in the local mesh
		}
	}
}

real[int,int] Vhi(MatNormV.n, Nsnap), Phi(MatNormP.n, Nsnap);
ChangeNumbering(MatNormV, Vh, Vhi);
ChangeNumbering(MatNormP, Ph, Phi);

// Calculo de matrices de Correlacion
real[int, int] AuxV(MatNormV.n, Vhi.m), AuxP(MatNormP.n, Phi.m); 
MatMatMult(MatNormV, Vhi, AuxV);
MatMatMult(MatNormP, Phi, AuxP);		


real [int,int] CVL= Vhi'*AuxV; // El producto se hace de manera local, luego hay que reunir la info de todos los procesadores.
real [int,int] CPL= Phi'*AuxP;

real [int,int] CV(CVL.n,CVL.m), CP(CPL.n, CPL.m);

mpiAllReduce(CVL, CV, mpiCommWorld, mpiSUM);
mpiAllReduce(CPL, CP, mpiCommWorld, mpiSUM);


// CV *= (1./Nsnap);
// CP *= (1./Nsnap);
		

write("Correl_U_"+mpisize+".txt", CV, 0, 0);
write("Correl_P_"+mpisize+".txt", CP, 0, 0);

// Calculo los eigenvalues y eigenvectors 
real[int] SU(Nsnap), SP(Nsnap);
real[int,int] UU(Nsnap, Nsnap), UP(Nsnap, Nsnap), VTU(Nsnap, Nsnap), VTP(Nsnap, Nsnap);

// Calculo el SVD --> C = U*S*VT 
dgesdd(CV,UU,SU,VTU);
dgesdd(CP,UP,SP,VTP);

// Save the Eigenvalues
write("EigenV"+mpisize+".txt", SU, 0, 0);
write("EigenP"+mpisize+".txt", SP, 0, 0);

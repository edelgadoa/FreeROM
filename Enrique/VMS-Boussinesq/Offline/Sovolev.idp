    	
	//CONSTRUCCION DE LA CONSTANTE DE INYECCION DE SOBOLEV VELOCIDAD
    real epsl=1e-10; 

	varf prodT([uu1,uu2],[v1,v2])=
				int2d(Th)(//((1./Refijo)+((CS*hTriangle)^2)*mod(U1N,U2N))*
				 			GradGrad(uu1,uu2,v1,v2))//+[uu1,uu2]'*[v1,v2])
							+on(1,2,3,4, uu1=0,uu2=0);//+on(1, uu1=inlet,uu2=0);
	
	matrix T=prodT(Vh2P2,Vh2P2);
	set(T,solver=sparsesolver);
	
	real epsrho=1e-5; 
	real errRHO=10;
	Vh2P2 [uh1k,uh2k],[uh1k1,uh2k1];	
	real rhok,rhok1=20;
	uh1k1[]=1;
	for (int ir=0;ir<1000;ir++){
		rhok=rhok1;
		real normTuk=int2d(Th)(//((1./Refijo)+((CS*hTriangle)^2)*mod(U1N,U2N))*
						GradGrad(uh1k1,uh2k1,uh1k1,uh2k1));//+uh1k1^2+uh2k1^2);

		if(errRHO<epsrho){
			break;
		}
		else{
			uh1k[]=uh1k1[];

			VhP2 zuk;
			real normL4=int2d(Th)((uh1k^2+uh2k^2)^2);
			zuk=(uh1k^2+uh2k^2)/sqrt(normL4);

			real normL2=int2d(Th)(zuk^2);

			varf nolin([uu1,uu2],[v1,v2])=int2d(Th)(zuk*([uu1,uu2]'*[v1,v2]))
											+on(1,2,3,4, uu1=0,uu2=0);
			
			matrix Zu=nolin(Vh2P2,Vh2P2);

			//Empezamos el metodo de la potencia
			real errl=10;
			real lambdak,lambdak1=10;
			Vh2P2 [u1l,u2l],[u1l1,u2l1];
			u1l1[]=[U1N[],U2N[]];
			for (int il=0;il<1000;il++){
				if (errl<epsl){
					uh1k1[]=u1l1[];
					rhok1=lambdak1;
					break;
				}
				else{
					u1l[]=1;
					real [int] w1(Vh2P2.ndof);
					w1=Zu*u1l[];
					u1l1[]=T^-1*w1;
					lambdak=lambdak1;
					real[int] phik1(Vh2P2.ndof),phik(Vh2P2.ndof);
					phik1=u1l1[];
					phik=u1l[];
					lambdak1=phik1.sum/phik.sum;
					real normX=int2d(Th)(//((1./Refijo)+((CS*hTriangle)^2)*mod(U1N,U2N))
									GradGrad(u1l1,u2l1,u1l1,u2l1));//+u1l1^2+u2l1^2);
					u1l1[]/=sqrt(normX);
					errl=abs(lambdak-lambdak1)/abs(lambdak);
				}
			}
		errRHO=abs((rhok-rhok1)/rhok1);
		
		}
	
	}
	real rhoV=rhok1;
	
	//CONSTRUCCION DE LA INYECCION DE SOBOLEV PARA TEMPERATURA
	varf prodTEM(t,tt)=
				int2d(Th)(Grad(t)'*Grad(tt))
						+on(2,4, t=0);
	
	matrix TEM=prodTEM(VhP2,VhP2);
	set(TEM,solver=sparsesolver);
	
//	real epsrho=1e-5; 
	errRHO=10;
	VhP2 th1k,th1k1;	
	real rhokt,rhokt1=20;
	th1k1[]=1;
	for (int ir=0;ir<1000;ir++){
		rhokt=rhokt1;
		real normTuk=int2d(Th)(//((1./Refijo)+((CS*hTriangle)^2)*mod(U1N,U2N))*
						Grad(th1k1)'*Grad(th1k1));//+uh1k1^2+uh2k1^2);

		if(errRHO<epsrho){
			break;
		}
		else{
			th1k[]=th1k1[];

			VhP2 zuk;
			real normL4=int2d(Th)(th1k^4);
			zuk=th1k^2/sqrt(normL4);

			real normL2=int2d(Th)(zuk^2);

			varf nolin(t,tt)=int2d(Th)(zuk*(t*tt))
											+on(2,4, t=0);
			
			matrix Zu=nolin(VhP2,VhP2);

			//Empezamos el metodo de la potencia
			real errl=10;
			real lambdak,lambdak1=10;
			VhP2 t1l,t1l1;
			t1l1[]=t[];
			for (int il=0;il<1000;il++){
				if (errl<epsl){
					th1k1[]=t1l1[];
					rhokt1=lambdak1;
					break;
				}
				else{
					t1l[]=1;
					real [int] w1(VhP2.ndof);
					w1=Zu*t1l[];
					t1l1[]=TEM^-1*w1;
					lambdak=lambdak1;
					real[int] phik1(VhP2.ndof),phik(VhP2.ndof);
					phik1=t1l1[];
					phik=t1l[];
					lambdak1=phik1(234)/phik(234);
					real normX=int2d(Th)(//((1./Refijo)+((CS*hTriangle)^2)*mod(U1N,U2N))
									Grad(t1l1)'*Grad(t1l1));
					t1l1[]/=sqrt(normX);
					errl=abs(lambdak-lambdak1)/abs(lambdak);
				}
			}
		errRHO=abs((rhokt-rhokt1)/rhokt1);
		
		}
	
	}
	real rhoT=rhokt1;
	
	cout<<"rhoV= "<<rhoV<<" --- rhoT= "<<rhoT<<endl;
	romub=2*rhoV+2*sqrt(rhoV)*sqrt(rhoT);	
	cout<<"RHOB= "<<romub<<endl;

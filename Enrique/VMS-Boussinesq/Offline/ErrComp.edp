load "iovtk"
load "UMFPACK64"
macro Grad(u) [dx(u), dy(u)]//
macro div(u1,u2) (dx(u1)+dy(u2))//
macro UgradV(u1,u2,v1,v2) [[u1,u2]'*[dx(v1),dy(v1)],[u1,u2]'*[dx(v2),dy(v2)]]//
macro mod(u1,u2) (sqrt(dx(u1)^2+dy(u1)^2+dx(u2)^2+dy(u2)^2))//
macro moddc(u1x,u1y,u2x,u2y) (sqrt(u1x^2+u1y^2+u2x^2+u2y^2))//
macro GradGrad(u1,u2,v1,v2) (dx(u1)*dx(v1)+dy(u1)*dy(v1)+dx(u2)*dx(v2)+dy(u2)*dy(v2))//



int[int] fforder=[1,1,1,1]; // 0 save a cell value, 1 save point value

//Constantes varias
real CS=0.1;
real cc1=16.;
real cc2=sqrt(cc1);


real Pr=0.71; //Prandlt aire
mesh Th=square(50,50,flags=3);
//plot (Th,wait=1);
real dt=1.e-2;
real epspen=1e-8;

fespace Vh4P2(Th,[P2,P2,P2,P1]);
fespace Vh4P1(Th,[P1,P1,P1,P1]);
fespace Vh4P1dc(Th,[P1dc,P1dc,P1dc,P1dc]); 
fespace VhP0(Th,P0); 
fespace VhP1dc(Th,P1dc);
fespace VhP1(Th,P1);
fespace VhP2(Th,P2);
fespace Vh2P2(Th,[P2,P2]);

VhP2 G=1-x; //Levantamiento para la temperatura	

//INTERP. MATRIX
matrix DX3,DY3;
{
	matrix DXYZ3u1,DXYZ3u2,DXYZ3p,DXYZ3T;
	
	int[int] c0 = [0,-1,-1,-1];
	int[int] c1 = [-1,1,-1,-1];
	int[int] c2 = [-1,-1,2,-1];
	int[int] c3 = [-1,-1,-1,3];
	
	DXYZ3u1 = interpolate(Vh4P1dc,Vh4P2,U2Vc=c0,op=1);
	DXYZ3u2 = interpolate(Vh4P1dc,Vh4P2,U2Vc=c1,op=1);
	DXYZ3p  = interpolate(Vh4P1dc,Vh4P2,U2Vc=c2,op=1);
	DXYZ3T  = interpolate(Vh4P1dc,Vh4P2,U2Vc=c3,op=1);
	DX3     = DXYZ3u1 + DXYZ3u2 + DXYZ3p + DXYZ3T;
	
	DXYZ3u1 = interpolate(Vh4P1dc,Vh4P2,U2Vc=c0,op=2);
	DXYZ3u2 = interpolate(Vh4P1dc,Vh4P2,U2Vc=c1,op=2);
	DXYZ3p  = interpolate(Vh4P1dc,Vh4P2,U2Vc=c2,op=2);
	DXYZ3T  = interpolate(Vh4P1dc,Vh4P2,U2Vc=c3,op=2);
	DY3     = DXYZ3u1 + DXYZ3u2 + DXYZ3p + DXYZ3T;
}

matrix IPh,I4P2;
{	
	matrix Id1,Id2;
	matrix Id4;
	{
		VhP2 fAux2 = 1.;
		VhP1 fAux1 = 1.;
		Id2 = fAux2[];
		Id1 = fAux1[];
		Id4 = [[Id2,0,0,0],[0,Id2,0,0],[0,0,Id2,0],[0,0,0,Id1]];
	}
	
	matrix PI = interpolate(VhP1,VhP2); 
	matrix IP = interpolate(VhP2,VhP1); 
	matrix IPPI = IP*PI;
	IPh = Id2 + (-1.)*IPPI;
		
	matrix PI4 = interpolate(Vh4P1,Vh4P2); 
	matrix IP4 = interpolate(Vh4P2,Vh4P1); 
	matrix IPPI4 = IP4*PI4;
	I4P2 = Id4 + (-1.)*IPPI4;
}


matrix DXun = interpolate(VhP1dc,VhP2,op=1);
matrix DYun = interpolate(VhP1dc,VhP2,op=2);

real Ra=1.e3;

VhP2 Bv1,Bv2,Bt;
VhP1 Bp;

include "Boussinesq.idp";
Bv1=u1;
Bv2=u2;
Bp=p;
Bt=t;

real M=71;
VhP2[int] uu1(M),uu2(M),tt(M);
VhP1[int] pp(M);
ifstream bu1("Boussv1.txt");
ifstream bu2("Boussv2.txt");
ifstream bt("Bousst.txt");
ifstream bp("Boussp.txt");
bu1>>M;
bu2>>M;
bt>>M;
bp>>M;
for(int i=0;i<M;i++){
	bu1>>uu1[i][];
	bu2>>uu2[i][];
	bt>>tt[i][];
	bp>>pp[i][];
}

VhP2 erru1,erru2,errt;
VhP1 errp;

erru1=Bv1-uu1[0];
erru2=Bv2-uu2[0];
errt=Bt-tt[0];
errp=Bp-pp[0];

cout<<"Error L2 vel: "<<sqrt(int2d(Th)(erru1^2+erru2^2))<<endl;
cout<<"Error L2 pres: "<<sqrt(int2d(Th)(errp^2))<<endl;
cout<<"Error L2 temp: "<<sqrt(int2d(Th)(errt^2))<<endl;



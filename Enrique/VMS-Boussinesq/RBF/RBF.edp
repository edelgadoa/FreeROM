////CALCULO DE LAS CONSTANTES ß

load "iovtk"
//Fase off-line fuera del programa principal---> solo las calculo una vez...

int[int] fforder=[1,1,1]; // 0 save a cell value, 1 save point value


macro Grad(u) [dx(u), dy(u)]//
macro div(u1,u2) (dx(u1)+dy(u2))//
macro UgradV(u1,u2,v1,v2) [[u1,u2]'*[dx(v1),dy(v1)],[u1,u2]'*[dx(v2),dy(v2)]]//
macro mod(u1,u2) (sqrt((dx(u1))^2+(dy(u2))^2+0.5*(dx(u2)+dy(u1))^2))//
macro moddc(u1x,u1y,u2x,u2y) (sqrt(u1x^2+u1y^2+u2x^2+u2y^2))//
macro GradGrad(u1,u2,v1,v2) (dx(u1)*dx(v1)+dy(u1)*dy(v1)+dx(u2)*dx(v2)+dy(u2)*dy(v2))//

//Constantes de Smago
real CS=0.1;
real epspen=1e-8;

mesh Th=square(50,50,flags=3);
include "betas.idp" //para cargar las funciones para beta

//Declaración del parámetro
real Ra;
real Pr=0.71;

////////////////////////////////
//Constantes para el Rayleigh//
///////////////////////////////

fespace Vh4P2(Th,[P2,P2,P2,P1]); 
fespace VhP0(Th,P0); 
fespace VhP1(Th,P1);
fespace VhP1dc(Th,P1dc);
fespace VhP2(Th,P2);
fespace Vh2P2(Th,[P2,P2]);

//matrix DXun = interpolate(VhP1dc,VhP2,op=1);
//matrix DYun = interpolate(VhP1dc,VhP2,op=2);


VhP2 G=1-x; //Función de levantamiento para la temperatura.

real ni=15; //numero de puntos de interpolación inicial - 1
real nimax=70.; //numero máximo de puntos para la interpolación
real N=4000; //puntos de la discretiazcion fina del intervalo

real[int] betaI(nimax+1); //vector donde guardo los valores de beta de los ptos de interpolacion	
real[int] gamma0(nimax+1+2); //vector donde guardo los coeficientes del RBF

real Ramin=1.e3;
real Ramax=1.e5;


real [int] vRaI(nimax+1); //Vector con los valores de los parametros en los puntos de interpolacion inicial
real [int] vRafine(N+1+1); //Vector con los valores de los parametros para la discretizacion fina

for (int ig=0; ig<=ni; ig++){
	vRaI(ig)=Ramin+ig*(Ramax-Ramin)/ni;
	//vReI(ig)=Remin*(Remax/Remin)^(ig/ni);
	//vReI(ig)=6100+(Remin-6100)*((-Remax+6100)/(-Remin+6100))^(ig/ni);
	//vRaI(ig)=10^(3+ig*(1.)/(ni/2));
}
vRaI(ni+1)=Ramax+(vRaI(ni)-vRaI(ni-1));

for (int ig=0; ig<=N; ig++){
	vRafine(ig)=10^(3+ig*(1.)/(N/2));
}

cout<<vRaI<<endl;
//cout<<vRafine<<endl;


//Defino la matriz para el producto escalar mu barra

varf bound([uu1,uu2,tt,pp],[v1,v2,zt,q])=on(1,2,3,4, uu1=0,uu2=0)+on(2,4,tt=0);

int[int] II(1),JI(1);
real[int] CI(1);

real[int] b=bound(0,Vh4P2);
for (int gf=0;gf<Vh4P2.ndof;gf++){
		b(gf)= (b(gf)>10^10) ? 0 : 1;
	} 


matrix Fb,Fbt, Fvb,
X,Xt;
{	
//	Re=mub;
//	real nub=1./mub;
//	include "Smago.idp"; //Resuelvo el pb de EF
//	VhP2 U1,U2;
//	U1=u1+G1;
//	U2=u2+G2;
//	plot([U1,U2]);
//	//SOLO SI CONSIDERO LA NORMA MU BARRA!!
//	varf da([uu1,uu2,pp],[v1,v2,q])=int2d(Th)(nu*GradGrad(uu1,uu2,v1,v2)) 
//					+int2d(Th)(div(uu1,uu2)*q)
//					-int2d(Th)(div(v1,v2)*pp) 
//					+int2d(Th)(UgradV(G1,G2,uu1,uu2)'*[v1,v2])
//					+int2d(Th)(UgradV(uu1,uu2,G1,G2)'*[v1,v2])
//					
//					+int2d(Th)(UgradV(u1,u2,uu1,uu2)'*[v1,v2])
//					+int2d(Th)(UgradV(uu1,uu2,u1,u2)'*[v1,v2])
//					
//					+int2d(Th)((CS*hTriangle)^2*mod(U1,U2)*GradGrad(uu1,uu2,v1,v2))
//					+int2d(Th)(((CS*hTriangle)^2/mod(U1,U2))
//								*GradGrad(U1,U2,uu1,uu2)*GradGrad(U1,U2,v1,v2))
//					+on(3,1,2,4, uu1=0,uu2=0)
//					;
//	varf damultb([uu1,uu2,pp],[v1,v2,q])=-int2d(Th)(q)+on(1,2,3,4, uu1=0,uu2=0);
//
//					
//	Fvb=da(Vh3P2,Vh3P2);
//	real[int] Fmb=damultb(0,Vh3P2);
//	Fb=[[Fvb,Fmb],
//		[Fmb',1]];
	
	varf prodesc([uu1,uu2,tt,pp],[v1,v2,zt,q])=
			int2d(Th)(//(nub+((CS*hTriangle)^2)*mod(U1,U2))*
						GradGrad(uu1,uu2,v1,v2))//+[uu1,uu2]'*[v1,v2]))
						+int2d(Th)((1/Ramax)*pp*q)
						+int2d(Th)(Grad(tt)'*Grad(zt))//+tt*zt))
						//+on(1, uu1=inlet,uu2=0)
						+on(1,2,3,4, uu1=0,uu2=0)
						+on(2,4,tt=0)
						;
	
	Xt=prodesc(Vh4P2,Vh4P2);
//	[II,JI,CI]=Xt;
//	real[int] cc(CI.n);
//	for (int gf=0;gf<CI.n;gf++){
//		cc(gf)= (CI(gf)>10^10) ? 0 : 1;
//	} 
//	CI=CI.*cc;
//	Xt=[II,JI,CI];
	X=[[Xt,0],[0,1]];

}



//Fbt=Fb';
//set(X,solver=UMFPACK);
//set(Fb,solver=UMFPACK);
//set(Fbt,solver=UMFPACK);
//comienzo el bucle donde calculo los ß de cada uno de los ni valores de mu:

for (int i=0;i<=ni+1; i++){
	
	int I=i;
	real tauto=clock();
	
	//Metodo de la potencia.
	include "potencia.idp";

	tauto=clock()-tauto;
	cout<<"T autoval: "<<tauto<<endl;
	cout<<"Ra: "<<Ra<<",beta: "<<betaI(i)<<endl;
} 
/////FIN DEL CÁLCULO DE LOS BETAS "INTERPOLADORES"

cout<<betaI<<endl;
real[int] gamma1(ni+3+1);
//real[int] vReI1=vReI(0:ni);
//////////////////////////////////////
{
	//Calculo los beta_h(i)
	real[int] lbeta(ni+1+2+1);
	lbeta=0; //las dos ultimas componentes son 0!
	for (int i=0;i<=ni+1;i++){
		lbeta(i)=betaI(i);
	}

	real[int,int] Blbeta(ni+1+2+1,ni+1+2+1);
	Blbeta=0;
	//Primera parte de la matriz!
	for (int i=0;i<=ni+1;i++){
		for (int jj=0;jj<=ni;jj++){
			Blbeta(i,jj)=(vRaI(i)-vRaI(jj))^2*log(abs(vRaI(i)-vRaI(jj))+1);
		}
	}

	for(int i=0;i<=ni+1;i++){
		Blbeta(i,ni+1+1)=vRaI(i);
		Blbeta(i,ni+1+1+1)=1;
	}
	for(int jj=0;jj<=ni+1;jj++){
		Blbeta(ni+1+1,jj)=vRaI(jj);
		Blbeta(ni+2+1,jj)=1;
	}

	cout<<Blbeta<<endl;
	cout<<lbeta<<endl;
	
	//Ya puedo obtener los valores para la RBF
	matrix BLbeta=Blbeta;

	set(BLbeta,solver=UMFPACK);
	gamma1=BLbeta^-1*lbeta;
}

//////////////////////////////////
cout<<gamma1<<endl; //gamma0(0:ni)--->gamma_j(mu), gamma0(ni+1)--->omega1, gamma0(ni+2)---->omega0

//Construyo la beta continua
real[int] Betak(N+1),Betak1(N+1);
for (int k=0;k<=N;k++){
	Betak(k)=fbeta(gamma1,vRaI(0:ni),vRafine(k));
}

for (int k=0;k<=ni+2+1;k++){
	gamma0(k)=gamma1(k); //actualizo los valores de gamma0
}
		
//ofstream BETA("betaI.txt");
//BETA<<Betak<<endl;

//Comienzo el algoritmo adaptativo
real Ej=1;
real I;
for (int j=ni+1+1;j<nimax;j++){
	if (Ej<1e-4){
		break; //test de parada
	}
	else{
		real[int] gamma0i=gamma0(0:j+1);
		real[int] vRaIi=vRaI(0:j-1);

		cout<<"vRaI"<<vRaIi<<endl;
		//Primero calculamos la funcion h(mu)
		real[int] h(N+1);
		for (int k=0;k<=N;k++){
			h(k)=hadapt(vRaIi,vRafine(k));
	}

	real hmax=h.max;
	
	//Calculamos el argmax del criterio C(mu)
	real[int] C(N+1);
	real maxC;
	real maxRa;
	for (int k=0;k<=N;k++){
		C(k)=(abs(derbeta(gamma0i,vRaIi,vRafine(k)))+1e-6)
			*(abs(der2beta(gamma0i,vRaIi,vRafine(k)))+1e-6)
			*(h(k)/hmax)^2*gneg(Betak(k));
		if (maxC<C(k)){
			maxC=C(k);
			maxRa=vRafine(k);
		}
	}
	
	vRaI(j)=maxRa;

	I=j;
	include "potencia.idp";

	//Calculo los beta_h(i)
	real[int] lbeta(j+1+2);
	lbeta=0; //las dos ultimas componentes son 0!
	for (int ii=0;ii<=j;ii++){
		lbeta(ii)=betaI(ii);
	}

	real[int,int] Blbeta(j+1+2,j+1+2);
	Blbeta=0;
	//Primera parte de la matriz!
	for (int ii=0;ii<=j;ii++){
		for (int jj=0;jj<=j;jj++){
			Blbeta(ii,jj)=(vRaI(ii)-vRaI(jj))^2*log(abs(vRaI(ii)-vRaI(jj))+1);
		}
	}

	for(int ii=0;ii<=j;ii++){
		Blbeta(ii,j+1)=vRaI(ii);
		Blbeta(ii,j+2)=1;
	}
	for(int jj=0;jj<=j;jj++){
		Blbeta(j+1,jj)=vRaI(jj);
		Blbeta(j+2,jj)=1;
	}

	cout<<Blbeta<<endl;
	cout<<lbeta<<endl;
	
	//Ya puedo obtener los valores para la RBF
	matrix BLbeta=Blbeta;

	set(BLbeta,solver=sparsesolver);
	real[int] gamma1i(j+3);
	gamma1i=BLbeta^-1*lbeta;
	
	for (int k=0;k<j+3;k++){
		gamma0(k)=gamma1i(k);
	}

	for (int k=0;k<=N;k++){
		Betak1(k)=fbeta(gamma1i,vRaI(0:j),vRafine(k));
	}

	//ofstream Betakk("Beta-"+j+".txt");
	//Betakk<<Betak1<<endl;

	real[int] Errbeta(N+1);
	Errbeta=Betak1-Betak;
	Errbeta=abs(Errbeta);
	Ej=Errbeta.l2/Betak.l2; //norma infinito
	cout<<"Ej= "<<Ej<<endl;
	Betak=Betak1;
	}
}
real [int] gammaf=gamma0(0:I+2);
real [int] vRaIf=vRaI(0:I);
real [int] betaIf=betaI(0:I);

ofstream gammat("gammaI.txt");
gammat<<gammaf<<endl;

ofstream nus("vRaI.txt");
nus<<vRaIf<<endl;

ofstream betainter("BetamuI.txt");  //Esta contiene los datos para la fase offline
betainter<<betaIf<<endl;
	
ofstream Betafin("BetaBouss.txt"); //función ß total interpolada.
Betafin<<Betak<<endl;			